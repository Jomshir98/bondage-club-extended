// BCX: Bondage Club Extended
if (typeof window.ImportBondageCollege !== "function") {
	alert("Club not detected! Please only use this while you have Club open!");
	throw "Dependency not met";
}
if (window.BCX_Loaded !== undefined) {
	alert("BCX is already detected in current window. To reload, please refresh the window.");
	throw "Already loaded";
}
window.BCX_Loaded = false;
console.debug("BCX: Parse start...");

(function () {
    'use strict';

    const BCX_VERSION="0.9.6-867b187d";const BCX_DEVEL=true;

    const icon_ExternalLink = `data:image/svg+xml;base64,
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxzdmcgeG1sbnM9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iMjAiIGhlaWdodD0iMjAiIHZpZXdCb3g9IjAg
MCAyMCAyMCI+DQogIDx0aXRsZT4NCiAgICBleHRlcm5hbCBsaW5rDQogIDwvdGl0bGU+DQogIDxw
YXRoIGQ9Ik0xNyAxN0gzVjNoNVYxSDNhMiAyIDAgMCAwLTIgMnYxNGEyIDIgMCAwIDAgMiAyaDE0
YTIgMiAwIDAgMCAyLTJ2LTVoLTJ6Ii8+DQogIDxwYXRoIGQ9Ik0xOSAxaC04bDMuMjkgMy4yOS01
LjczIDUuNzMgMS40MiAxLjQyIDUuNzMtNS43M0wxOSA5VjF6Ii8+DQo8L3N2Zz4NCg==
`.replaceAll("\n", "");
    const icon_Typing_base = `m16.224 3.7453 18.537-0.00135c8.045 0.12979 14.142 7.9048 13.74 13.256v5c-0.07394 7.8789-4.2176 15.139-12.946 15.375l-13.663 0.17306-10.992 8.5772-0.13168-8.8861c-4.4316-3.095-9.4592-6.006-9.113-12.266l-0.15485-7.9735c-0.11565-6.8309 6.3297-13.251 14.724-13.255z`;
    const icon_Typing_dot = `m15.793 19.891a3.5336 3.5336 0 0 1-2.5515 4.2857 3.5336 3.5336 0 0 1-4.2954-2.5351 3.5336 3.5336 0 0 1 2.5186-4.3051 3.5336 3.5336 0 0 1 4.3147 2.5021`;
    const icon_Typing_star = `m11.902 16.017 0.16893 3.7841-3.5814-1.2839-0.64194 1.9934 3.6489 1.0136-2.3313 3.007 1.6893 1.2163 2.1285-3.1421 2.0948 3.1421 1.7231-1.2163-2.365-3.007 3.6489-1.0136-0.64194-1.9934-3.5814 1.2839 0.16893-3.7841z`;
    const icon_NewMessage = `data:image/png;base64,
iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAADpElEQVR42uyZP0grWRTGz+gk
yhPEXYSQQmTAJoWCqJ2VqAgmYhBFtxELURHfW7ERbATTprEIJmAEWcbONBKf+KcRG7HQoGEW0ZhC
gwmmEGIiZvy2eXlkvE40muhG5oMUmTn3nvO75947d85wAOgrqIi+iDQQDUQD0UA0EA3kPeLD4TA5
nc7voihOSpL0BxHJhZIEQRDuOjs7F8fHx220sLDwg4hQyL/p6Wk7NTU1/ZvJiOO4Tw/0pRiqq6uD
HM/zN8lk8k8iIqPRSKFQSJE/q9VKExMTVFJSQvF4nMkvAOI47sV5kDqcZrJN7wsAlZaWkizL5HK5
SBRFha0gCBQMBunx8ZGIKEo8z9+kyNbW1uB0OhnikZERXF5e4qMVDocxOTnJZMRut2N/fz/92o0C
ZGdnBwCwu7sLk8mkaFxZWQmPx/NhEOvr66iqqlLEIAgCNjc3AQB+v18dZGtrSzEaY2NjTHZmZ2cR
j8fzBnB/fw+bzcb4HRwcxNXV1W+7k5MTdZDt7W2mY5fLxXTa0dEBSZJyDnF+fg6r1cr4m5+fhyzL
CtusQQDA5/PBYrEoOi8vL4fD4cDd3V1OsuB2u2EwGBQ+WltbcXBw8Gyb4+Pj7EEAIJFIwG63M6PV
39+PUCj0ZohIJIKhoSGm37m5OcRiMdV2GTOSvkbUtLGxAaPRqHBaU1OTcRDUtLe3h9raWkVfFRUV
8Hq9L7Z909R6qmAwiL6+PmYUbTZbxlF8KbsWiwWnp6eviiEnIKl5vbKywszrlpYW+Hw+1XaSJMFs
NjNZcLvdWe2GDEhxcfGbQFLy+/1obm5WBMbzPBYXFxU7jSzLEEURZWVlCtuGhgYcHh5m7ffda+Q5
3d7eYmZm5tm9//r6GtFoFKOjo8z9qakpRKPRN/nM2dR6Tl6vl3ka19fXo7GxkTklrK6uvstXXkEA
IBAIYGBgQPWk2t3d/eoF/akgAJBMJrG0tAS9Xq+AcDgceHh4yImPvKwRNR0dHcFsNqOtrU31CZ0r
ED69iP2a94psVFdXRx6PhwCQTqfL7zt7roNnHPD8x1dRCvkTgwIk39nJK8iX+dCTnoVCzgj/qwpB
REQXFxcUCAQokUgwVY+n1ZLU/6cZVbN/TeUl3Wem9jqdjs7OzpQXTSbTRaEX6AwGw2VRb2/vP4W+
Prq6urb5np6euUgk8m15efmvWCxWQkSPBRI/p9fr5fb29p/Dw8N/c9rnaQ1EA9FANBANRAPRQP5/
+m8A4sEE5SZccHcAAAAASUVORK5CYII=`.replaceAll("\n", "");
    const icon_patreon = `M108.8135992 26.06720125c-26.468266 0-48.00213212 21.53066613-48.00213212 47.99733213 0 26.38653268 21.53386613 47.85426547 48.00213213 47.85426547 26.38639937 0 47.8530655-21.4677328 47.8530655-47.85426547 0-26.466666-21.46666613-47.99733213-47.85306547-47.99733213 M23.333335 153.93333178V26.0666679h23.46666576v127.8666639z`;
    const icon_discord = `M60.1045 4.8978C55.5792 2.8214 50.7265 1.2916 45.6527 0.41542C45.5603 0.39851 45.468 0.440769 45.4204 0.525289C44.7963 1.6353 44.105 3.0834 43.6209 4.2216C38.1637 3.4046 32.7345 3.4046 27.3892 4.2216C26.905 3.0581 26.1886 1.6353 25.5617 0.525289C25.5141 0.443589 25.4218 0.40133 25.3294 0.41542C20.2584 1.2888 15.4057 2.8186 10.8776 4.8978C10.8384 4.9147 10.8048 4.9429 10.7825 4.9795C1.57795 18.7309 -0.943561 32.1443 0.293408 45.3914C0.299005 45.4562 0.335386 45.5182 0.385761 45.5576C6.45866 50.0174 12.3413 52.7249 18.1147 54.5195C18.2071 54.5477 18.305 54.5139 18.3638 54.4378C19.7295 52.5728 20.9469 50.6063 21.9907 48.5383C22.0523 48.4172 21.9935 48.2735 21.8676 48.2256C19.9366 47.4931 18.0979 46.6 16.3292 45.5858C16.1893 45.5041 16.1781 45.304 16.3068 45.2082C16.679 44.9293 17.0513 44.6391 17.4067 44.3461C17.471 44.2926 17.5606 44.2813 17.6362 44.3151C29.2558 49.6202 41.8354 49.6202 53.3179 44.3151C53.3935 44.2785 53.4831 44.2898 53.5502 44.3433C53.9057 44.6363 54.2779 44.9293 54.6529 45.2082C54.7816 45.304 54.7732 45.5041 54.6333 45.5858C52.8646 46.6197 51.0259 47.4931 49.0921 48.2228C48.9662 48.2707 48.9102 48.4172 48.9718 48.5383C50.038 50.6034 51.2554 52.5699 52.5959 54.435C52.6519 54.5139 52.7526 54.5477 52.845 54.5195C58.6464 52.7249 64.529 50.0174 70.6019 45.5576C70.6551 45.5182 70.6887 45.459 70.6943 45.3942C72.1747 30.0791 68.2147 16.7757 60.1968 4.9823C60.1772 4.9429 60.1437 4.9147 60.1045 4.8978ZM23.7259 37.3253C20.2276 37.3253 17.3451 34.1136 17.3451 30.1693C17.3451 26.225 20.1717 23.0133 23.7259 23.0133C27.308 23.0133 30.1626 26.2532 30.1066 30.1693C30.1066 34.1136 27.28 37.3253 23.7259 37.3253ZM47.3178 37.3253C43.8196 37.3253 40.9371 34.1136 40.9371 30.1693C40.9371 26.225 43.7636 23.0133 47.3178 23.0133C50.9 23.0133 53.7545 26.2532 53.6986 30.1693C53.6986 34.1136 50.9 37.3253 47.3178 37.3253Z`;
    const icon_star = `m12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z`;
    const icon_heart = `m14.483 4.5372c-10.063 0.0305-12.109 8.5713-12.008 12.355 0.1628 6.5444 5.4929 11.067 10.223 15.516 4.7684 3.8893 8.5801 8.3608 12.383 12.838 3.8031-4.4771 7.614-8.9486 12.382-12.838 4.7298-4.4488 10.06-8.9712 10.223-15.516 0.10164-3.7842-1.9446-12.325-12.008-12.355-4.9198-0.28718-10.597 6.153-10.597 6.153-1.7777-1.9041-4.833-6.2892-10.598-6.153z`;
    const icon_BCX_cross = `m7.3532 5.3725 10.98 19.412-10.98 19.803h15.294l2.3528-5.4898c0.78426 1.8299 1.5685 3.6599 2.3528 5.4898h15.294l-10.98-19.803c3.6599-6.4706 7.3197-12.941 10.98-19.412h-15.294l-2.3528 5.4898-2.3528-5.4898z`;
    const icon_BCX = `data:image/png;base64,
iVBORw0KGgoAAAANSUhEUgAAAFYAAABWCAQAAAD/X6l8AAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAUPUlEQVR42rTbeZRdVbUu8N8+
/ak2VUmlJ30fCKGTRiFECQECCAER5cngCfK4cFFRvOodV0EZDK/eq2LzHD5RwOYiCELohNBjICBN
ICSkIX3fVaoq1ddp9n5/1EmlEtAEU5w1xhn7VK191nfmmmvObzY7iPzj15jyXX8280sdk3UpCkWI
EICYuKSiO2N/iyZcPejeEESaRKX/75m18d5piUvDitI9+9bb+w0ZG/woY8nAs1fW/2MsiYNgVdHW
8dru2WtSE8WECErLRQKBSCiUdbTX7D6/tgdsrAdU81w1U5SLxHru1QtwTMxqnYa8OLr+YFhiB5sQ
qZgXa1miWUKsJI2g539EQgWTjNA0s2F8h3btOnTJyclrHdry8cGGi5V+2r67gx5ptVokbMrcvcdh
g82oWlz23AYrxQS9pgcluJFQUT+ThUOaz0tKSkrIl8Dm5uQmjDZUWIIaHaAIMQlrbVC9urBix+GD
7VIslD3QbpmcuKBHLlHPopFQ3DRlWs7IZwoKCuLi4oJE4yVZR0r+g+Ujy7Wru29sy9jDB0uk8oXU
qhXqS2CD/XQuLiEp7gjVOme0fbRTh86S1IrTO4+rNExKRlJc0Gv7u68SGiyR3h57dJeGgyI56AEr
Ir6+8rmm8e8aKiYswY2JIa9Vh112aNAmKmub0/+ZsMdeNJ4V1uQ8o9ZQg2VlpQRCYWlfYhJW2a3q
+WB558GldnCwBQTKH2q88u34ybIKcnK6NNiu1SabddmjS1xSXNvZ/W4NdndbimJF6zlxXV4SSquS
McQRKg02QEpSQlzkHZ1G/aVfFPYF2O4vybxU9tq7J71uiHpbrdWqSZNIKBAXkyltcX5c24ziA5Gk
QO7U/HEBkog0KtrsDZEaNcqMNNRATdYqX1w7PyvqC7DdE4I9ZffvOemPyCkoiIn3GLKYqGQVIkGi
dc6wB+jAnguKqag0LxAXL52APRqE3hGXRqcBT9nZTl+Ardh7Dp9qru8YEBNI9LopFCqISQgMVW2L
5vOyk8pXbJEb1TY7bqyc7UJFYckBEJcoaXUXkm39H8gL+wbsXouQWZp9uf28bi9U7LGX5WpljDBU
taGqPGx+3bZZg1Z06Tg9N/IjzhOp12yrzTo0aS7tRLesA6Gy16sWB4cG4uBg925QLCx/qOM8CgL9
pIxRq8IgA6WlS5uddJSFGueW/yrW1XZOhSNVSBgoUJTTpd42LRqt06lTuzSqHu9oD/sKbFWPVUw9
27ixMOI40w2RUS7ZY4ZCRTGBomGOsOTY+KTKjrWnTzJCKJQHSSnVxonktOvQZJHXJLb3n5c4pMN1
SGA79l2uS8/r+OJ4M3XKycv3eLG9fr8ga4IVVQ3fIV43RlkvFxL28LC4av1N0m6hyqcSK/sQ7K5e
Hic7v+XqdzP1siWt3eeJ9rneqZ6z85ORChMkxCVFJbYWCBRLliOm2QpR2O+xmAJ9BTbb27m+mFqx
fPpmk7qdaQ/QoIeDFQwywd8wwQhpjZbaLY+YlBrT9FcUSdpqubLVNQsI+g5s7wmx5sqHtk9fYmIv
vqoXXEIpUy3RaYJ2j9upwvlG6VQu4zl/0c+J+kt7S73h9/ffGhyyEhwC2Nh+tKX8scSX3u23W42w
Z/u7GVhQug6N009Rg/uc4LvGqsVyf7PDKlstsdh4oywRb6h+aLcifQc2tf+nN8qeXn/xBgMUe8UM
vd8Lak31iryfOQXtfukt8/FpZ7pQmTa7PGaL8uaO5iah4FCN/cHnpfcPQ8Kqv2y7eJlpglKY44Bg
JaHRDpf4nhp5j/u+dWb5hWmG9Zp1mSV+NmrBfdkvJZ49dMkelM8W9xuh6qdjG96xQ1zQww72vZKa
POlzfqrGble72hTz3ensXlBDnQab5SeuPNJ9xbl9qAYHGpbEpn5PbPs/Kw3vkew+2cZ1eMTlrsQK
X9DqTrNL8uiy0qvWaZcx1qlShvhvmdpf3hHf5uU+Apt7TzyauS+4fGn2RNmS8Yp6NinvEaf4PNa5
wpF+oFqXrB2ec5e3pIVy0lqNd73zRS62oHrZL+Ona+wTNWg/YLSJvZp+a4Nt4iUWtS/AeVk/Nwls
8r+d7OdqxST9j7mukzJZRlZkms+K+brfWmm6a6Sm5S7tVrLDBpt+72ipeqzR2yXSF5S8U9ImO3xf
RrvrHeN7OnVo9g23Otq3DbdNq3Z5aT92t5F+q12XSeoU56rpE8lWvmdUqHwianxbo0QpGgvEtHrG
FUbjZhk/kJG2wyWWeMIN3jJPU+mndXnLDqdrstACrcpFIx3bJzr7fpuTebt84Y45G/QXiImssNYu
OxUttN4Tfi6J0HcN8w3tHvakUKLkOoarsFBWu3WulTTIu2Vhvz4Bm3+/7chX/XHzOYuDaeJC8633
NYNsVm23d82w3jLHWajBH6U850/yJedS0N/JJmuwWkzSuwbLCcSCD8V0lSzCi6k168ftMMIO77jM
HF1GGoXTZDW41/N+b46ChBW2i5eccd5glV61zWJZExU8ayedUXOfku8D4G5omr9x3EqjNQo0+g8p
Y40zxiApg31Jl0941HUu8KbWUiSXV+HrTveCjZar8wkTrNMmttGiD00NiOn30O4vLEoVNZlqmS71
Nko40/FmOBZpx5ruGXd6VVIgkhd3sTNl1HhKu9k2S1lsj/jCqP5QwAYHI2gT/97BK9/5WGLGmX4i
aYexmiywxk6Paneiy8xUrVVGpzv8UJuEpH/3aZuU+a2fOtO3ZLzkt96pz34kWgeb+9qD9fCvtuz8
9IxL7VKQEZc1y0X4qsV+4zojXOlkY5S5Xo1blLnZDDW2e9hvHGW2Sboss0L659bF+sbdvn8OKi4U
PV286cF0g4Q6oxzvOKGYIYY4y1/90HVOdIMpGpxpsm/YIa5gqZ+p8kUfsczr/iJ4JfbzQ40VDqoG
Q/6Oznadcuy3Z5+xPt4maY3NutS4zKmmyYgEWt3jP7W40izHqvZ7N/umuJtU+ayLTXC731i3LXlR
0ENjNh0u2KHvk/CgMHbiM78aOdEGQ2TtVLTYi97yonNc5nQFWSmLfdUCZ/k3Q7T7g98qmOBGoyRV
+ooXculrgjv3ffNh62zwPmCLEsdMH77ZRkmBAbLKnOUsnR4xz+ed5EozFI12ix97VLlzjXeTNd70
VeeI+bV5FrWnvu7OQ4/ADjl9tB/YVNvxwSnPeUiXhKkuNMjxRiLjUy7ymO+73FyfV+Z4t7vWQzIG
a3eRN62yyxr3Wryl7MbgnugDrXyIKc/en7Nf+cIt5Ym1qmRsscqNIke51CxHoWCOM/zETy31L4Yb
6CpbPGmANhe6yzyhB6xfkb0yWPhBxXRQna07QCXyl196x4/iCVuNEGi13RrveNCbKs3wLybqL4l7
3KjWt/RXbpsbDHa9mX7ldmmtDydviNbuXxWDLYdLEbtLGXuzhwWOGx7/g1972waNisaY7Svm+5OT
POwc13nBLlvNdL+M71gk7QLnW2WTDYaL7PlV6qLYWv/E6xDzBiESCmJ03q1TTpnBTnSG6QaizDlm
+ZNfmGeRy33CBCe53cXuM0yLC8y3yFSvy0stigrRP4NV7INMDnVOGDhtioSxZulvgWud4ufelEen
y/zJV7W4zW22KBjoCls9ostMH/eUa/xZoi1YGQpLNbQ+lmxvGl747Kwf3DDscaFbTcLLvqLWf+p0
oc+aKmmYHxjrFo/pdJWsy+Xcb5W8OhU6xTdEN3vee7S1TyUbCBPF73zmrq8Pm29nCep63/Ypj5jn
Xz3oMt/0uh2WOdt/GW6B3wkMd4bAGkdJyUn+OvWRxF2hvzf6Kk1flv+vr197na9Z7w4DsNkVxpgr
ZpqXZbX5s5dc7UT9fUbcVzzvCDtNd7EX/be/KkhHQ3cWtXyAvOEHLjRHIp03zr32Rk/b4MeGSVvj
ImPcJmmr292qS0ZGm5/4f7aqd6xLBZ5Sb4oZ3vEr68W1ndJY989DPUTJ5k6d+OUv+oPvuc0UNLpa
zpdVKXO378tLieQcb5Z7/YfPG+VmGzzmDfOlDMAYXZZOHDij7v7iPw32ECQbpqPzrqip9kPfdI6C
olutcqOsdzzv+5qlUNTPdOe50wqPa5N1ugprpQ3TZphrzJRNNF2aixX9vdEHko2qKyYP9IAxLkfC
PLe7yiWS3vYjm5SXSPrJPmKDMtM9aIR651rmj27UocPRksYaZOPHBk5KL4s+LMl2C3eR37tCXKTe
LYY50S7tnvKyshJFH+kq5xvjNTlneUSZwUZIaFDuXKfIqXKU4qA9sxIlr/je0QeSjbXkV97hY85E
4EFLzTFes1ZPlg5LTsanTUe15c5xhnM9KSOjwhmOExcpSjrSy/ZcOOL2ZPuH58E6w9XtZpfC6Zfk
bDHIJHWa5QW6JFzv0+pt9Li8k6zAq0ZKKjNZQrFUNh3lCG0f3X1ysz3vO/rCdJU7Km4QWOB5M/Dv
1gh9x5H2KHetfzXWQG0edb5jNCpaa657fFJlqV4WKUo5SpBo+mRY+suB47DVIKAYdVIJNtjhStM9
7BqtqoXOcpUpUqj2M036+5sl9hjvNHUq5UrpuG44Ew3QMnPQwOTO6MOwsxGd0cqg1OeSQqNjzLFQ
uyqhsQYJNUu6yyNutdsaL2CacTrkepVJQgWDTLHgyKYZZfeFHxo3WBrt6s7MHGu8J3SKOc5pTjJd
bXd+xt2+7TpnGGW99YYYbY9CqbK7t/xUlHCMtLYL+wU13jsOG2wgELwSPb0RjHOu5b7mDZEMMpIi
G93seqc73iavWazLGDGF0sHaq4+hSNFIw7XMzk8vl33P6AudFfDo7z81N1GBqzzvIcudZZajJW3w
hD9b70rXeVGrdy1WZ3KptyYsvcdLudmCGpOtqN398dSbH9ztHmKSoyh88McXfE5R3NuutETeMCOw
2QbVLnerrNu1utdqH3VCqYkqUQqKupusYuLKrPB/Ff467qxEx4Frv9I3fDam+K2b1r0ojmlud7GJ
GrzkNYG5bneJJouEXrTaYBMUFEp1s70dCXt7P/KOMFHXiYWTszIHjD4LxVNLd9305d/cljxFo9Hu
8LaHkDPG55RZ7Y8ylntFymRl8uJiwlLxKegpQYWKyk31RrrhkvSzYV+brnyP5ibvXjntqhtujM9W
K2W0G9TaZY1QpyUqrPAXOaOM0CohLhQqCkol6VhJayOh8Yao/3j5sHBLH4Pdl98SJm/bEvvWNX8r
+19G2KpWmZ3WWSmryWue0GGgo8WslTBRsdQOEfQ0XEY91na0TePzMyrvDj8MsHtTh+l7Ok64+9QX
fNTZNntHq1C7lZ6zVpc606V12Ywx4gqlQ7GvC6y73zbtOG/Y88mKu6MPDWwxaoiP6xxTq9qznjFE
jaQOO9VrlzDYFOUKOm0ValYrJiUlJdnrHHc7hzFGW/Gx6MjM0qiP3e2+7EwYOzY/bIxT7bLJaqtE
SIipMdxQaaG07VpF6o0VSJcKe/v6bQOhomqjLRvafsGApWFfgq3srQfJxvNTpqnTz3jTNcsrCJFU
jkBaymKdIvUqe4WGUU+feFQKuo/xgoazB/0k1tKHbSf9e6lsy9Htx08yTEpKd+Pf3vbTvQwgZadN
AjFr7DT8fWs93YdsqLGWHLv9hPSz0Qc4NIeUmIuLS2i/OOw/xYCeVF13F21cXFJaWlLSBk2SUnZZ
8Z6U9L4m6kCN6cJM57kfxCkccq4r0FW7Z05Mi/WakJCS7MkvdnuqQKe3dapQoehdnb3iqkBcUlJK
QmS35XaLaZulLilRGn3mwWJaTssfmfCSherUKTfQSBUqlEmWCtJxG62VVHlfVJWevdZGU+RL7Weh
Nm3abLJVsy3ahZJyR7bNKb+rz3oRO3ok03xeJC4vtNF6kZgqMXVGqVRnqHJpq7Wqbq2YXxhVMbvR
EmPltdpuu2br7VbQrFhSnu6uo6Zz+/0uDPsIbLwEtXNk+0zCno2HNqFGq0TKVKlQYZNI3abUfWpq
r2oe/Jqd2rXao70k30CyVB8PSgSy47TChOyKPuqfDUtKkJ+TG52V1Fp6lmP/buOCXXaKxJSre6wt
JV/1u8y/tVoiVrISwX65s1AopkpeV139nH59BbabIkeJPReWOdsI6+zSbLMuRbmS349RitGKhrzS
73stbYVk7Q8HnLLlYymxHnrY3TSZlJAyTLUBJtlhnuazB/wi6OgzyQa6Tmw58WgnqDJRpFOjPXZb
qVXOTh1iiuICSQN/VGgIg6graq377o75URCVmFdWnbRyY9WpVqNCWlLOSq9+tOu0qvl90qBejcDm
T8QqR8vKiwmkDDFM5CR5nbbbpdUaG+RUrIo/n1eIIjmJNyqWNU7NGGmcSrWGKisZu+724C4FGRO8
nmk8p3p+0BdgYwJhXcsllSb26N3ejF9MUlqtQKDZbbaqebq4K54MCqFocHxb7f27p5a73DDFUvgY
yffEdaFAaLI6TWc2DI5vjw7fKXTJqZ/ZPnWCgT2PVe1TkVBRTk5cs2aZrsEP9hOdEKUJ+hWD5EPJ
1jYtYvLyJbD784XuTELHxOIZFaVs5GGBzUpqvqDcJOkDoO7t6Oqm1m/ao+bNygWdwhWpQmUU2x7F
c0uqXmnxpsIBXYuRfc87pUyWDZo+G0+mDh9sh9axrR+rM+6Ax6N6X8e1eFdgyLygM0FDopAQNgWF
ysKAe+KW2CnRs1B0QAmgYJw6TSe1TwoPH2xB08eLR0xQ1RP6Rb2CwG6GmrLGelW7+z2S2McGIspU
PFm2cZvVPZY56EVp9vKvfqYLa5pmJw8fbCLbcVnGeAl6PSu3L+cXiMl5R07tM43LNtpWOnyBLk3y
myofK1isU1ysF+cKelHLmKMM0HBxR+VhW4OuqS2TJ7WNLES99DXarxMhYZeVQSJRdX9Y8k1Bj8UI
Vf3Prs+si28Oxyrs186+j4rnjTI88dYRrUd78R9j+f8DAFFTI9BZXoPgAAAAAElFTkSuQmCC
`.replaceAll("\n", "");
    const icon_OwnerList = `data:image/png;base64,
iVBORw0KGgoAAAANSUhEUgAAAFYAAABWCAYAAABVVmH3AAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAMyUlEQVR42uyde2xUV37HP3Pv
zPg5gz02njE2hrjhsSF4wRBCsgtBBiK1aOv1atOHFJWN2rCNKqKoEklXVaQkjdSlm6ZJiygl2zZt
Nt0u2pJNQrI0ySpZSIXlBBwwGD+CAzZjxsZ47BnPwzP33tM/5kwyMWDmvY53vtKRNWPfe3/3e37n
/J732iSEoIDsQylQUCC2QGwBBWILxBaILaBAbIHYArEFFIjNMUx5vNYqYCXgBIqAEHAFOAtc+A3z
sBpYLmUrBsJStm6gdy4S6wJ2Adul0OUVFRXFDofDAuherzfg9XqngEHgbeDfgMk8kbkU2AncDywE
yuWEK4AhyfUDw8BbwE+AkbmwGn4AXFBV1Q+IJIZPau+f5VguK/A0cB6YSkG208Du36TGOoGfqqq6
Udf1kviXjzzyCJs3b8bpdGK1WgmHw7jdbt577z1eeeWVxONDwGvAI/KGsrXlCWAF8CKwGShJ4zxB
KdvjUpPzhjqgR1VVIz7b+/btE4ODgyIcDotIJCKi0ajQNE1Eo1ExPT0tQqGQ6O/vF88++2yihhjA
+0BlFmVbB3QkqaG3Gm8Bt+eL1FK5lAUgtm/fLs6ePSt0XReGYYjZYBiG0DRNfPjhh2LLli2JN/Cm
3PcyRSPw6yyRGh//JVdnzvHT+EVbW1uFx+MR6aC7u1u0trYm3sATgJqhS/nvWSY1Pp7MNan3WywW
DRBNTU1icHBQZIKOjg7R0tISFz4K3JaBbN8DRnNE7GfAtlwS2wEIm80mjh49KrKBl156STidzvhe
fTDNYKYCOJwjUuPj79M0hEkZhen4FqBpWlaIvXbtmmhra4sLHwFsacj2beBSjontAu7ORUj7XavV
qgDs2rULVVWzMlsOh4OWlhbsdrsALMDvpnGaZqAhx9vgnTfyELJB7CbDMFSANWvWZFXijRs3cttt
n2+v96V4uC3DvTkVrJjpvWSD2Ns1TTMBuFyurEpbX1+P3W6PBzErUzy8Ro58YLHcz7NGrCKTFuzY
sQNFyW6yzGazYbFY4h8Xpnh4mRz5wIJsa6z58wDcas1+6s1kmhnjpzrp+cremWZeK1NiI3Jw+vRp
st1VEwgEMAwjMU5PNa4P5olYv/SMsrrHXrJYLGJgYICxsbGsSjs8PEwgEIh/vJLi4aPA1TwRe3lm
ujMbxB63Wq0irrXZxKlTpxgcHIwvg09SPHwCuJgnYvtlVi6rxB4KBoM6wOHDh9E0LSuS+nw+jh49
ysjISHzvejuN03wCeHJM6qekWWVIBh/GI5Fjx45lJfI6dOiQqK+v1xOim3SsoxM4kuPIa7/0CnKC
LdKIiba2NnHx4sWMSO3q6hLbtm0zEoT/TgayfV9uC7kgdRj4vVzvM8/GL7hnz560M1y9vb1i165d
icIfTFNb47AnpjSzPPbG/fhcogx4PpHczs7OpAnVNE2cOHFCPPzww4mCvwJUZ0G2JuDjLJN6BFiS
D8uoAn9OQoGura1NvPzyy6Knp0dEIpEbEhoKhcSZM2fEwYMHE3Ow8fETIFsJiG+SUOHIcLwvky+z
RgyZoopYGfn3iZWU60wmk9lkMn3u3O/cuZNly5ZRV1f3pWLiyMgIQ0NDdHd3c+jQoVgoZ7ag61o8
2JgChmS+98fSSGaCtcCPgK0ZnONnxCoH/bmMj/8aODXTOJSUlopN920RdrtdmM3mL832XXfdJTZt
2iSam5uv0wSnq1asWt0kVFWd+TudWLb+VZn/zQSLgD2kXlW4QKxHoirZGDddS/t9YBmxRocvobzc
xvMHfozXfZFfvf0GZ3p6uTrmRdf16wN6RaG6upoNa9by9fXrONV1lnd/+fbN/GFdRjnvSmN5KU35
S4B6YAfQRqwcfiNEgV8Rq0K8K72ASC6IvRv4G/nTPtsf7vvX/8DrvkiFOYqqWuj45By9A5/Rde48
U1NTVFZWUOtyUbeolubmdTgdlfgDIU52d/PLI0eIRmaVPyoJfhX4IRBIk+BieR9lMvVXJ0kPyvNf
ltuRL1lCr8tOJYEfAH8hl9KsE2KxWDCbVUQ0gqGApkX43oN/yJ1fX8UPf/SPnO/5lJqahVRVV2Er
L0fTDaLRCBbFoLioCMV0y/m2EEti7wH+APgn6agbKRIblgMZ/qp80dwRD07SzqfeCnXAIWJtOXXJ
aLmiKOjRKIamYbGYiUSjeCfGqaqrZf26NTQ2LqW21oVZVQkGgxiGwGJWcJQXU1FWOjNdOBuKiDWz
PSejsz+VpKcDAWhyNWiZkJoMseuBnwMPpCJwUXExQgi0aBhFUdB0DYtqZXR0BLdngm9sbsFeUf1F
mtEEJiGwCJ0Sq0o4HE71PoqArwH/Qqwn66/IUzNFOsRuk37kxpRDnQUL8HmvUVZkpbjIimIyYbGq
RKMm/FN+BGA2q5+7YyYhMJtVbCVWVH063YKkSS7l3wH+VrpDrxGr1Jbnm9ib3cF24IC0+iljyu9n
YnycppW3YysrJhCK0rCknqsTQTxXRhHCAKHg801gVlXMqoq9yMzUxDg/P/o+nqtZyesWEauT/RHw
l9J3bZDhsU8mpk0zBjf4zpTuLM/EPTI+vzPTO1vkcrHI5eK+b9zNhg3rmAzrjI2NceXyMIuX3saw
e4hoZJpQMMgHx45zbdyLz+8nT8/3TgIDMq04Kq3/tBwR6Wn45e/7ZKAyLQ3kLQ3bTGKXSwt7f7rS
Ll++HKfTSWNjI2vXrsXlcrF//35CwRCbN20mEPAzMHCB5vV3c/LjDgY++4w1a9bQ2tpKb18fn3R2
cuXKFfr7+/H7/cwhCBkB/i/wBnBOGjr9VgdWAP+Qbvzc3NwsHnzwQfH6668Lt9t9XU4gEAiIA/+8
Xxw+/D/C7XaL1177hWg/0X7d34XDYXHy5Enx1FNP3Sh3MJfGceBb3KQSrCZobqt0W1LGAw88wOOP
P85jjz3GHXfcgc12fTeQruv09fQycOECH390krLycpYvX47D4fiyY202U1tby5YtW1i/fj3FxcUM
DQ3h8/mYY2gA/phYi+h5blJfWwGcTGfmnnzySTE6OnrLtKBhGKK3p1c893fPizffOCLa29tvmvGa
qcH79u0T9fX1c1l7z8hk/3XW87F0Trh3714RDAaTzrn6fD7x6qv/LT744LgYGxtLKQF+4MCBuUpq
vNJxLtE1VWVo+CLgSGUdPProozzxxBOUlSXfbKJpGt3nzlFSbGVRXR0lJcl3PzY1NTE5OUlHR8dc
2xLiIXCNDEqOAX5FspxyP/3u3btvuJfOBq/Xi883ydDgEB3t7UwFppI+1mq1snv3buYo4t7Vt2QM
YFZllJJSIPDCCy+wdetWzObkczjRaJSPPvoI36QXz/Aw4+NeFtbUUFOTfN9aVVUVPp+P9vZ25jCc
wFtKOj5rS0tLYrNa0sSOjo5x+7IV7HzoIVZ+bSVTU6ln+3bs2MEcxz1Ag5Ji6jA2JU5nyp2FJpMJ
Q9ew2+w0LF1KcWk5hq6nLHVDQwNfAaw2p3NUuu2aJkyc6z5HeDqM99o4FRVLUz5HLroac+Hj5u3p
b1VVqaxy4PGM8OsPjhOeDrN48WLmKSzmfF3JarWyYcNdBINBHJUODEOnurp6vhIr8vq+ggUL7CxY
YEfTNMrKy7P2IMhchAL8Z0L2JqeIRjVGPB50LYrJpKRSgvlKEvscsQ6R2e5ygix0R7uHh3FfHqav
t4/+/j6uXh2b18R2AX9C7InmG+EisU6X45lcSNM03O5hKisrqa5ZiKIojI6OzFti48ark9gzp01A
C7Eaux84AfyfJPehTC+mRaI0NTVx7zfv5Z133iEUCs17YgHGiDV7nZDfG8RKEdqMeDh9U4mObmhM
R6YxDIP5/IpV83X3PqOXPmt7jqJgtVg5e6aLU52ncdYspLGxcV7vsfm5kKLQsGQJkz4/JUVFlNts
OJ3O3xqNzSlqamqor1/M4iUNlJaXppx2LGjsLIkYk6IQDobAMLL+iOhvrcbquo7PP4EWmSYcDhBc
tYrS0tKCxmZK6sDAAKqicGHgU852n2dwcKigsZkiEonQ29tHfV0dq1evZujyZYIplGYKGnuzGTSb
qaioxLWojnvuvRdHpYNAMFjQWDJ7RROqqlJWVsbgpUuUlZYyOTGJ05X6exq+IkGFkgqxnwI9MiIL
8UUndNKEBAJTS7rOdNV1dp7WGpYsVpatWNYHjKfoWdiI9epOz1FSSwB3KmFqcYKGB0mxLf3pp59G
VYu2OirtP3M5XbZLFy91ea56Wvfu3etOVfnJ0euYsmlSzCksrXAmV3rmmWdYuLDyjKZpD5XZytTp
SKihOBQKprG0dWItlwWvIA6Px3MVeDP+woinXnxx3ma6TYV/4jMPQtoCsQUUiC0QWyC2gAKxBWIL
xBaQJfz/AJiiFen2ESExAAAAAElFTkSuQmCC
`.replaceAll("\n", "");
    const icon_rules = `data:image/png;base64,
iVBORw0KGgoAAAANSUhEUgAAAFYAAABWCAQAAAD/X6l8AAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAF5UlEQVR42uybf1BUVRTHP/sT
hRWMNAdLFMNMMLUZSGoYbdAYRtS0nEJLbcgfjCZaaiOjKWE6jpaDmWZZmjL5C8tfhIwa5TSIP1ML
UksTyPInprLgCuze/uCx7rLsG3bp0WPac/95c8+5937ffeee83333acRtB7RyykvcJaL7GNPo9pQ
MvGjhDX8LNXEEjU4M5l7dhNNkC1u0fELf9j1aYRyg6FUNtKflgn4E0l34rwBKy8adOgxIkLwRwAU
mo+kMszR5ja7zogNmOoaiCr9ZX0zhmwG2LvcIJC89OI0tNgArFhd+rMt5r36uysUG5ZOf+dqnbEy
YDVu6q+RQdv2JVOEsakj2MieuH+Z5c5dN6ba5oHVY9RYQ2hHo+uwtJaHaOvJ3NQYrz/GTXejWssN
5Tq55kKmlLE1tM9XbSqxUuu22GS7aFhsMj1ZTTfDt6/s9oPbxrI9FwR1LfYIyr9QHi5a9bg7pawb
rH29NAKC6epmSWio5qxHy0VHL/SN+xSC81TxZ+SW8VPSvHAD09cIxG7hXiyip0fzFi4sMr3NFAiE
Zr1XM2s2AnSQsfAjiyyZiOE8LTAGPxmLdnY7b6JBE3JxNNEtlm61tCLxgVUN2OOMZBg71UcRXeUE
g3mbUMYyn9lOmnP8jkDwAL0JbNDqEhX0anmwRbRjDlqqaUhGFrKPHlixYSabSCfdNo6ypeXd4EX8
mA4kM7VhTCaDAg5zlAksAO5QIzHa+1H4PLnckq5PcQCzsmC/5UkKGEShjE1bLMBIyWYIpfihAVYy
jsW8wq/AJlJYQAKXlXODMsZymAg+ZADD2erU2MR8NlKNAS1ZQAW1ANyhFmhDMbkcAg4yi918ypu8
TCFCuZkNJpAcIJVT5LHeSWdhFMvpjyCf7i4tjRRziFj6M4MiBHNIpS+/0Fm5mTWxiWGcZh2RLkys
lj7EEMOrLCLD8bXGnrej+IBb6LBRSwKn2MUSrpGmnM8O4AxanuYFXiMZwV8uBDGTPeQD3cihnM1c
wgBYiKeCK0RzhDwMjOIEExlMubJJoTNZzCeXcAxcY7w9hAUTQB1He5+VwFJOEkMZ0UAAAbRnBUvo
QwFTgWmk0wvh9AyaRNzcF/YgEIccGOcckS0xz4FCCJuoEDY7s62RruprraJSCHFX2ESNxGId7atF
pQufTa8b1js+6yo3SSUME/uIBTTShkAds73//mCSHpo/0Aao3ytwtDdgUDqDLSeECUACc9XPDQJI
Z17z9kZaDiz/GVAf+faB9YFVO9hSUrneOsDm0o8AOqo3zt6X1bzBFl5Sc1Kol8+YRz7POpDDUo/z
fQ1dmaE82B1MZq8DVCsfccGLfiI8AOuxz64jGStljCOJeLVzg0rW05vD6Hhf/URmGueYCWwixKle
xxRKvPJZRRdYIquIIsml/i01xtmnSCGrSXvdKghdD/Kxjxv4wPrA+sACVoejGqoH+439tEM2n6g9
zt4mk0l04V0WssyJ3f7mRboNI7Xp5p5tzAkhRIXoIUaIL4RBHHSorRWPevXJPkK5jTkAEzuIYyer
GdAaokEYHQFja+AGZ4kjgTUM4Uem0UH6xK+jG2bZD/SNyT0eURLsSYYSx1p05JHA5xwgVtLs9eoI
lFZJsP04Rid0wDOUcJswu8agPjfQOHwOCibYl259YH1g/8dgzVS1HrAr2A5AFTPYrPZ0ayGD0ViI
x8wYh/qL/O3xvdsIJFxJsJNYwSyuc5XT0oG8OqqZyBkvZusJflISbBd2MoggjjlABRvVXj1aq9LR
wEoAVs6pnyJW8SWTyEHDcFJ5nr60l+46CL3HFNEinVJQCOwO5rKNRCCXUXxPvp3g7Mfi8Xad8Oj2
PAY7mhHSbMRzBY3D+fRg9bmB1uHB+fvSrQ+sD2wzwGrqwotaRDYaRF86BiwmystU6pkY2QVAJ5tM
WHZfZie29M8qCERSilf/1mwkabKxsiWB6iuHp+Rq3ak1ch5ZShE53bOfKze0iONqe5pjvhtcMpAu
7pZQa/rh8p8BAGnHC5gYPqZsAAAAAElFTkSuQmCC`.replaceAll("\n", "");
    const icon_restrictions = `data:image/png;base64,
iVBORw0KGgoAAAANSUhEUgAAAFYAAABWCAYAAABVVmH3AAAABGdBTUEAALGOfPtRkwAAACBjSFJN
AAB6JQAAgIMAAPn/AACA6QAAdTAAAOpgAAA6mAAAF2+SX8VGAAAHsklEQVR42uyda2wVRRSAv0KB
tkipKLYCMVJBIOVRRREQH1GUkKCoxMifQnwGVBRQEAwSKMFAIBgNCmgkGkSDIgooGNEIAkZ8BAVB
5P0URKW8KWB7/XFPk5vNzt2d2dl797Y9yYSw3Tv3zLc7Z2bOOTM3KxaLUS/2pUE9gnAk2+uGrKys
dOtYANwO3Cz//wFYAxxNp1KePT0WiyUtaZRi4GVgPxBzlKPAbKBTOsEm5RZBsB2A14EzLkCd5Rww
H+hWD1YtVwPvAP/5AOpWPkkl4EwAmw9MBU4ZAk0sF4G5QFFdBpsNDAcOWADqLMflYTWra2C7A2tD
AOosvwP96wLYlsA8oDIFUBPLYqBtbQU7WDF1SlWpAEYBjWoL2FJgaRqBOss64I5MBttCJvHnIwQ1
sSwAWmcS2GbACOBgRIEmlmPABODyKINtCgwD9mQAUGc5ArwANI8S2NbAs8DuDATqLAeAiUB7ICsI
2CwveAnerSzgCuBacZB0Bm6Vf/NqmdfvArAVWA38Ir1wO/CXPABr3q2WwBLgdC14K03LKeAreZGs
mII84Os6DNRZdgNXe3HzE0EYamPeV4ukLTAkcARBDHm67V2N56uBrJxyfeoelrSxAfZgipWuBn4W
e7ZWBo3jcj0baCLmqQjoA/QFesv1VMnx4PMxeDhFtusw8CrQFf0gZ3ugHNiVIl0n2Bi8HghZyQvA
dFkCB5VcYGwKZi8jbIDtG7K/9JYQumon4pHcsPQeYgNsjwBxKK8YVdMQ7WCWmJYwwA704uZn8KqQ
rtXcYqM/BMrEDCSTPLG5JUDDBNOxG9jsMYjEZKl9Fhhn+aGdtDF4FQA7LT7t9wVSMukDfCQzkipF
PUeBZUA/H/XNsKh/JVBqywmz3pJSWyQqq5IOwGcytdKpdwPQK0m9jS2uHv8EimyB/dSCQuc9BqrH
xeyY1l/m8dZeI2950HZ8DzSwBXauBYVmJGn0iwHrftKnbRxmoR3LbPpjn7Yw+b9S0diyAPVWA09p
DDqNxQ0YpC1v2QTbL6AysxUNLQFOBKh3tKLeYqCn4m/PBGzLSJtguxgMKInlJkUjlweoc3wSqDuB
bUCOwoESxJb3twm2uYyGJor8qAhz3B2gcc8roHZ0hIgGK+5bFMD0dLEd8/rWUJnXFI2bY1jfZEV9
nYF9jnuXWx7EDtVMF22CnW+ozCCXhuUbhsdHKUB1U9R3TmJ0bg+hyuD7v/G7sNJxz20wyWsAdii6
rG6yxGTgFQXUFYr6csRX65QjYmd1ZYffG3XAbjZQ5IwkRbh5n3RkHDDJ5XoPYBXQKslnWyn8H4cN
2rM+DLB7JUSiI5VS3JwrfmWi+GudUiorwpYen3dzHlXJNE9XfgsD7BEZHHRNQUxx3S/UKS7XewIr
kyw6EqVhEt105B+d9uuArZaZgY7kKGJRp318dowC6vXyphZp9Bo3X61utvcWgWsdLMB3mvfnidvR
Kbs8PlcOzFTY1M+BQg0dDivMQ6FmW1br9VW93K2r0N+E0V8x3TqkuH+sQtUbZCDU+e4qscVus5KL
mnXdpcXNIClug6ZCUxSg3nO5t1xxbxfMNoFsVNjYQehnIxbogDXZS/uF5v29FdcXu3T/iS73dZeB
qo2BrgvkrXVbTuvIGvzkEgQwBYinXjeU4ZZNky1+hGQOlc6Yb1c6rJjD5svUUaeux7S5GYDNNYiB
TVCAGwBMU/ytlGCbQVTO74c06zkpY0voYAHe1VRuqzwQv1Iids0U6vwkdX+pWddSo55uCHaAQWP9
evqLiedrmUJdpfDDIiO7bn3DUgk216Dx/+KduVgcsPsvRJ0Eki9LUp36ziq8Y6HuQTCJ1a/0ANvL
0ARUEN+pk0xM/L9LjQf9AGC7Es9K0VV2mgeAS2SAWedjEr9JBikvR8xowx4w0BSszuYON1mB2Sbg
8T4A1ywMbpSH2CKhe24lnkP7E95pSmXEz0HQnbNvA65T+BpCP7rk3gD2cDrhy0jME/pGB+IWEGxT
8aoHyTgsDAFoHvBGAL1c566pBBvEftWU/dJdG1uCOsBg9HeWeYFXrBbA5mNnV+KvAtgkZ7YRcA/m
keTEcoZ4cl7awQI8h700yf3Am/LmdSS+gThHvFQNxXF+KdBOnCmzgD8sfv9sGz6WoLOCxCnSJiyf
YiEDzwnxLJ2Ta03EUV1g0XzUyDGJUOzzAzbMWYFzBM70XYfl1ryCFsE2ktBNpkLdC1wWRbAQP4Ow
OkPBPmLVjx3CCRuzMhDqx7qNTAfYQtJ7WpHJ9KokE8AC3JdBYEeZNDCdpxhNzQCoi0wbl06wuQah
8lSW7QQ4XDLdB5q1I5rHRFUSP8+GTAVbE2eK2qFmw4M2KipnGw6NENTJNhoUpUMjJ0UA6gJbjYna
MafpnCl8gKWTOKMIFuK7aFINdQmWD+eJ6onH01MIdTEhHDgR5TO6x6QA6hxC+nWSqJ8q/4SEs20D
rRZ7HtrPjmTCcf29UWd3m5QTuG/aq3NgkZCOjVPmd6DeEF0nwSLd9qUAjvK3JfZGPVh3uRO9E98q
gEdTrWQmgoV4rsJMvJPiFpJ8u2c9WIX0JJ745gS6B7g/nYqlKq8gTMkDHgRuk9XTRuJbmf5ON9ik
3Op/MzEcqf/NxJDk/wEAzLV3Lfb0+2sAAAAASUVORK5CYII=`.replaceAll("\n", "");

    let BCXLoadedBeforeLogin = false;
    let BCXLoginTimedata = {};
    function SetLoadedBeforeLogin(loginData) {
        BCXLoadedBeforeLogin = true;
        BCXLoginTimedata = JSON.parse(JSON.stringify(loginData));
    }
    function BCX_setInterval(handler, timeout) {
        return setInterval(() => {
            const ctx = debugContextStart("BCX internal interval", { root: true, modArea: "BCX" });
            handler();
            ctx.end();
        }, timeout);
    }
    function BCX_setTimeout(handler, timeout) {
        return setTimeout(() => {
            const ctx = debugContextStart("BCX internal timeout", { root: true, modArea: "BCX" });
            handler();
            ctx.end();
        }, timeout);
    }
    let contextStack = [];
    function contextCurrentModArea() {
        if (contextStack.length === 0)
            return null;
        return contextStack[contextStack.length - 1].modArea;
    }
    function debugContextStart(name, { root = false, modArea, extraInfo } = {}) {
        var _a;
        const context = {
            name,
            modArea: modArea !== undefined ? modArea : ((_a = contextCurrentModArea()) !== null && _a !== void 0 ? _a : ""),
            root,
            extraInfo,
        };
        const handle = {
            end: () => {
                if (contextStack[contextStack.length - 1] === context) {
                    contextStack.pop();
                    return;
                }
                const index = contextStack.indexOf(context);
                if (index < 0) {
                    console.warn(`BCX: Debug context end while it is not on stack`, context, new Error());
                }
                else {
                    const toRemove = contextStack.length - index;
                    const removed = contextStack.splice(index, toRemove);
                    console.warn(`BCX: Debug context end while not on top of the stack (depth ${toRemove})`, removed, new Error());
                }
            },
        };
        if (root && contextStack.length > 0) {
            console.warn(`BCX: Root context when we already have context`, contextStack, new Error());
            contextStack = [];
        }
        contextStack.push(context);
        return handle;
    }
    function debugMakeContextReport() {
        var _a;
        let res = `----- Current context (most recent first) -----\n`;
        if (contextStack.length === 0) {
            res += `[None]\n`;
        }
        else {
            for (let i = contextStack.length - 1; i >= 0; i--) {
                const ctx = contextStack[i];
                res += `> ${ctx.name}\n`;
                if (ctx.extraInfo) {
                    let extra = "";
                    try {
                        extra = ctx.extraInfo();
                    }
                    catch (error) {
                        extra = "Error processing extra info:\n" + (error instanceof Error ? ((_a = error.stack) !== null && _a !== void 0 ? _a : "[stack missing]") : `${error}`);
                    }
                    if (extra) {
                        res += extra.trim().replace(/\n|^/g, m => `${m}| `) + "\n";
                    }
                }
            }
            if (!contextStack[0].root) {
                res += `[unknown origin]\n`;
            }
        }
        return res;
    }

    const VERSION$1 = BCX_VERSION;
    const VERSION_CHECK_BOT = 37685;
    const SUPPORTED_BC_VERSIONS = [
        "R91",
    ];
    const FUNCTION_HASHES = {
        "Player.CanChangeClothesOn": ["40EF5292"],
        "Player.GetBlindLevel": ["FDE144D9"],
        "Player.GetBlurLevel": ["F6930456", "BFF08A45"],
        "Player.GetDeafLevel": ["42CB6D63"],
        "Player.HasTints": ["E09CA942", "F1F63BF9"],
        "Player.IsSlow": ["6E60F118"],
        ActivityCheckPrerequisite: ["168A7F07"],
        ActivityOrgasmPrepare: ["D49DAC9B"],
        ActivityOrgasmStart: ["0BD14BED"],
        AppearanceClick: ["64C82387"],
        AppearanceExit: ["AA300341"],
        AppearanceGetPreviewImageColor: ["06F02ADE"],
        AppearanceMenuBuild: ["A9809413"],
        AppearanceMenuClick: ["45018222"],
        AppearanceMenuDraw: ["28FDF65B"],
        AppearanceRun: ["8C0005E2"],
        AsylumEntranceCanWander: ["A85C35F3"],
        AsylumGGTSClick: ["E5660C8C"],
        AsylumGGTSLoad: ["DAB62F12"],
        BackgroundSelectionRun: ["F7AF6FF2"],
        CharacterAppearanceGenderAllowed: ["8A2D647F"],
        CharacterAppearanceLoadCharacter: ["387F9BEF"],
        CharacterCanChangeToPose: ["F55FE4B0"],
        CharacterCanKneel: ["A5A325E3"],
        CharacterLoadCanvas: ["BA6AD4FF"],
        CharacterLoadEffect: ["BD6B6B4D"],
        CharacterNickname: ["EB452E5E"],
        ChatAdminClick: ["D4354B95", "A15E13F5"],
        ChatAdminExit: ["EC263A9C"],
        ChatAdminLoad: ["BC01235B"],
        ChatAdminRun: ["1E16EBC7"],
        ChatCreateClick: ["8794FE74"],
        ChatCreateExit: ["6FF19445"],
        ChatCreateLoad: ["DC3CF453"],
        ChatCreateRun: ["007553E0"],
        ChatRoomAddCharacterToChatRoom: ["FD2725F4"],
        ChatRoomAdminAction: ["86DE8F3C"],
        ChatRoomCanAttemptKneel: ["0AA710FA"],
        ChatRoomCanAttemptStand: ["026065D0"],
        ChatRoomCanBeLeashedBy: ["749EBE4E"],
        ChatRoomCanLeave: ["7065F82F"],
        ChatRoomClearAllElements: ["C49AA2C1"],
        ChatRoomClickCharacter: ["715D92A0"],
        ChatRoomCreateElement: ["AD7CBE68"],
        ChatRoomDrawBackground: ["597B062C"],
        ChatRoomDrawCharacter: ["8ED3DF88"],
        ChatRoomDrawCharacterOverlay: ["06FB4CC3"],
        ChatRoomFirstTimeHelp: ["078BEEA9"],
        ChatRoomGetFocusGroupSubstitutions: ["04FB0708"],
        ChatRoomIsOwnedByPlayer: ["82640FF9"],
        ChatRoomKeyDown: ["B4BFDB0C"],
        ChatRoomListUpdate: ["D7FA0EC7"],
        ChatRoomLovershipOptionIs: ["6F5CE6A0"],
        ChatRoomMenuClick: ["95171B81"],
        ChatRoomMenuDraw: ["0B8B0944"],
        ChatRoomMessage: ["BBD61334"],
        ChatRoomMessageDefaultMetadataExtractor: ["E8718964"],
        ChatRoomOwnershipOptionIs: ["FE060F0B"],
        ChatRoomRun: ["7D2E2D71"],
        ChatRoomSendChat: ["7F540ED0"],
        ChatRoomSendEmote: ["6EF53CBA"],
        ChatRoomShouldBlockGaggedOOCMessage: ["16D6AED5"],
        ChatRoomStatusUpdate: ["35DA12E0"],
        ChatRoomSync: ["BC146A3E"],
        ChatRoomSyncMemberLeave: ["A95EADE6"],
        ChatRoomTarget: ["C76C5E33"],
        ChatRoomUpdateDisplay: ["8DFC494A"],
        ChatSearchJoin: ["22514B80"],
        ChatSearchLoad: ["05A059CF"],
        ChatSearchNormalDraw: ["66BF1158"],
        ChatSearchRun: ["64BCF8FB"],
        CheatFactor: ["594CFC45"],
        CheatImport: ["26C67608"],
        ColorPickerDraw: ["D1E82FB3"],
        CommandParse: ["6E46F29E"],
        CommonKeyDown: ["0F27218B"],
        CommonSetScreen: ["E2AC00F4"],
        DialogCanUnlock: ["0881FEFF"],
        DialogClickExpressionMenu: ["BD1C7523"],
        DialogDrawExpressionMenu: ["A350DE2C"],
        DialogDrawItemMenu: ["689891E5"],
        DialogDrawPoseMenu: ["30C7A7C3"],
        DialogFindPlayer: ["32851FF2"],
        DialogInventoryAdd: ["77BEFF8F"],
        DialogInventoryBuild: ["75F93206"],
        DialogItemClick: ["639713E6"],
        DialogLeaveItemMenu: ["2348FCE9"],
        DialogMenuButtonBuild: ["8F72FA67"],
        DialogMenuButtonClick: ["D6970391"],
        DrawArousalMeter: ["DC0BB5B4"],
        DrawCharacter: ["CA0D50AF"],
        DrawGetImage: ["BEC7B0DA"],
        DrawImageEx: ["3D3D74F5"],
        DrawProcess: ["4B2BE17E"],
        DrawStatus: ["FD747092"],
        ExtendedItemDrawButton: ["E1453F3F"],
        FriendListBeepMenuSend: ["B81A695E"],
        FriendListClick: ["6B039C7C"],
        FriendListLoadFriendList: ["1F8A29E2"],
        FriendListRun: ["051E747B"],
        InfiltrationStealItems: ["1F601756"],
        InformationSheetClick: ["E535609B"],
        InformationSheetExit: ["29FF58C9"],
        InformationSheetRun: ["E248ADC7"],
        InventoryItemNeckAccessoriesCollarAutoShockUnitDetectSpeech: ["441EAEBF"],
        ItemColorReset: ["8FD17CAC"],
        ItemColorStateBuild: ["0CD125D8"],
        LoginMistressItems: ["B58EF410"],
        LoginResponse: ["DB977132"],
        LoginStableItems: ["EA93FBF7"],
        LogValue: ["6ED63114"],
        MainHallMaidsDisabledBegForMore: ["EA29F2B3"],
        MainHallWalk: ["E52553C4"],
        ManagementCanBeClubSlave: ["2A5CC4E5"],
        ManagementCanBeReleased: ["A2E2CA35"],
        ManagementCanBeReleasedOnline: ["3374263B"],
        ManagementCanBreakDatingLoverOnline: ["366AECAE"],
        ManagementCanBreakTrialOnline: ["51E9B7F4", "2CBA193D"],
        ManagementCanBreakUpLoverOnline: ["92E30200"],
        ManagementCannotBeReleased: ["755DB909"],
        ManagementCannotBeReleasedExtreme: ["2DA1650E"],
        ManagementCannotBeReleasedOnline: ["D1ACE212"],
        PreferenceIsPlayerInSensDep: ["1DB1238E"],
        PreferenceSubscreenDifficultyClick: ["3882E581"],
        PreferenceSubscreenDifficultyRun: ["65BF560F"],
        PrivateRansomStart: ["511E91C6"],
        PropertyAutoPunishParseMessage: ["B0B55044"],
        ServerAccountBeep: ["F16771D4"],
        ServerPlayerIsInChatRoom: ["E3771112"],
        ServerSend: ["90A61F57"],
        SpeechGarble: ["9D669F73"],
        SpeechGetTotalGagLevel: ["C55B705A"],
        StruggleDrawStrengthProgress: ["4755C02D"],
        StruggleStrengthDraw: ["4406AD10"],
        TextGet: ["4DDE5794"],
        ValidationCanAddOrRemoveItem: ["80E3D94D"],
        ValidationResolveModifyDiff: ["5D9FA740"],
        WardrobeClick: ["E96F7F63"],
        WardrobeGroupAccessible: ["2D406A64"],
        WardrobeRun: ["9616EB3A"],
    };
    const FUNCTION_HASHES_NMOD = {
        ActivityOrgasmPrepare: ["AA5FC17F"],
        AppearanceClick: ["C18D893E"],
        AppearanceMenuClick: ["C01EFEE3"],
        AppearanceRun: ["9A24F9FE"],
        BackgroundSelectionRun: ["F605602A"],
        CharacterLoadEffect: ["74D62AA1"],
        ChatAdminClick: ["4BA1B803"],
        ChatAdminLoad: ["62FB992F"],
        ChatAdminRun: ["F92A0B2E"],
        ChatRoomAddCharacterToChatRoom: ["1C43D1C1"],
        ChatRoomCanChangeClothes: ["DF8A6550"],
        ChatRoomCanLeave: ["B406F3E5"],
        ChatRoomClearAllElements: ["52F91E02"],
        ChatRoomCreateElement: ["76299AEC"],
        ChatRoomDrawCharacter: ["FB2F0B97"],
        ChatRoomDrawCharacterOverlay: ["D9A831CC"],
        ChatRoomDrawFriendList: ["327DA1B8"],
        ChatRoomKeyDown: ["FCA8DF29"],
        ChatRoomMenuClick: ["8304B61F"],
        ChatRoomMessage: ["7C097519"],
        ChatRoomRun: ["9A1E764B"],
        ChatRoomStatusUpdate: ["6DBFC554"],
        ChatRoomSync: ["32E1C9AF"],
        ChatRoomUpdateDisplay: ["8B37556F"],
        ChatSearchLoad: ["4659E8F5"],
        CheatImport: ["1ECB0CC4"],
        ColorPickerDraw: ["FF93AF2E"],
        CommandParse: ["2F4176CA"],
        DialogClickExpressionMenu: ["AFBB0323"],
        DialogDrawItemMenu: ["05301080"],
        DialogFindPlayer: ["44A7263C"],
        DialogInventoryAdd: ["A6DED236"],
        DialogItemClick: ["1A6D14C0"],
        DialogMenuButtonBuild: ["AC45F4CF"],
        DialogMenuButtonClick: ["A4CE0C1C"],
        DrawCharacter: ["CFEDEF08"],
        DrawGetImage: ["8BFFECA9"],
        DrawStatus: ["E9DC1722"],
        FriendListBeepMenuSend: ["C5C27229"],
        FriendListClick: ["E08BFE66"],
        FriendListLoadFriendList: ["428B288B"],
        FriendListRun: ["96BCBB6E"],
        InformationSheetRun: ["08EF8A57"],
        LoginMistressItems: ["984A6AD9"],
        LoginResponse: ["9F59AEF1"],
        LoginStableItems: ["C3F50DD1"],
        ServerAccountBeep: ["0A2C7C78"],
        ServerSend: ["F8627678"],
        WardrobeClick: ["842709D9"],
        WardrobeRun: ["02775589"],
    };

    var Preset;
    (function (Preset) {
        Preset[Preset["dominant"] = 0] = "dominant";
        Preset[Preset["switch"] = 1] = "switch";
        Preset[Preset["submissive"] = 2] = "submissive";
        Preset[Preset["slave"] = 3] = "slave";
    })(Preset || (Preset = {}));
    var ModuleCategory;
    (function (ModuleCategory) {
        ModuleCategory[ModuleCategory["Global"] = 0] = "Global";
        ModuleCategory[ModuleCategory["Authority"] = 1] = "Authority";
        ModuleCategory[ModuleCategory["Log"] = 2] = "Log";
        ModuleCategory[ModuleCategory["Curses"] = 3] = "Curses";
        ModuleCategory[ModuleCategory["Rules"] = 4] = "Rules";
        ModuleCategory[ModuleCategory["Commands"] = 5] = "Commands";
        ModuleCategory[ModuleCategory["Relationships"] = 6] = "Relationships";
        ModuleCategory[ModuleCategory["ExportImport"] = 88] = "ExportImport";
        ModuleCategory[ModuleCategory["Misc"] = 99] = "Misc";
    })(ModuleCategory || (ModuleCategory = {}));
    const MODULE_NAMES = {
        [ModuleCategory.Global]: "Global",
        [ModuleCategory.Authority]: "Authority",
        [ModuleCategory.Log]: "Behaviour Log",
        [ModuleCategory.Curses]: "Curses",
        [ModuleCategory.Rules]: "Rules",
        [ModuleCategory.Commands]: "Commands",
        [ModuleCategory.Relationships]: "Relationships",
        [ModuleCategory.ExportImport]: "Export-Import",
        [ModuleCategory.Misc]: "Miscellaneous",
    };
    const MODULE_ICONS = {
        [ModuleCategory.Global]: "Icons/General.png",
        [ModuleCategory.Authority]: "Icons/Security.png",
        [ModuleCategory.Log]: "Icons/Title.png",
        [ModuleCategory.Curses]: "Icons/Struggle.png",
        [ModuleCategory.Rules]: icon_rules,
        [ModuleCategory.Commands]: "Icons/Use.png",
        [ModuleCategory.Relationships]: "Icons/FriendList.png",
        [ModuleCategory.ExportImport]: "Icons/Save.png",
        [ModuleCategory.Misc]: "Icons/Random.png",
    };
    const TOGGLEABLE_MODULES = [
        ModuleCategory.Log,
        ModuleCategory.Curses,
        ModuleCategory.Rules,
        ModuleCategory.Commands,
        ModuleCategory.Relationships,
    ];
    var ModuleInitPhase;
    (function (ModuleInitPhase) {
        ModuleInitPhase[ModuleInitPhase["construct"] = 0] = "construct";
        ModuleInitPhase[ModuleInitPhase["init"] = 1] = "init";
        ModuleInitPhase[ModuleInitPhase["load"] = 2] = "load";
        ModuleInitPhase[ModuleInitPhase["ready"] = 3] = "ready";
        ModuleInitPhase[ModuleInitPhase["destroy"] = 4] = "destroy";
    })(ModuleInitPhase || (ModuleInitPhase = {}));
    var MiscCheat;
    (function (MiscCheat) {
        MiscCheat[MiscCheat["BlockRandomEvents"] = 0] = "BlockRandomEvents";
        MiscCheat[MiscCheat["CantLoseMistress"] = 1] = "CantLoseMistress";
        MiscCheat[MiscCheat["GiveMistressKey"] = 2] = "GiveMistressKey";
        MiscCheat[MiscCheat["GivePandoraKey"] = 3] = "GivePandoraKey";
    })(MiscCheat || (MiscCheat = {}));
    var ConditionsLimit;
    (function (ConditionsLimit) {
        ConditionsLimit[ConditionsLimit["normal"] = 0] = "normal";
        ConditionsLimit[ConditionsLimit["limited"] = 1] = "limited";
        ConditionsLimit[ConditionsLimit["blocked"] = 2] = "blocked";
    })(ConditionsLimit || (ConditionsLimit = {}));
    const defaultBCXEffects = {
        Effect: [],
    };

    class BaseModule {
        init() {
        }
        load(preset) {
        }
        run() {
        }
        unload() {
        }
        reload(preset) {
        }
        applyPreset(preset) {
        }
    }

    const encoder = new TextEncoder();
    function crc32(str) {
        let crc = 0 ^ -1;
        for (const b of encoder.encode(str)) {
            let c = (crc ^ b) & 0xff;
            for (let j = 0; j < 8; j++) {
                c = (c & 1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1);
            }
            crc = (crc >>> 8) ^ c;
        }
        return ((crc ^ -1) >>> 0).toString(16).padStart(8, "0").toUpperCase();
    }
    function addStyle(styleString) {
        const style = document.createElement("style");
        style.textContent = styleString;
        document.head.append(style);
    }
    function isObject$1(obj) {
        return !!obj && typeof obj === "object" && !Array.isArray(obj);
    }
    function longestCommonPrefix(strings) {
        if (strings.length === 0)
            return "";
        strings = strings.slice().sort();
        let i = 0;
        while (i < strings[0].length && strings[0][i] === strings[strings.length - 1][i]) {
            i++;
        }
        return strings[0].substring(0, i);
    }
    function arrayUnique(arr) {
        const seen = new Set();
        return arr.filter(i => !seen.has(i) && seen.add(i));
    }
    function capitalizeFirstLetter(str) {
        return str.charAt(0).toLocaleUpperCase() + str.slice(1);
    }
    function uuidv4() {
        return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16));
    }
    const clipboardAvailable = Boolean(navigator.clipboard);
    function clamp$1(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }
    function clampWrap(value, min, max) {
        return value < min ? max : value > max ? min : value;
    }
    function formatTimeInterval(time, mode = "full") {
        let res = "";
        if (time < 0) {
            res = "-";
            time *= -1;
        }
        const seconds = Math.floor(time / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        if (mode === "full" || mode === undefined) {
            if (days > 0) {
                res += `${days} days, `;
            }
            if (hours > 0) {
                res += `${hours % 24} hours, `;
            }
            if (minutes > 0) {
                res += `${minutes % 60} minutes, `;
            }
            if (seconds > 0) {
                res += `${seconds % 60} seconds`;
            }
        }
        else if (mode === "short") {
            if (days > 1) {
                res += `${days}d`;
            }
            else if (hours > 1) {
                res += `${hours}h`;
            }
            else if (minutes > 1) {
                res += `${minutes}m`;
            }
            else if (seconds > 0) {
                res += `${seconds}s`;
            }
        }
        return res;
    }
    function dictionaryProcess(text, dictionary) {
        for (const [k, v] of Object.entries({
            PLAYER_NAME: Player.Name,
            ...dictionary,
        })) {
            text = text.replaceAll(k, v);
        }
        return text;
    }
    function createInputElement(type, maxLength) {
        const input = document.createElement("input");
        input.type = type;
        if (maxLength) {
            input.maxLength = maxLength;
        }
        input.addEventListener("keydown", GameKeyDown);
        input.className = "HideOnPopup";
        return input;
    }
    function positionElement(element, X, Y, W, H) {
        const HRatio = MainCanvas.canvas.clientHeight / 1000;
        const WRatio = MainCanvas.canvas.clientWidth / 2000;
        const Font = MainCanvas.canvas.clientWidth <= MainCanvas.canvas.clientHeight * 2 ? MainCanvas.canvas.clientWidth / 50 : MainCanvas.canvas.clientHeight / 25;
        const Height = H ? H * HRatio : Font * 1.15;
        const Width = W * WRatio - 18;
        const Top = MainCanvas.canvas.offsetTop + Y * HRatio - Height / 2;
        const Left = MainCanvas.canvas.offsetLeft + (X - W / 2) * WRatio;
        Object.assign(element.style, {
            fontSize: `${Font}px`,
            fontFamily: CommonGetFontName(),
            position: "fixed",
            left: `${Left}px`,
            top: `${Top}px`,
            width: `${Width}px`,
            height: `${Height}px`,
            display: "inline",
        });
    }
    function escapeRegExp$1(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    function parseBCXVersion(version) {
        const devMatch = /^(\d+).(\d+).(\d+)-(DEV-\d+)$/.exec(version);
        if (devMatch) {
            return {
                major: Number.parseInt(devMatch[1], 10),
                minor: Number.parseInt(devMatch[2], 10),
                patch: Number.parseInt(devMatch[3], 10),
                extra: devMatch[4],
                dev: true,
            };
        }
        const match = /^(\d+).(\d+).(\d+)-([0-f]+)$/.exec(version);
        if (match) {
            return {
                major: Number.parseInt(match[1], 10),
                minor: Number.parseInt(match[2], 10),
                patch: Number.parseInt(match[3], 10),
                extra: match[4],
                dev: false,
            };
        }
        return null;
    }
    function BCXVersionCompare(a, b) {
        var _a, _b;
        if (a.major !== b.major) {
            return a.major - b.major;
        }
        if (a.minor !== b.minor) {
            return a.minor - b.minor;
        }
        if (a.patch !== b.patch) {
            return a.patch - b.patch;
        }
        if (((_a = a.dev) !== null && _a !== void 0 ? _a : false) !== ((_b = b.dev) !== null && _b !== void 0 ? _b : false)) {
            return a.dev ? 1 : -1;
        }
        return 0;
    }
    function BCXVersionToString(ver) {
        let res = `${ver.major}.${ver.minor}.${ver.patch}`;
        if (ver.extra) {
            res += `-${ver.extra}`;
        }
        return res;
    }
    const BCX_VERSION_PARSED = (() => {
        const res = parseBCXVersion(BCX_VERSION);
        if (!res) {
            throw Error("Failed to parse own version");
        }
        return res;
    })();
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getDefaultExportFromNamespaceIfPresent (n) {
    	return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
    }

    function getDefaultExportFromNamespaceIfNotNamed (n) {
    	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
    }

    function getAugmentedNamespace(n) {
      if (n.__esModule) return n;
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function a () {
    			if (this instanceof a) {
    				var args = [null];
    				args.push.apply(args, arguments);
    				var Ctor = Function.bind.apply(f, args);
    				return new Ctor();
    			}
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var bcmodsdk = {};

    (function (exports) {
    	// Bondage Club Mod Development Kit (1.1.0)
    	// For more info see: https://github.com/Jomshir98/bondage-club-mod-sdk
    	/** @type {ModSDKGlobalAPI} */
    	var bcModSdk=function(){"use strict";const e="1.1.0";function o(e){alert("Mod ERROR:\n"+e);const o=new Error(e);throw console.error(o),o}const t=new TextEncoder;function n(e){return !!e&&"object"==typeof e&&!Array.isArray(e)}function r(e){const o=new Set;return e.filter((e=>!o.has(e)&&o.add(e)))}const i=new Map,a=new Set;function d(e){a.has(e)||(a.add(e),console.warn(e));}function s(e){const o=[],t=new Map,n=new Set;for(const r of p.values()){const i=r.patching.get(e.name);if(i){o.push(...i.hooks);for(const[o,a]of i.patches.entries())t.has(o)&&t.get(o)!==a&&d(`ModSDK: Mod '${r.name}' is patching function ${e.name} with same pattern that is already applied by different mod, but with different pattern:\nPattern:\n${o}\nPatch1:\n${t.get(o)||""}\nPatch2:\n${a}`),t.set(o,a),n.add(r.name);}}o.sort(((e,o)=>o.priority-e.priority));const r=function(e,o){if(0===o.size)return e;let t=e.toString().replaceAll("\r\n","\n");for(const[n,r]of o.entries())t.includes(n)||d(`ModSDK: Patching ${e.name}: Patch ${n} not applied`),t=t.replaceAll(n,r);return (0,eval)(`(${t})`)}(e.original,t);let i=function(o){var t,i;const a=null===(i=(t=m.errorReporterHooks).hookChainExit)||void 0===i?void 0:i.call(t,e.name,n),d=r.apply(this,o);return null==a||a(),d};for(let t=o.length-1;t>=0;t--){const n=o[t],r=i;i=function(o){var t,i;const a=null===(i=(t=m.errorReporterHooks).hookEnter)||void 0===i?void 0:i.call(t,e.name,n.mod),d=n.hook.apply(this,[o,e=>{if(1!==arguments.length||!Array.isArray(o))throw new Error(`Mod ${n.mod} failed to call next hook: Expected args to be array, got ${typeof e}`);return r.call(this,e)}]);return null==a||a(),d};}return {hooks:o,patches:t,patchesSources:n,enter:i,final:r}}function c(e,o=!1){let r=i.get(e);if(r)o&&(r.precomputed=s(r));else {let o=window;const a=e.split(".");for(let t=0;t<a.length-1;t++)if(o=o[a[t]],!n(o))throw new Error(`ModSDK: Function ${e} to be patched not found; ${a.slice(0,t+1).join(".")} is not object`);const d=o[a[a.length-1]];if("function"!=typeof d)throw new Error(`ModSDK: Function ${e} to be patched not found`);const c=function(e){let o=-1;for(const n of t.encode(e)){let e=255&(o^n);for(let o=0;o<8;o++)e=1&e?-306674912^e>>>1:e>>>1;o=o>>>8^e;}return ((-1^o)>>>0).toString(16).padStart(8,"0").toUpperCase()}(d.toString().replaceAll("\r\n","\n")),l={name:e,original:d,originalHash:c};r=Object.assign(Object.assign({},l),{precomputed:s(l),router:()=>{},context:o,contextProperty:a[a.length-1]}),r.router=function(e){return function(...o){return e.precomputed.enter.apply(this,[o])}}(r),i.set(e,r),o[r.contextProperty]=r.router;}return r}function l(){const e=new Set;for(const o of p.values())for(const t of o.patching.keys())e.add(t);for(const o of i.keys())e.add(o);for(const o of e)c(o,!0);}function f(){const e=new Map;for(const[o,t]of i)e.set(o,{name:o,original:t.original,originalHash:t.originalHash,sdkEntrypoint:t.router,currentEntrypoint:t.context[t.contextProperty],hookedByMods:r(t.precomputed.hooks.map((e=>e.mod))),patchedByMods:Array.from(t.precomputed.patchesSources)});return e}const p=new Map;function u(e){p.get(e.name)!==e&&o(`Failed to unload mod '${e.name}': Not registered`),p.delete(e.name),e.loaded=!1,l();}function g(e,t,r){"string"==typeof e&&"string"==typeof t&&(alert(`Mod SDK warning: Mod '${e}' is registering in a deprecated way.\nIt will work for now, but please inform author to update.`),e={name:e,fullName:e,version:t},t={allowReplace:!0===r}),e&&"object"==typeof e||o("Failed to register mod: Expected info object, got "+typeof e),"string"==typeof e.name&&e.name||o("Failed to register mod: Expected name to be non-empty string, got "+typeof e.name);let i=`'${e.name}'`;"string"==typeof e.fullName&&e.fullName||o(`Failed to register mod ${i}: Expected fullName to be non-empty string, got ${typeof e.fullName}`),i=`'${e.fullName} (${e.name})'`,"string"!=typeof e.version&&o(`Failed to register mod ${i}: Expected version to be string, got ${typeof e.version}`),e.repository||(e.repository=void 0),void 0!==e.repository&&"string"!=typeof e.repository&&o(`Failed to register mod ${i}: Expected repository to be undefined or string, got ${typeof e.version}`),null==t&&(t={}),t&&"object"==typeof t||o(`Failed to register mod ${i}: Expected options to be undefined or object, got ${typeof t}`);const a=!0===t.allowReplace,d=p.get(e.name);d&&(d.allowReplace&&a||o(`Refusing to load mod ${i}: it is already loaded and doesn't allow being replaced.\nWas the mod loaded multiple times?`),u(d));const s=e=>{"string"==typeof e&&e||o(`Mod ${i} failed to patch a function: Expected function name string, got ${typeof e}`);let t=g.patching.get(e);return t||(t={hooks:[],patches:new Map},g.patching.set(e,t)),t},f={unload:()=>u(g),hookFunction:(e,t,n)=>{g.loaded||o(`Mod ${i} attempted to call SDK function after being unloaded`);const r=s(e);"number"!=typeof t&&o(`Mod ${i} failed to hook function '${e}': Expected priority number, got ${typeof t}`),"function"!=typeof n&&o(`Mod ${i} failed to hook function '${e}': Expected hook function, got ${typeof n}`);const a={mod:g.name,priority:t,hook:n};return r.hooks.push(a),l(),()=>{const e=r.hooks.indexOf(a);e>=0&&(r.hooks.splice(e,1),l());}},patchFunction:(e,t)=>{g.loaded||o(`Mod ${i} attempted to call SDK function after being unloaded`);const r=s(e);n(t)||o(`Mod ${i} failed to patch function '${e}': Expected patches object, got ${typeof t}`);for(const[n,a]of Object.entries(t))"string"==typeof a?r.patches.set(n,a):null===a?r.patches.delete(n):o(`Mod ${i} failed to patch function '${e}': Invalid format of patch '${n}'`);l();},removePatches:e=>{g.loaded||o(`Mod ${i} attempted to call SDK function after being unloaded`);s(e).patches.clear(),l();},callOriginal:(e,t,n)=>(g.loaded||o(`Mod ${i} attempted to call SDK function after being unloaded`),"string"==typeof e&&e||o(`Mod ${i} failed to call a function: Expected function name string, got ${typeof e}`),Array.isArray(t)||o(`Mod ${i} failed to call a function: Expected args array, got ${typeof t}`),function(e,o,t=window){return c(e).original.apply(t,o)}(e,t,n)),getOriginalHash:e=>("string"==typeof e&&e||o(`Mod ${i} failed to get hash: Expected function name string, got ${typeof e}`),c(e).originalHash)},g={name:e.name,fullName:e.fullName,version:e.version,repository:e.repository,allowReplace:a,api:f,loaded:!0,patching:new Map};return p.set(e.name,g),Object.freeze(f)}function h(){const e=[];for(const o of p.values())e.push({name:o.name,fullName:o.fullName,version:o.version,repository:o.repository});return e}let m;const y=function(){if(void 0===window.bcModSdk)return window.bcModSdk=function(){const o={version:e,apiVersion:1,registerMod:g,getModsInfo:h,getPatchingInfo:f,errorReporterHooks:Object.seal({hookEnter:null,hookChainExit:null})};return m=o,Object.freeze(o)}();if(n(window.bcModSdk)||o("Failed to init Mod SDK: Name already in use"),1!==window.bcModSdk.apiVersion&&o(`Failed to init Mod SDK: Different version already loaded ('1.1.0' vs '${window.bcModSdk.version}')`),window.bcModSdk.version!==e&&(alert(`Mod SDK warning: Loading different but compatible versions ('1.1.0' vs '${window.bcModSdk.version}')\nOne of mods you are using is using an old version of SDK. It will work for now but please inform author to update`),window.bcModSdk.version.startsWith("1.0.")&&void 0===window.bcModSdk._shim10register)){const e=window.bcModSdk,o=Object.freeze(Object.assign(Object.assign({},e),{registerMod:(o,t,n)=>o&&"object"==typeof o&&"string"==typeof o.name&&"string"==typeof o.version?e.registerMod(o.name,o.version,"object"==typeof t&&!!t&&!0===t.allowReplace):e.registerMod(o,t,n),_shim10register:!0}));window.bcModSdk=o;}return window.bcModSdk}();return "undefined"!='object'&&(Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=y),y}(); 
    } (bcmodsdk));

    var bcModSDK = /*@__PURE__*/getDefaultExportFromCjs(bcmodsdk);

    const modApi = bcModSDK.registerMod({
        name: "BCX",
        fullName: "Bondage Club Extended",
        version: BCX_VERSION,
        repository: "https://github.com/Jomshir98/bondage-club-extended",
    });
    bcModSDK.errorReporterHooks.hookEnter = (fn, mod) => {
        const ctx = debugContextStart(`Function ${fn} hook from ${mod}`, { modArea: mod });
        return () => {
            ctx.end();
        };
    };
    bcModSDK.errorReporterHooks.hookChainExit = (fn, mods) => {
        const ctx = debugContextStart(`Function ${fn} hook chain exit`, {
            modArea: mods.size === 0 ? "" : mods.size === 1 ? Array.from(mods).join("") : `[Possibly multiple mods]`,
            extraInfo: () => mods.size > 0 ? `Patched by: ${Array.from(mods).join(", ")}` : "",
        });
        return () => {
            ctx.end();
        };
    };
    const patchedFunctions = new Map();
    let unloaded = false;
    function isHashExpected(functionName, hash) {
        var _a;
        const expectedHashes = (_a = FUNCTION_HASHES[functionName]) !== null && _a !== void 0 ? _a : [];
        if (isNModClient() && FUNCTION_HASHES_NMOD[functionName]) {
            expectedHashes.push(...FUNCTION_HASHES_NMOD[functionName]);
        }
        return expectedHashes.includes(hash);
    }
    function initPatchableFunction(target) {
        if (unloaded) {
            throw new Error("Cannot init patchable function after unload");
        }
        let result = patchedFunctions.get(target);
        if (!result) {
            const originalHash = modApi.getOriginalHash(target);
            if (!isHashExpected(target, originalHash)) {
                console.warn(`BCX: Patched function ${target} has unknown hash ${originalHash}`);
            }
            console.debug(`BCX: Initialized ${target} for patching, hash ${originalHash}`);
            result = {
                name: target,
                originalHash,
                hooks: [],
            };
            patchedFunctions.set(target, result);
        }
        return result;
    }
    function trackFunction(target) {
        initPatchableFunction(target);
    }
    function hookFunction(target, priority, hook, module = null) {
        const data = initPatchableFunction(target);
        if (data.hooks.some(h => h.hook === hook)) {
            console.error(`BCX: Duplicate hook for "${target}"`, hook);
            return;
        }
        const removeCallback = modApi.hookFunction(target, priority, hook);
        data.hooks.push({
            hook,
            priority,
            module,
            removeCallback,
        });
        data.hooks.sort((a, b) => b.priority - a.priority);
    }
    function removeHooksByModule(target, module) {
        const data = initPatchableFunction(target);
        for (let i = data.hooks.length - 1; i >= 0; i--) {
            if (data.hooks[i].module === module) {
                data.hooks[i].removeCallback();
                data.hooks.splice(i, 1);
            }
        }
        return true;
    }
    function removeAllHooksByModule(module) {
        for (const data of patchedFunctions.values()) {
            for (let i = data.hooks.length - 1; i >= 0; i--) {
                if (data.hooks[i].module === module) {
                    data.hooks[i].removeCallback();
                    data.hooks.splice(i, 1);
                }
            }
        }
        return true;
    }
    function patchFunction(target, patches) {
        initPatchableFunction(target);
        modApi.patchFunction(target, patches);
    }
    function unload_patches() {
        unloaded = true;
        patchedFunctions.clear();
        modApi.unload();
    }
    function callOriginal(target, args) {
        return modApi.callOriginal(target, args);
    }
    function getPatchedFunctionsHashes(includeExpected) {
        return Array
            .from(patchedFunctions.entries())
            .map(i => [i[0], i[1].originalHash])
            .filter(i => includeExpected || !isHashExpected(...i));
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /** Used for built-in method references. */
    var arrayProto$5 = Array.prototype;

    /** Built-in value references. */
    var splice$2 = arrayProto$5.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice$2.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Built-in value references. */
    var Symbol$1 = root.Symbol;

    /** Used for built-in method references. */
    var objectProto$s = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$o = objectProto$s.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$3 = objectProto$s.toString;

    /** Built-in value references. */
    var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty$o.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$3.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$r = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$2 = objectProto$r.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString$2.call(value);
    }

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /** Used for built-in method references. */
    var funcProto$2 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$2 = funcProto$2.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype,
        objectProto$q = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$n = objectProto$q.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString$1.call(hasOwnProperty$n).replace(reRegExpChar$1, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /* Built-in method references that are verified to be native. */
    var Map$1 = getNative(root, 'Map');

    /* Built-in method references that are verified to be native. */
    var nativeCreate = getNative(Object, 'create');

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$p = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$m = objectProto$p.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
      }
      return hasOwnProperty$m.call(data, key) ? data[key] : undefined;
    }

    /** Used for built-in method references. */
    var objectProto$o = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$l = objectProto$o.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$l.call(data, key);
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
      return this;
    }

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map$1 || ListCache),
        'string': new Hash
      };
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$2 = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map$1 || (pairs.length < LARGE_ARRAY_SIZE$2 - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /** Used for built-in method references. */
    var objectProto$n = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$k = objectProto$n.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$k.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag$3;
    }

    /** Used for built-in method references. */
    var objectProto$m = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$j = objectProto$m.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$m.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty$j.call(value, 'callee') &&
        !propertyIsEnumerable$1.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /** Detect free variable `exports`. */
    var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

    /** Built-in value references. */
    var Buffer$1 = moduleExports$2 ? root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$5 = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$5 : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$4 = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$4;
    }

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$4 = '[object Boolean]',
        dateTag$4 = '[object Date]',
        errorTag$3 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$9 = '[object Map]',
        numberTag$4 = '[object Number]',
        objectTag$4 = '[object Object]',
        regexpTag$4 = '[object RegExp]',
        setTag$9 = '[object Set]',
        stringTag$4 = '[object String]',
        weakMapTag$3 = '[object WeakMap]';

    var arrayBufferTag$4 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$4] = typedArrayTags[boolTag$4] =
    typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$4] =
    typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$9] = typedArrayTags[numberTag$4] =
    typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$4] =
    typedArrayTags[setTag$9] = typedArrayTags[stringTag$4] =
    typedArrayTags[weakMapTag$3] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /** Detect free variable `exports`. */
    var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports$1 && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /** Used for built-in method references. */
    var objectProto$l = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$i = objectProto$l.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$i.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$k = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$k;

      return value === proto;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = overArg(Object.keys, Object);

    /** Used for built-in method references. */
    var objectProto$j = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$h = objectProto$j.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$h.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$i = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$g = objectProto$i.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$g.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /** Detect free variable `exports`. */
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /** Used for built-in method references. */
    var objectProto$h = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$h.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /** Built-in value references. */
    var getPrototype = overArg(Object.getPrototypeOf, Object);

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView');

    /* Built-in method references that are verified to be native. */
    var Promise$1 = getNative(root, 'Promise');

    /* Built-in method references that are verified to be native. */
    var Set$1 = getNative(root, 'Set');

    /* Built-in method references that are verified to be native. */
    var WeakMap$1 = getNative(root, 'WeakMap');

    /** `Object#toString` result references. */
    var mapTag$8 = '[object Map]',
        objectTag$3 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$8 = '[object Set]',
        weakMapTag$2 = '[object WeakMap]';

    var dataViewTag$3 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map$1),
        promiseCtorString = toSource(Promise$1),
        setCtorString = toSource(Set$1),
        weakMapCtorString = toSource(WeakMap$1);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$3) ||
        (Map$1 && getTag(new Map$1) != mapTag$8) ||
        (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||
        (Set$1 && getTag(new Set$1) != setTag$8) ||
        (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag$2)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag$3 ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$3;
            case mapCtorString: return mapTag$8;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$8;
            case weakMapCtorString: return weakMapTag$2;
          }
        }
        return result;
      };
    }

    var getTag$1 = getTag;

    /** Used for built-in method references. */
    var objectProto$g = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$f = objectProto$g.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$f.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /** Built-in value references. */
    var Uint8Array$1 = root.Uint8Array;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags$1 = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags$1.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /** `Object#toString` result references. */
    var boolTag$3 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        mapTag$7 = '[object Map]',
        numberTag$3 = '[object Number]',
        regexpTag$3 = '[object RegExp]',
        setTag$7 = '[object Set]',
        stringTag$3 = '[object String]',
        symbolTag$3 = '[object Symbol]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$2 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$3:
          return cloneArrayBuffer(object);

        case boolTag$3:
        case dateTag$3:
          return new Ctor(+object);

        case dataViewTag$2:
          return cloneDataView(object, isDeep);

        case float32Tag$1: case float64Tag$1:
        case int8Tag$1: case int16Tag$1: case int32Tag$1:
        case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
          return cloneTypedArray(object, isDeep);

        case mapTag$7:
          return new Ctor;

        case numberTag$3:
        case stringTag$3:
          return new Ctor(object);

        case regexpTag$3:
          return cloneRegExp(object);

        case setTag$7:
          return new Ctor;

        case symbolTag$3:
          return cloneSymbol(object);
      }
    }

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /** `Object#toString` result references. */
    var mapTag$6 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag$1(value) == mapTag$6;
    }

    /* Node.js helper references. */
    var nodeIsMap = nodeUtil && nodeUtil.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /** `Object#toString` result references. */
    var setTag$6 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag$1(value) == setTag$6;
    }

    /* Node.js helper references. */
    var nodeIsSet = nodeUtil && nodeUtil.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$7 = 1,
        CLONE_FLAT_FLAG$1 = 2,
        CLONE_SYMBOLS_FLAG$5 = 4;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        boolTag$2 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        errorTag$2 = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag$5 = '[object Map]',
        numberTag$2 = '[object Number]',
        objectTag$2 = '[object Object]',
        regexpTag$2 = '[object RegExp]',
        setTag$5 = '[object Set]',
        stringTag$2 = '[object String]',
        symbolTag$2 = '[object Symbol]',
        weakMapTag$1 = '[object WeakMap]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
    cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$1] =
    cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag$5] =
    cloneableTags[numberTag$2] = cloneableTags[objectTag$2] =
    cloneableTags[regexpTag$2] = cloneableTags[setTag$5] =
    cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$2] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag$1] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG$7,
          isFlat = bitmask & CLONE_FLAT_FLAG$1,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$5;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag$1(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag$2 || tag == argsTag$1 || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$6 = 1,
        CLONE_SYMBOLS_FLAG$4 = 4;

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG$6 | CLONE_SYMBOLS_FLAG$4);
    }

    class GuiSubscreen {
        get active() {
            return getCurrentSubscreen() === this;
        }
        Load() {
        }
        Run() {
        }
        Click() {
        }
        Exit() {
            setSubscreen(null);
        }
        Unload() {
        }
        onChange(source) {
        }
    }

    class GuiAuthorityDialogMin extends GuiSubscreen {
        constructor(character, permission, data, myAccesLevel, noAccess, back) {
            super();
            this.character = character;
            this.permission = permission;
            this.permissionData = data;
            this.back = back;
            this.myAccessLevel = myAccesLevel;
            this.noAccess = noAccess;
            this.selectedLevel = data.min;
        }
        Run() {
            DrawTextFit(`- Authority: Changing minimum access to permission "${this.permissionData.name}" -`, 125, 125, 1850, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawText("Please select the new lowest role that should still have this permission.", 1000, 255, "Black");
            DrawTextFit(`Info: Currently set role: ${this.permissionData.min === AccessLevel.self ?
            this.character.Name : capitalizeFirstLetter(AccessLevel[this.permissionData.min])} → ` +
                `Newly selected role: ${this.selectedLevel === AccessLevel.self ?
                this.character.Name : capitalizeFirstLetter(AccessLevel[this.selectedLevel])}`, 1000, 320, 1850, "Black");
            DrawText("All roles to the left of the selected one will also automatically get access.", 1000, 385, "Black");
            if (this.myAccessLevel === AccessLevel.self) {
                const available = (this.permissionData.min <= AccessLevel.self) || !this.noAccess;
                DrawButton(1000 - 110, 460, 220, 72, getPermissionMinDisplayText(AccessLevel.self, this.character), this.selectedLevel === AccessLevel.self ? "Cyan" : available ? "White" : "#ddd", undefined, undefined, !available);
            }
            for (let i = 1; i < 8; i++) {
                const current = this.selectedLevel === i;
                const available = (this.myAccessLevel === AccessLevel.self && this.permissionData.min <= i && i <= AccessLevel.owner) ||
                    !this.noAccess && this.myAccessLevel <= i;
                DrawButton(-15 + 230 * i, 577, 190, 72, getPermissionMinDisplayText(i, this.character), current ? "Cyan" : available ? "White" : "#ddd", undefined, undefined, !available);
                if (i < 7)
                    DrawText(">", 196 + 230 * i, 577 + 36, "Black");
            }
            if (this.character.isPlayer() && this.permission === "authority_revoke_self" && this.selectedLevel !== AccessLevel.self) {
                DrawText(`WARNING: If you confirm, all permitted roles can remove your access to this and all other permissions!`, 1000, 730, "Red", "Gray");
            }
            DrawButton(700, 800, 200, 80, "Confirm", "White");
            DrawButton(1120, 800, 200, 80, "Cancel", "White");
        }
        Click() {
            if (MouseIn(700, 800, 200, 80))
                return this.Confirm();
            if (MouseIn(1120, 800, 200, 80))
                return this.Exit();
            if (MouseIn(1000 - 110, 460, 220, 72) && this.myAccessLevel === AccessLevel.self) {
                const available = (this.permissionData.min <= AccessLevel.self) || !this.noAccess;
                if (available) {
                    this.selectedLevel = AccessLevel.self;
                }
            }
            for (let i = 1; i < 8; i++) {
                const current = this.selectedLevel === i;
                const available = (this.myAccessLevel === AccessLevel.self && this.permissionData.min <= i && i <= AccessLevel.owner) ||
                    !this.noAccess && this.myAccessLevel <= i;
                if (MouseIn(-15 + 230 * i, 577, 190, 72) && !current && available) {
                    this.selectedLevel = i;
                }
            }
        }
        Confirm() {
            this.character.setPermission(this.permission, "min", this.selectedLevel);
        }
        Exit() {
            setSubscreen(this.back);
        }
        onChange() {
            this.Exit();
        }
    }

    class GuiAuthorityDialogSelf extends GuiSubscreen {
        constructor(character, permission, data, back) {
            super();
            this.character = character;
            this.permission = permission;
            this.permissionData = data;
            this.back = back;
        }
        Run() {
            DrawTextFit(`- Authority: Removing self access to permission "${this.permissionData.name}" -`, 125, 125, 1850, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawText("- Warning -", 1000, 375, "Black", "Black");
            DrawText("If you confirm, you won't be able to change your access to this permission back yourself.", 1000, 525, "Black");
            DrawButton(700, 720, 200, 80, "Confirm", "White");
            DrawButton(1120, 720, 200, 80, "Cancel", "White");
        }
        Click() {
            if (MouseIn(700, 720, 200, 80))
                return this.Confirm();
            if (MouseIn(1120, 720, 200, 80))
                return this.Exit();
        }
        Confirm() {
            this.character.setPermission(this.permission, "self", false);
        }
        Exit() {
            setSubscreen(this.back);
        }
        onChange() {
            this.Exit();
        }
    }

    var Views;
    (function (Views) {
        Views[Views["AuthorityRoles"] = 10] = "AuthorityRoles";
        Views[Views["AuthorityPermissions"] = 11] = "AuthorityPermissions";
        Views[Views["Log"] = 20] = "Log";
        Views[Views["LogConfig"] = 21] = "LogConfig";
        Views[Views["ConditionsViewCurses"] = 30] = "ConditionsViewCurses";
        Views[Views["ConditionsEditCurses"] = 31] = "ConditionsEditCurses";
        Views[Views["ConditionsGlobalCurses"] = 32] = "ConditionsGlobalCurses";
        Views[Views["CursesAdd"] = 33] = "CursesAdd";
        Views[Views["CursesAddPermissionMode"] = 34] = "CursesAddPermissionMode";
        Views[Views["ConditionsViewRules"] = 40] = "ConditionsViewRules";
        Views[Views["ConditionsEditRules"] = 41] = "ConditionsEditRules";
        Views[Views["ConditionsGlobalRules"] = 42] = "ConditionsGlobalRules";
        Views[Views["RulesAdd"] = 43] = "RulesAdd";
        Views[Views["RulesAddPermissionMode"] = 44] = "RulesAddPermissionMode";
        Views[Views["Commands"] = 50] = "Commands";
        Views[Views["CommandsPermissionMode"] = 51] = "CommandsPermissionMode";
        Views[Views["Relationships"] = 60] = "Relationships";
        Views[Views["ExportImportMain"] = 91] = "ExportImportMain";
        Views[Views["ExportImportSelect"] = 92] = "ExportImportSelect";
        Views[Views["Misc"] = 100] = "Misc";
    })(Views || (Views = {}));
    const HELP_TEXTS = {
        [Views.AuthorityRoles]: "If you are permitted, this screen enables you to view, add, or remove the BCX-only roles 'Owner' " +
            "and 'Mistress', which expand the classic roles of BC such as Bondage Club's Owner and the Lovers. The hierarchy of all " +
            "roles that can be used to set various things in BCX can be seen on the right. The higher up a role is, the more authority it has. " +
            "For instance, if something applies or is permitted for a Mistress, it also always is for an Owner. Any number of " +
            "Owners and Mistresses can be set. Check their current power over BCX with the button on the right.",
        [Views.AuthorityPermissions]: "The heart of BCX: Allows to configure the permissions to set up and use most of " +
            "BCX. Default settings depend on the initial BCX setup preset selected. " +
            "Self access is the checkbox next to every permission and the lowest access role is to its right. " +
            "Example: If 'allow forbidding self access', 'allow granting self access', 'allow lowest access modification' have the checkbox removed " +
            "and lowest role is 'Owner', then current and newly added BCX owners and the BC owner can get full control over " +
            "any permissions they have access to. So careful with those three permissions!",
        [Views.Log]: "This screen shows logs of important events. What is logged depends on the logging configuration, which can be viewed/edited " +
            "via the button to the right. Log entries can have normal or protected visibility. Access to those as well as removing entries or the " +
            "configuration is determined by the according authority module permission settings. The log can document the BCX's user's conduct, " +
            "any rule violations, important changes made to BCX settings, curses or rules, and notes from other people.",
        [Views.LogConfig]: "This screen determines what is logged in the behaviour log and what the visibility of each type of log messages is. " +
            "'Yes' means this log type " +
            "has normal visibility, while 'protected' means only roles who have permission to view protected entries can view them. 'No' means that " +
            "this log type is not logged at all. In the permission settings view of the authority module, the permissions of this log module can be configured.",
        [Views.ConditionsViewCurses]: "This screen shows all active curses on the player, including many information, such as duration, if it is " +
            "a cursed item/clothing/body slot or a blocked item or clothing slot that forces to stay unrestrained or naked there. Clicking on the button with the cog icon " +
            "in the middle of each row moves you to a new screen that allows to configure the curse (if you have permission). When the cog icon has a blue " +
            "aura, that means that the curse's conditions are the same as the global config. If permitted, you can remove single curses with the 'X' button.",
        [Views.ConditionsEditCurses]: "Here you can switch the curse on/off, set a timer for activating/deactivating/deleting the curse and " +
            "define when it can trigger, such as either always or based on where the player is and with whom. The small green/red bars next to the " +
            "checkboxes indicate whether a condition is true at present or not and the big bar whether this means that the curse is in effect, if active. " +
            "On the right side, you can curse the usage/" +
            "alteration of an item such as fixing cuffs behind the back. Lastly, in the bottom right you can set the trigger conditions " +
            "of this curse to the global curses config.",
        [Views.ConditionsGlobalCurses]: "The settings on this page are the global/default settings for all newly added curses. Changes to the trigger " +
            "conditions are also applied to existing curses that are (still) set to global curses configuration, though. Exception is if a timer is set here. " +
            "Such a timer only applies to newly created curses.",
        [Views.CursesAdd]: "Here, you can add a curse to any empty slot (white) which will keep it empty or on any worn item (gold) " +
            "which will prevent removal. You add the curse by simply clicking the slot which then becomes purple to indicate that " +
            "it is now cursed. Grey slots indicate " +
            "that you have no access to them, due to them being blocked or due to your permission settings. Slots can be limited/blocked via the settings button " +
            "on the very right. The screen has a second page for the character's body slots.",
        [Views.CursesAddPermissionMode]: "Here you can cycle item and clothing slots between being not limited, limited and blocked. Blocked means " +
            "no one can add a curse to it, while limited means only roles that have the permission to curse limited slots can curse them. There " +
            "is no need to save changes as they are instantly in effect.",
        [Views.ConditionsViewRules]: "This screen shows all active rules for the player, including many information, such as duration, the " +
            "rule type and little status icons that show if the rule is enforced and/or transgressions are logged. Clicking on the button with the cog icon " +
            "in the middle of each row moves you to a new screen that allows to configure the rule (if you have permission). When the cog icon has a blue " +
            "aura, then that means that the rule's conditions are the same as the global config. If permitted, you can remove single rules with the 'X' button.",
        [Views.ConditionsEditRules]: "Here you switch the rule on/off, set a timer for activating/deactivating/deleting the rule and " +
            "define when it can trigger, such as either always or based on where the player is and with whom. The small green/red bars next to the " +
            "checkboxes indicate whether a condition is true at present or not and the big bar whether this means that the rule is in effect, if active. " +
            "Depending on the rule, you can either enforce its effect, " +
            "log all violations, or both at the same time. Lastly on the bottom right, you can set whether the trigger conditions " +
            "of this rule should follow the global rules config or not.",
        [Views.ConditionsGlobalRules]: "The settings on this page are the global/default settings for all newly added rules. Changes to the trigger " +
            "conditions are also applied to existing rules that are (still) set to global rules configuration, though. Exception is if a timer is set here. " +
            "Such a timer only applies to newly established rules.",
        [Views.RulesAdd]: "On this screen you can establish new rules for the player by simply clicking any rule template. " +
            "After clicking on it, you can edit the rule's configuration. Purple rule templates indicate, that they are already in use; greyed out " +
            "ones, that you have no access to them due to being blocked or due to your permission settings. Rule templates can be limited/blocked " +
            "via the settings button on the very right. Note: If you want to be able to log rule violations, this type of log entry may need to be allowed " +
            "in the configuration page of the behavior log module.",
        [Views.RulesAddPermissionMode]: "Here you can cycle rule templates between being not limited, limited and blocked. Blocked means " +
            "no one can add/use this rule, while limited means only roles that have the permission to establish limited rules can add them. There " +
            "is no need to save changes as they are instantly in effect.",
        [Views.Commands]: "On this screen you can see the available commands for the player. " +
            "Clicking on one shows a more detailed description of it. Greyed out commands indicate " +
            "that you have no access to them due to being blocked or due to your permission settings. Commands can be limited/blocked " +
            "via the settings button on the very right. Commands will be used in the chat room's chat by whispering them with a '!' before the command to " +
            "another player. Note: SOME of the commands can also be used on yourself with a leading '.' instead of '!' (e.g. '.eyes close')",
        [Views.CommandsPermissionMode]: "Here you can cycle commands between being not limited, limited and blocked. Blocked means " +
            "no one can use this command, while limited means only roles that have the permission to use limited commands can trigger them in that chat. There " +
            "is no need to save changes as they are instantly in effect.",
        [Views.Misc]: "This screen offers various settings to configure your Bondage Club experience in general, such as enabling/disabling the " +
            "typing indicator that shows other BCX users an icon when you are currently typing something to public chat or whispering something to " +
            "only them. The cheats are only temporarily active as long as they are set; items that were only given via a cheat are then also gone again.",
        [Views.ExportImportMain]: "Please select the module feature you want to backup or import from a previous export. After storing the " +
            "exported texts, you can later on use them again, e.g. for switching between cursed outfits or different rule sets. These exports " +
            "are compatible between different BCX users and can be used by everyone with BCX who is permitted to make changes to the according module. For instance, " +
            "if an owner has the permission to control limited AND non-limited rules on the sub, she is with that also allowed to import previously exported " +
            "rules that are not blocked.",
        [Views.ExportImportSelect]: "Export/import works by converting the current configuration of the selected module feature into a long code word that is " +
            "copied to your device's clipboard. You can then paste it anywhere you like, for instance a text file on your device. " +
            "Functionality of this feature depends on the device you are using and if the clipboard can be used on it. " +
            "This field will also show you status information while you try to export or import.\n" +
            "Compressing the export will save you some space when storing it, as the text length will be shorter, although the exported string will no longer be " +
            "human readable. ",
        [Views.Relationships]: "This screen lets you add custom nicknames for other club members. " +
            "The set custom name replaces the added character's real name / BC-nickname in this player's chat, except within chat commands, which are " +
            "considered OOC. You can also enforce the custom name so that the player is blocked from sending a chat message / whisper that use the " +
            "character's name / BC-nickname while with her. The player cannot have multiple custom names set for a single character. A character who " +
            "has a custom name set on this screen can always see their own set custom name in this list.",
    };

    const PER_PAGE_COUNT$8 = 6;
    class GuiAuthorityPermissions extends GuiSubscreen {
        constructor(character) {
            super();
            this.permissionData = null;
            this.myAccessLevel = AccessLevel.public;
            this.failed = false;
            this.permList = [];
            this.page = 0;
            this.showHelp = false;
            this.filterInput = createInputElement("text", 30);
            this.character = character;
            if (this.character.isPlayer()) {
                this.myAccessLevel = AccessLevel.self;
            }
            this.filterInput.addEventListener("input", ev => {
                this.rebuildList();
            });
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            Promise.all([this.character.getPermissions(), this.character.getMyAccessLevel()]).then(res => {
                this.permissionData = res[0];
                this.myAccessLevel = res[1];
                this.failed = false;
                this.rebuildList();
            }, err => {
                console.error(`BCX: Failed to get permission info for ${this.character}`, err);
                this.permissionData = null;
                this.failed = true;
                this.rebuildList();
            });
        }
        rebuildList() {
            if (!this.active)
                return;
            this.permList = [];
            if (this.permissionData === null) {
                this.filterInput.remove();
                return;
            }
            if (!this.filterInput.parentElement) {
                document.body.appendChild(this.filterInput);
            }
            const filter = this.filterInput.value.trim().toLocaleLowerCase().split(" ").filter(Boolean);
            const access_grantSelf = this.permissionData.authority_grant_self ?
                checkPermissionAccessData(this.permissionData.authority_grant_self, this.myAccessLevel) :
                false;
            const access_revokeSelf = this.permissionData.authority_revoke_self ?
                checkPermissionAccessData(this.permissionData.authority_revoke_self, this.myAccessLevel) :
                false;
            const access_editMin = this.permissionData.authority_edit_min ?
                checkPermissionAccessData(this.permissionData.authority_edit_min, this.myAccessLevel) :
                false;
            const isPlayer = this.myAccessLevel === AccessLevel.self;
            const categories = new Map();
            for (const [k, v] of Object.entries(this.permissionData)) {
                let permdata = categories.get(v.category);
                if (filter.some(i => !MODULE_NAMES[v.category].toLocaleLowerCase().includes(i) &&
                    !v.name.toLocaleLowerCase().includes(i) &&
                    !k.toLocaleLowerCase().includes(i)))
                    continue;
                if (!permdata) {
                    categories.set(v.category, permdata = {});
                }
                permdata[k] = v;
            }
            for (const [category, data] of Array.from(categories.entries()).sort((a, b) => a[0] - b[0])) {
                if (filter.length === 0) {
                    while (this.permList.length % PER_PAGE_COUNT$8 !== 0) {
                        this.permList.push(null);
                    }
                }
                this.permList.push({
                    separator: true,
                    name: `${MODULE_NAMES[category]} module permissions`,
                });
                for (const [k, v] of Object.entries(data).sort((a, b) => a[1].name.localeCompare(b[1].name))) {
                    if (filter.length === 0 && this.permList.length % PER_PAGE_COUNT$8 === 0) {
                        this.permList.push({
                            separator: true,
                            name: `${MODULE_NAMES[category]} module permissions (continued)`,
                        });
                    }
                    const access = checkPermissionAccessData(v, this.myAccessLevel);
                    this.permList.push({
                        separator: false,
                        permission: k,
                        permissionInfo: v,
                        editSelf: (v.self ? access_revokeSelf : access_grantSelf) &&
                            (isPlayer || access) &&
                            (!v.self || v.min !== AccessLevel.self),
                        editMin: (isPlayer && v.min < AccessLevel.owner) ||
                            (access_editMin && access),
                    });
                }
            }
            const totalPages = Math.ceil(this.permList.length / PER_PAGE_COUNT$8);
            if (this.page < 0) {
                this.page = Math.max(totalPages - 1, 0);
            }
            else if (this.page >= totalPages) {
                this.page = 0;
            }
        }
        Run() {
            if (this.permissionData !== null) {
                DrawTextFit(this.character.Name, 1111, 190, 189, "Black");
                DrawText("is permitted", 1111, 235, "Black");
                DrawText("Lowest permitted role", 1370, 235, "Black");
                MainCanvas.beginPath();
                MainCanvas.moveTo(1335, 230);
                MainCanvas.lineTo(1335, 230 + 610);
                MainCanvas.stroke();
                DrawText("Filter:", 130, 215, "Black");
                positionElement(this.filterInput, 550, 210, 600, 64);
                if (this.filterInput.value) {
                    MainCanvas.textAlign = "center";
                    DrawButton(870, 182, 64, 64, "X", "White");
                }
                MainCanvas.textAlign = "left";
                for (let off = 0; off < PER_PAGE_COUNT$8; off++) {
                    const i = this.page * PER_PAGE_COUNT$8 + off;
                    if (i >= this.permList.length)
                        break;
                    const e = this.permList[i];
                    if (e === null)
                        continue;
                    const Y = 275 + off * 100;
                    if (e.separator) {
                        MainCanvas.beginPath();
                        MainCanvas.rect(125, Y, 1173, 64);
                        MainCanvas.fillStyle = "#eeeeee";
                        MainCanvas.fill();
                        DrawText(e.name, 140, Y + 34, "Black");
                    }
                    else {
                        DrawImageEx(MODULE_ICONS[e.permissionInfo.category], 125, Y, {
                            Height: 64,
                            Width: 64,
                        });
                        MainCanvas.beginPath();
                        MainCanvas.rect(200, Y, 1000, 64);
                        MainCanvas.fillStyle = checkPermissionAccessData(e.permissionInfo, this.myAccessLevel) ? "White" : "#ddd";
                        MainCanvas.fill();
                        MainCanvas.stroke();
                        DrawTextFit(e.permissionInfo.name, 210, Y + 34, 990, "Black");
                        DrawButton(1235, Y, 64, 64, "", e.editSelf ? "White" : "#ddd", e.permissionInfo.self ? "Icons/Checked.png" : "", undefined, !e.editSelf);
                        MainCanvas.textAlign = "center";
                        DrawButton(1370, Y, 170, 64, getPermissionMinDisplayText(e.permissionInfo.min, this.character), e.editMin ? "White" : "#ddd", undefined, undefined, !e.editMin);
                        MainCanvas.textAlign = "left";
                    }
                }
                const totalPages = Math.max(1, Math.ceil(this.permList.length / PER_PAGE_COUNT$8));
                MainCanvas.textAlign = "center";
                DrawBackNextButton(1605, 800, 300, 90, `${DialogFindPlayer("Page")} ${this.page + 1} / ${totalPages}`, "White", "", () => "", () => "");
            }
            else if (this.failed) {
                MainCanvas.textAlign = "center";
                DrawText(`Failed to get permission data from ${this.character.Name}. Maybe you have no access?`, 1000, 480, "Black");
            }
            else {
                MainCanvas.textAlign = "center";
                DrawText("Loading...", 1000, 480, "Black");
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.AuthorityPermissions]);
            }
            MainCanvas.textAlign = "left";
            DrawText(`- Authority: Permission Settings for ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "BCX main menu");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            DrawButton(1815, 305, 90, 90, "", "White", "Icons/West.png", "Previous screen");
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (MouseIn(1815, 305, 90, 90))
                return setSubscreen(new GuiAuthorityRoles(this.character));
            if (this.permissionData !== null) {
                if (MouseIn(870, 182, 64, 64)) {
                    this.filterInput.value = "";
                    this.rebuildList();
                }
                for (let off = 0; off < PER_PAGE_COUNT$8; off++) {
                    const i = this.page * PER_PAGE_COUNT$8 + off;
                    if (i >= this.permList.length)
                        break;
                    const e = this.permList[i];
                    if (e === null)
                        continue;
                    const Y = 275 + off * 100;
                    if (!e.separator) {
                        if (MouseIn(200, Y, 1000, 64)) {
                        }
                        if (MouseIn(1235, Y, 64, 64) && e.editSelf) {
                            if (e.permissionInfo.self &&
                                this.character.isPlayer() &&
                                (e.permission === "authority_grant_self" ||
                                    !checkPermissionAccess("authority_grant_self", getPlayerCharacter()))) {
                                setSubscreen(new GuiAuthorityDialogSelf(this.character, e.permission, e.permissionInfo, this));
                            }
                            else {
                                this.character.setPermission(e.permission, "self", !e.permissionInfo.self);
                            }
                            return;
                        }
                        if (MouseIn(1370, Y, 170, 64) && e.editMin) {
                            const access_editMin = this.permissionData.authority_edit_min ?
                                checkPermissionAccessData(this.permissionData.authority_edit_min, this.myAccessLevel) :
                                false;
                            setSubscreen(new GuiAuthorityDialogMin(this.character, e.permission, e.permissionInfo, this.myAccessLevel, !access_editMin || !checkPermissionAccessData(e.permissionInfo, this.myAccessLevel), this));
                            return;
                        }
                    }
                }
                const totalPages = Math.ceil(this.permList.length / PER_PAGE_COUNT$8);
                if (MouseIn(1605, 800, 150, 90)) {
                    this.page--;
                    if (this.page < 0) {
                        this.page = Math.max(totalPages - 1, 0);
                    }
                }
                else if (MouseIn(1755, 800, 150, 90)) {
                    this.page++;
                    if (this.page >= totalPages) {
                        this.page = 0;
                    }
                }
            }
        }
        Exit() {
            setSubscreen(new GuiMainMenu(this.character));
        }
        Unload() {
            this.filterInput.remove();
        }
    }

    const PER_PAGE_COUNT$7 = 8;
    class GuiMemberSelect extends GuiSubscreen {
        constructor(character, back, callback, ignoredCharacters = []) {
            super();
            this.roleData = null;
            this.roleList = [];
            this.failed = false;
            this.page = 0;
            this.character = character;
            this.back = back;
            this.callback = callback;
            this.ignoredCharacters = ignoredCharacters;
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            Promise.all([this.character.getRolesData()]).then(res => {
                this.roleData = res[0];
                this.failed = false;
                this.refreshScreen();
            }, err => {
                console.error(`BCX: Failed to get role info for ${this.character}`, err);
                this.roleData = null;
                this.failed = true;
                this.refreshScreen();
            });
        }
        refreshScreen() {
            var _a, _b, _c;
            if (!this.active)
                return;
            this.roleList = [];
            let nameFilter = document.getElementById("BCX_Filter");
            if (this.roleData === null) {
                if (nameFilter) {
                    nameFilter.remove();
                }
                return;
            }
            if (!nameFilter) {
                nameFilter = ElementCreateInput("BCX_Filter", "text", "", "30");
                nameFilter.addEventListener("input", ev => {
                    this.refreshScreen();
                });
            }
            const filter = nameFilter.value.trim().toLocaleLowerCase().split(" ");
            this.roleList = [
                {
                    type: "Character",
                    memberNumber: this.character.MemberNumber,
                    name: this.character.Name,
                },
            ];
            if (!this.character.isPlayer()) {
                this.roleList.push({
                    type: "Player",
                    memberNumber: Player.MemberNumber,
                    name: Player.Name,
                });
            }
            if (typeof ((_a = this.character.Character.Ownership) === null || _a === void 0 ? void 0 : _a.MemberNumber) === "number" && !this.roleList.some(r => { var _a; return r.memberNumber === ((_a = this.character.Character.Ownership) === null || _a === void 0 ? void 0 : _a.MemberNumber); })) {
                this.roleList.push({
                    type: "Clubowner",
                    memberNumber: this.character.Character.Ownership.MemberNumber,
                    name: this.character.Character.Ownership.Name,
                });
            }
            for (const owner of this.roleData.owners) {
                if (!this.roleList.some(r => r.memberNumber === owner[0])) {
                    this.roleList.push({
                        type: "Owner",
                        memberNumber: owner[0],
                        name: getCharacterName(owner[0], owner[1] || "[unknown name]"),
                    });
                }
            }
            if (Array.isArray(this.character.Character.Lovership)) {
                for (const L of this.character.Character.Lovership) {
                    if (typeof L.MemberNumber === "number" && !this.roleList.some(r => r.memberNumber === L.MemberNumber)) {
                        this.roleList.push({
                            type: "Lover",
                            memberNumber: L.MemberNumber,
                            name: L.Name,
                        });
                    }
                }
            }
            for (const mistress of this.roleData.mistresses) {
                if (!this.roleList.some(r => r.memberNumber === mistress[0])) {
                    this.roleList.push({
                        type: "Mistress",
                        memberNumber: mistress[0],
                        name: getCharacterName(mistress[0], mistress[1] || "[unknown name]"),
                    });
                }
            }
            if (Player.GetBlindLevel() < 3 || !((_b = Player.GameplaySettings) === null || _b === void 0 ? void 0 : _b.BlindDisableExamine)) {
                const ChatRoomCharacterList = getAllCharactersInRoom();
                if (Player.GetBlindLevel() > 0 && ((_c = Player.ImmersionSettings) === null || _c === void 0 ? void 0 : _c.BlindAdjacent)) {
                    const playerIndex = ChatRoomCharacterList.findIndex(c => c.isPlayer());
                    for (let i = 0; i < ChatRoomCharacterList.length; i++) {
                        if (Math.abs(i - playerIndex) === 1 &&
                            !this.roleList.some(r => r.memberNumber === ChatRoomCharacterList[i].MemberNumber)) {
                            this.roleList.push({
                                type: "in same room",
                                memberNumber: ChatRoomCharacterList[i].MemberNumber,
                                name: ChatRoomCharacterList[i].Name,
                            });
                        }
                    }
                }
                else {
                    for (const character of ChatRoomCharacterList) {
                        if (!this.roleList.some(r => r.memberNumber === character.MemberNumber)) {
                            this.roleList.push({
                                type: "in same room",
                                memberNumber: character.MemberNumber,
                                name: character.Name,
                            });
                        }
                    }
                }
            }
            if (Player.FriendNames) {
                for (const [memberNumber, name] of Player.FriendNames.entries()) {
                    if (!this.roleList.some(r => r.memberNumber === memberNumber)) {
                        this.roleList.push({
                            type: "Friend",
                            memberNumber,
                            name,
                        });
                    }
                }
            }
            this.roleList = this.roleList.filter(e => {
                return !this.ignoredCharacters.includes(e.memberNumber) && filter.every(f => { var _a; return ((_a = e.name) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase().includes(f)) || e.memberNumber.toString().includes(f); });
            });
            const totalPages = Math.ceil(this.roleList.length / PER_PAGE_COUNT$7);
            if (this.page < 0) {
                this.page = Math.max(totalPages - 1, 0);
            }
            else if (this.page >= totalPages) {
                this.page = 0;
            }
        }
        Run() {
            var _a;
            if (this.roleData !== null) {
                DrawText("Filter name:", 703, 125, "Black");
                ElementPosition("BCX_Filter", 1203, 118, 600, 64);
                if ((_a = document.getElementById("BCX_Filter")) === null || _a === void 0 ? void 0 : _a.value) {
                    MainCanvas.textAlign = "center";
                    DrawButton(1510, 92, 64, 64, "X", "White");
                }
                for (let off = 0; off < PER_PAGE_COUNT$7; off++) {
                    const i = this.page * PER_PAGE_COUNT$7 + off;
                    if (i >= this.roleList.length)
                        break;
                    const e = this.roleList[i];
                    const Y = 290 + off * 75;
                    MainCanvas.textAlign = "center";
                    DrawText(`${e.name}`, 383, Y + 34, "Black");
                    DrawText(`${e.memberNumber}`, 780, Y + 34, "Black");
                    DrawText(`${e.type === ("Character" || "Player") ? "" : e.type}`, 1100, Y + 34, "Black");
                    MainCanvas.beginPath();
                    MainCanvas.moveTo(175, Y + 69);
                    MainCanvas.lineTo(1280, Y + 69);
                    MainCanvas.strokeStyle = "#ddd";
                    MainCanvas.stroke();
                    DrawButton(1340, Y, 150, 64, "Select", "White", "");
                }
                const totalPages = Math.max(1, Math.ceil(this.roleList.length / PER_PAGE_COUNT$7));
                DrawBackNextButton(1605, 800, 300, 90, `${DialogFindPlayer("Page")} ${this.page + 1} / ${totalPages}`, "White", "", () => "", () => "");
            }
            else if (this.failed) {
                MainCanvas.textAlign = "center";
                DrawText(`Failed to get data from ${this.character.Name}. Maybe you have no access?`, 1000, 480, "Black");
            }
            else {
                MainCanvas.textAlign = "center";
                DrawText("Loading...", 1000, 480, "Black");
            }
            MainCanvas.textAlign = "left";
            DrawText(`Please select a member.`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "Back");
            MainCanvas.beginPath();
            MainCanvas.moveTo(125, 176);
            MainCanvas.lineTo(1566, 176);
            MainCanvas.stroke();
            DrawText(`Name`, 383, 222, "Black");
            DrawText(`Member number`, 780, 222, "Black");
            DrawText(`Note`, 1100, 222, "Black");
            MainCanvas.beginPath();
            MainCanvas.moveTo(125, 265);
            MainCanvas.lineTo(1566, 265);
            MainCanvas.stroke();
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (this.roleData !== null) {
                const elem = document.getElementById("BCX_Filter");
                if (MouseIn(1510, 92, 64, 64) && elem) {
                    elem.value = "";
                    this.refreshScreen();
                }
                for (let off = 0; off < PER_PAGE_COUNT$7; off++) {
                    const i = this.page * PER_PAGE_COUNT$7 + off;
                    if (i >= this.roleList.length)
                        break;
                    const e = this.roleList[i];
                    const Y = 290 + off * 75;
                    if (MouseIn(1340, Y, 150, 64)) {
                        this.callback(e.memberNumber);
                        this.Exit();
                        return;
                    }
                }
                const totalPages = Math.ceil(this.roleList.length / PER_PAGE_COUNT$7);
                if (MouseIn(1605, 800, 150, 90)) {
                    this.page--;
                    if (this.page < 0) {
                        this.page = Math.max(totalPages - 1, 0);
                    }
                }
                else if (MouseIn(1755, 800, 150, 90)) {
                    this.page++;
                    if (this.page >= totalPages) {
                        this.page = 0;
                    }
                }
            }
        }
        Exit() {
            setSubscreen(this.back);
        }
        Unload() {
            ElementRemove("BCX_Filter");
        }
    }

    const PER_PAGE_COUNT$6 = 6;
    class GuiAuthorityRoles extends GuiSubscreen {
        constructor(character) {
            super();
            this.roleData = null;
            this.roleList = [];
            this.failed = false;
            this.page = 0;
            this.hoveringTextList = [];
            this.roleAddInputAutofill = null;
            this.showHelp = false;
            this.character = character;
            this.hoveringTextList =
                character.isPlayer() ? [
                    `You - either top or bottom of the hierarchy`,
                    `Your owner, visible on your character profile`,
                    `Any character, added to the list on the left as "Owner"`,
                    `Any of your lovers, visible on your character profile`,
                    `Any character, added to the list on the left as "Mistress"`,
                    `Anyone you have white-listed`,
                    `Anyone you have friend-listed`,
                    `Anyone, who can use items on you`,
                ] : [
                    `This player - either top or bottom of the hierarchy`,
                    `This player's owner, visible on their character profile`,
                    `Any character, added to the list on the left as "Owner"`,
                    `Any lover of this player, visible on their profile`,
                    `Any character, added to the list on the left as "Mistress"`,
                    `Anyone this player has white-listed`,
                    `Anyone this player has friend-listed`,
                    `Anyone, who can use items on this player`,
                ];
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            Promise.all([this.character.getRolesData()]).then(res => {
                this.roleData = res[0];
                this.failed = false;
                this.rebuildList();
            }, err => {
                console.error(`BCX: Failed to get role info for ${this.character}`, err);
                this.roleData = null;
                this.failed = true;
                this.rebuildList();
            });
        }
        rebuildList() {
            if (!this.active)
                return;
            this.roleList = [];
            let Input = document.getElementById("BCX_RoleAdd");
            if (!this.roleData) {
                if (Input) {
                    Input.remove();
                }
                return;
            }
            const showInput = this.roleData.allowAddMistress || this.roleData.allowAddOwner;
            if (!showInput && Input) {
                Input.remove();
            }
            else if (showInput && !Input) {
                Input = ElementCreateInput("BCX_RoleAdd", "text", "", "6");
                if (this.roleAddInputAutofill !== null) {
                    Input.value = `${this.roleAddInputAutofill}`;
                    this.roleAddInputAutofill = null;
                }
            }
            this.roleList = this.roleData.owners.map((i) => ({
                type: "Owner",
                memberNumber: i[0],
                name: getCharacterName(i[0], i[1] || null),
            }));
            this.roleList.push(...this.roleData.mistresses.map((i) => ({
                type: "Mistress",
                memberNumber: i[0],
                name: getCharacterName(i[0], i[1] || null),
            })));
            const totalPages = Math.ceil(this.roleList.length / PER_PAGE_COUNT$6);
            if (this.page < 0) {
                this.page = Math.max(totalPages - 1, 0);
            }
            else if (this.page >= totalPages) {
                this.page = 0;
            }
        }
        Run() {
            DrawText("Hierarchy of roles:", 1336, 95, "Black");
            MainCanvas.beginPath();
            MainCanvas.moveTo(1450, 134);
            MainCanvas.lineTo(1450 + 150, 134);
            MainCanvas.lineTo(1450 + 80, 740);
            MainCanvas.lineTo(1450 + 70, 740);
            MainCanvas.lineTo(1450, 134);
            MainCanvas.fillStyle = "Black";
            MainCanvas.fill();
            if (this.roleData) {
                for (let off = 0; off < PER_PAGE_COUNT$6; off++) {
                    const i = this.page * PER_PAGE_COUNT$6 + off;
                    if (i >= this.roleList.length)
                        break;
                    const e = this.roleList[i];
                    const Y = 210 + off * 95;
                    MainCanvas.beginPath();
                    MainCanvas.rect(130, Y, 900, 64);
                    MainCanvas.stroke();
                    const msg = `${e.type} ${e.name === null ? "[unknown name]" : e.name} (${e.memberNumber})`;
                    DrawTextFit(msg, 140, Y + 34, 590, "Black");
                    if ((e.type === "Owner" ? this.roleData.allowRemoveOwner : this.roleData.allowRemoveMistress) || e.memberNumber === Player.MemberNumber) {
                        MainCanvas.textAlign = "center";
                        DrawButton(1090, Y, 64, 64, "X", "White");
                        MainCanvas.textAlign = "left";
                    }
                }
                const Input = document.getElementById("BCX_RoleAdd");
                if (Input) {
                    DrawText("Member Number:", 130, 847, "Black");
                    ElementPosition("BCX_RoleAdd", 580, 842, 300, 64);
                }
                MainCanvas.textAlign = "center";
                if (this.roleData.allowAddOwner) {
                    DrawButton(833, 815, 210, 64, "Add as owner", "white");
                }
                if (this.roleData.allowAddMistress) {
                    DrawButton(1074, 815, 210, 64, "Add as mistress", "white");
                }
                if (this.roleData.allowAddMistress || this.roleData.allowAddOwner) {
                    DrawButton(740, 815, 64, 64, "", "White", undefined, `Select member number from list`);
                    DrawImageEx("Icons/Title.png", 742, 815, { Width: 60, Height: 60 });
                }
                const totalPages = Math.ceil(this.roleList.length / PER_PAGE_COUNT$6);
                DrawBackNextButton(1430, 800, 300, 90, `Page ${this.page + 1} / ${totalPages}`, "White", "", () => "", () => "");
            }
            else if (this.failed) {
                MainCanvas.textAlign = "center";
                DrawText(`Failed to get role data from ${this.character.Name}. Maybe you have no access?`, 800, 480, "Black");
            }
            else {
                MainCanvas.textAlign = "center";
                DrawText("Loading...", 800, 480, "Black");
            }
            MainCanvas.textAlign = "center";
            DrawButton(1420, 130, 208, 54, this.character.Name, "White", undefined, this.hoveringTextList[0]);
            for (let i = 1; i < 8; i++) {
                DrawButton(1430, 130 + 80 * i, 188, 54, capitalizeFirstLetter(AccessLevel[i]), "White", undefined, this.hoveringTextList[i]);
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.AuthorityRoles]);
            }
            MainCanvas.textAlign = "left";
            DrawText(`- Authority: Role Management for ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "BCX main menu");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            DrawButton(1815, 305, 90, 90, "", "White", "Icons/Preference.png", "Configure the role-based BCX permissions");
        }
        Click() {
            var _a;
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (MouseIn(1815, 305, 90, 90))
                return this.Back();
            if (this.roleData) {
                for (let off = 0; off < PER_PAGE_COUNT$6; off++) {
                    const i = this.page * PER_PAGE_COUNT$6 + off;
                    if (i >= this.roleList.length)
                        break;
                    const e = this.roleList[i];
                    const Y = 210 + off * 95;
                    if (((e.type === "Owner" ? this.roleData.allowRemoveOwner : this.roleData.allowRemoveMistress) || e.memberNumber === Player.MemberNumber) && MouseIn(1090, Y, 64, 64)) {
                        this.character.editRole(e.type === "Owner" ? "owner" : "mistress", "remove", e.memberNumber);
                        return;
                    }
                }
                const Input = document.getElementById("BCX_RoleAdd");
                const inputText = (_a = Input === null || Input === void 0 ? void 0 : Input.value) !== null && _a !== void 0 ? _a : "";
                const inputNumber = /^[0-9]+$/.test(inputText) ? Number.parseInt(inputText, 10) : null;
                if (this.roleData.allowAddOwner && Input && inputNumber !== null && MouseIn(833, 815, 210, 64)) {
                    Input.value = "";
                    this.character.editRole("owner", "add", inputNumber);
                    return;
                }
                if (this.roleData.allowAddMistress && Input && inputNumber !== null && MouseIn(1074, 815, 210, 64)) {
                    Input.value = "";
                    this.character.editRole("mistress", "add", inputNumber);
                    return;
                }
                const totalPages = Math.ceil(this.roleList.length / PER_PAGE_COUNT$6);
                if (MouseIn(1430, 800, 150, 90)) {
                    this.page--;
                    if (this.page < 0) {
                        this.page = Math.max(totalPages - 1, 0);
                    }
                }
                else if (MouseIn(1580, 800, 150, 90)) {
                    this.page++;
                    if (this.page >= totalPages) {
                        this.page = 0;
                    }
                }
                if (MouseIn(740, 815, 64, 64)) {
                    setSubscreen(new GuiMemberSelect(this.character, this, result => {
                        this.roleAddInputAutofill = result;
                    }));
                    return;
                }
            }
        }
        Exit() {
            setSubscreen(new GuiMainMenu(this.character));
        }
        Back() {
            setSubscreen(new GuiAuthorityPermissions(this.character));
        }
        Unload() {
            ElementRemove("BCX_RoleAdd");
        }
    }

    class GuiGlobalDialogClearData extends GuiSubscreen {
        constructor(back) {
            super();
            this.allowedConfirmTime = 0;
            this.back = back;
        }
        Load() {
            this.allowedConfirmTime = Date.now() + 10000;
        }
        Run() {
            MainCanvas.textAlign = "center";
            DrawText(`- Permanent deletion of ALL Bondage Club Extended data -`, 1000, 125, "Black");
            DrawText("- Warning -", 1000, 225, "Black", "Black");
            DrawText("If you confirm, all BCX data (including settings, curses, logs, ...) will be permanently deleted!", 1000, 325, "Black");
            DrawText("As part of the deletion process, the window will reload, logging you out of your account.", 1000, 500, "Gray");
            DrawText("You will be able to use BCX again, but none of your current data will be coming back!", 1000, 550, "Gray");
            DrawText("This action cannot be undone!", 1000, 625, "Red", "Black");
            if (this.allowedConfirmTime === null) {
                DrawText("Deleting...", 1000, 720, "Black");
                return;
            }
            const now = Date.now();
            if (now < this.allowedConfirmTime) {
                DrawButton(300, 720, 200, 80, `Confirm (${Math.floor((this.allowedConfirmTime - now) / 1000)})`, "#ddd", undefined, undefined, true);
            }
            else {
                DrawButton(300, 720, 200, 80, "Confirm", "White");
            }
            DrawButton(1520, 720, 200, 80, "Cancel", "White");
        }
        Click() {
            if (this.allowedConfirmTime === null)
                return;
            if (MouseIn(1520, 720, 200, 80))
                return this.Exit();
            if (MouseIn(300, 720, 200, 80) && Date.now() >= this.allowedConfirmTime)
                return this.Confirm();
        }
        Confirm() {
            this.allowedConfirmTime = null;
            clearAllData();
        }
        Exit() {
            if (this.allowedConfirmTime === null)
                return;
            setSubscreen(this.back);
        }
    }

    class GuiGlobalModuleToggling extends GuiSubscreen {
        constructor() {
            super(...arguments);
            this.enabledModules = new Set();
            this.changed = false;
        }
        Load() {
            this.enabledModules.clear();
            for (const m of TOGGLEABLE_MODULES.filter(i => moduleIsEnabled(i))) {
                this.enabledModules.add(m);
            }
            this.changed = false;
        }
        Run() {
            MainCanvas.textAlign = "left";
            DrawText(`- Global: Enable/Disable BCX's modules -`, 125, 125, "Black", "Gray");
            DrawText(`Warning: Disabling a module will reset all its settings and stored data!`, 125, 180, "FireBrick");
            for (let i = 0; i < TOGGLEABLE_MODULES.length; i++) {
                const module = TOGGLEABLE_MODULES[i];
                const PX = Math.floor(i / 5);
                const PY = i % 5;
                DrawCheckbox(150 + 500 * PX, 240 + 110 * PY, 64, 64, "", this.enabledModules.has(module));
                DrawImageEx(MODULE_ICONS[module], 280 + 500 * PX, 240 + 110 * PY, {
                    Height: 64,
                    Width: 64,
                });
                DrawText(MODULE_NAMES[module], 370 + 500 * PX, 240 + 32 + 110 * PY, "Black");
            }
            MainCanvas.textAlign = "center";
            DrawButton(300, 800, 200, 80, "Confirm", this.changed ? "White" : "#ddd", undefined, undefined, !this.changed);
            DrawButton(1520, 800, 200, 80, "Cancel", "White");
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            for (let i = 0; i < TOGGLEABLE_MODULES.length; i++) {
                const module = TOGGLEABLE_MODULES[i];
                const PX = Math.floor(i / 5);
                const PY = i % 5;
                if (MouseIn(150 + 500 * PX, 240 + 110 * PY, 64, 64)) {
                    if (this.enabledModules.has(module)) {
                        this.enabledModules.delete(module);
                    }
                    else {
                        this.enabledModules.add(module);
                    }
                    this.changed = true;
                    return;
                }
            }
            if (MouseIn(300, 800, 200, 80) && this.changed) {
                if (setDisabledModules(TOGGLEABLE_MODULES.filter(i => !this.enabledModules.has(i)))) {
                    this.Exit();
                }
                return;
            }
            if (MouseIn(1520, 800, 200, 80)) {
                return this.Exit();
            }
        }
        Exit() {
            setSubscreen(new GuiGlobal(getPlayerCharacter()));
        }
    }

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$5 = 1,
        COMPARE_UNORDERED_FLAG$3 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$4 = 1,
        COMPARE_UNORDERED_FLAG$2 = 2;

    /** `Object#toString` result references. */
    var boolTag$1 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        errorTag$1 = '[object Error]',
        mapTag$4 = '[object Map]',
        numberTag$1 = '[object Number]',
        regexpTag$1 = '[object RegExp]',
        setTag$4 = '[object Set]',
        stringTag$1 = '[object String]',
        symbolTag$1 = '[object Symbol]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag$1:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
            return false;
          }
          return true;

        case boolTag$1:
        case dateTag$1:
        case numberTag$1:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag$1:
          return object.name == other.name && object.message == other.message;

        case regexpTag$1:
        case stringTag$1:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag$4:
          var convert = mapToArray;

        case setTag$4:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag$1:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** Used for built-in method references. */
    var objectProto$f = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$e = objectProto$f.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$e.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        objectTag$1 = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$e = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$d = objectProto$e.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag$1(object),
          othTag = othIsArr ? arrayTag : getTag$1(other);

      objTag = objTag == argsTag ? objectTag$1 : objTag;
      othTag = othTag == argsTag ? objectTag$1 : othTag;

      var objIsObj = objTag == objectTag$1,
          othIsObj = othTag == objectTag$1,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$d.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$d.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$b = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT$b);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$5 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$5) ? '-0' : result;
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$4 = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$4) ? '-0' : result;
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /** Built-in value references. */
    var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$g = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax$g(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax$g(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    var util$1;
    (function (util) {
        util.assertEqual = (val) => val;
        function assertIs(_arg) { }
        util.assertIs = assertIs;
        function assertNever(_x) {
            throw new Error();
        }
        util.assertNever = assertNever;
        util.arrayToEnum = (items) => {
            const obj = {};
            for (const item of items) {
                obj[item] = item;
            }
            return obj;
        };
        util.getValidEnumValues = (obj) => {
            const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
            const filtered = {};
            for (const k of validKeys) {
                filtered[k] = obj[k];
            }
            return util.objectValues(filtered);
        };
        util.objectValues = (obj) => {
            return util.objectKeys(obj).map(function (e) {
                return obj[e];
            });
        };
        util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
            ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
            : (object) => {
                const keys = [];
                for (const key in object) {
                    if (Object.prototype.hasOwnProperty.call(object, key)) {
                        keys.push(key);
                    }
                }
                return keys;
            };
        util.find = (arr, checker) => {
            for (const item of arr) {
                if (checker(item))
                    return item;
            }
            return undefined;
        };
        util.isInteger = typeof Number.isInteger === "function"
            ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
            : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
        function joinValues(array, separator = " | ") {
            return array
                .map((val) => (typeof val === "string" ? `'${val}'` : val))
                .join(separator);
        }
        util.joinValues = joinValues;
        util.jsonStringifyReplacer = (_, value) => {
            if (typeof value === "bigint") {
                return value.toString();
            }
            return value;
        };
    })(util$1 || (util$1 = {}));
    var objectUtil;
    (function (objectUtil) {
        objectUtil.mergeShapes = (first, second) => {
            return {
                ...first,
                ...second, // second overwrites first
            };
        };
    })(objectUtil || (objectUtil = {}));
    const ZodParsedType = util$1.arrayToEnum([
        "string",
        "nan",
        "number",
        "integer",
        "float",
        "boolean",
        "date",
        "bigint",
        "symbol",
        "function",
        "undefined",
        "null",
        "array",
        "object",
        "unknown",
        "promise",
        "void",
        "never",
        "map",
        "set",
    ]);
    const getParsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case "undefined":
                return ZodParsedType.undefined;
            case "string":
                return ZodParsedType.string;
            case "number":
                return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
            case "boolean":
                return ZodParsedType.boolean;
            case "function":
                return ZodParsedType.function;
            case "bigint":
                return ZodParsedType.bigint;
            case "symbol":
                return ZodParsedType.symbol;
            case "object":
                if (Array.isArray(data)) {
                    return ZodParsedType.array;
                }
                if (data === null) {
                    return ZodParsedType.null;
                }
                if (data.then &&
                    typeof data.then === "function" &&
                    data.catch &&
                    typeof data.catch === "function") {
                    return ZodParsedType.promise;
                }
                if (typeof Map !== "undefined" && data instanceof Map) {
                    return ZodParsedType.map;
                }
                if (typeof Set !== "undefined" && data instanceof Set) {
                    return ZodParsedType.set;
                }
                if (typeof Date !== "undefined" && data instanceof Date) {
                    return ZodParsedType.date;
                }
                return ZodParsedType.object;
            default:
                return ZodParsedType.unknown;
        }
    };

    const ZodIssueCode = util$1.arrayToEnum([
        "invalid_type",
        "invalid_literal",
        "custom",
        "invalid_union",
        "invalid_union_discriminator",
        "invalid_enum_value",
        "unrecognized_keys",
        "invalid_arguments",
        "invalid_return_type",
        "invalid_date",
        "invalid_string",
        "too_small",
        "too_big",
        "invalid_intersection_types",
        "not_multiple_of",
        "not_finite",
    ]);
    const quotelessJson = (obj) => {
        const json = JSON.stringify(obj, null, 2);
        return json.replace(/"([^"]+)":/g, "$1:");
    };
    class ZodError extends Error {
        constructor(issues) {
            super();
            this.issues = [];
            this.addIssue = (sub) => {
                this.issues = [...this.issues, sub];
            };
            this.addIssues = (subs = []) => {
                this.issues = [...this.issues, ...subs];
            };
            const actualProto = new.target.prototype;
            if (Object.setPrototypeOf) {
                // eslint-disable-next-line ban/ban
                Object.setPrototypeOf(this, actualProto);
            }
            else {
                this.__proto__ = actualProto;
            }
            this.name = "ZodError";
            this.issues = issues;
        }
        get errors() {
            return this.issues;
        }
        format(_mapper) {
            const mapper = _mapper ||
                function (issue) {
                    return issue.message;
                };
            const fieldErrors = { _errors: [] };
            const processError = (error) => {
                for (const issue of error.issues) {
                    if (issue.code === "invalid_union") {
                        issue.unionErrors.map(processError);
                    }
                    else if (issue.code === "invalid_return_type") {
                        processError(issue.returnTypeError);
                    }
                    else if (issue.code === "invalid_arguments") {
                        processError(issue.argumentsError);
                    }
                    else if (issue.path.length === 0) {
                        fieldErrors._errors.push(mapper(issue));
                    }
                    else {
                        let curr = fieldErrors;
                        let i = 0;
                        while (i < issue.path.length) {
                            const el = issue.path[i];
                            const terminal = i === issue.path.length - 1;
                            if (!terminal) {
                                curr[el] = curr[el] || { _errors: [] };
                                // if (typeof el === "string") {
                                //   curr[el] = curr[el] || { _errors: [] };
                                // } else if (typeof el === "number") {
                                //   const errorArray: any = [];
                                //   errorArray._errors = [];
                                //   curr[el] = curr[el] || errorArray;
                                // }
                            }
                            else {
                                curr[el] = curr[el] || { _errors: [] };
                                curr[el]._errors.push(mapper(issue));
                            }
                            curr = curr[el];
                            i++;
                        }
                    }
                }
            };
            processError(this);
            return fieldErrors;
        }
        toString() {
            return this.message;
        }
        get message() {
            return JSON.stringify(this.issues, util$1.jsonStringifyReplacer, 2);
        }
        get isEmpty() {
            return this.issues.length === 0;
        }
        flatten(mapper = (issue) => issue.message) {
            const fieldErrors = {};
            const formErrors = [];
            for (const sub of this.issues) {
                if (sub.path.length > 0) {
                    fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                    fieldErrors[sub.path[0]].push(mapper(sub));
                }
                else {
                    formErrors.push(mapper(sub));
                }
            }
            return { formErrors, fieldErrors };
        }
        get formErrors() {
            return this.flatten();
        }
    }
    ZodError.create = (issues) => {
        const error = new ZodError(issues);
        return error;
    };

    const errorMap = (issue, _ctx) => {
        let message;
        switch (issue.code) {
            case ZodIssueCode.invalid_type:
                if (issue.received === ZodParsedType.undefined) {
                    message = "Required";
                }
                else {
                    message = `Expected ${issue.expected}, received ${issue.received}`;
                }
                break;
            case ZodIssueCode.invalid_literal:
                message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util$1.jsonStringifyReplacer)}`;
                break;
            case ZodIssueCode.unrecognized_keys:
                message = `Unrecognized key(s) in object: ${util$1.joinValues(issue.keys, ", ")}`;
                break;
            case ZodIssueCode.invalid_union:
                message = `Invalid input`;
                break;
            case ZodIssueCode.invalid_union_discriminator:
                message = `Invalid discriminator value. Expected ${util$1.joinValues(issue.options)}`;
                break;
            case ZodIssueCode.invalid_enum_value:
                message = `Invalid enum value. Expected ${util$1.joinValues(issue.options)}, received '${issue.received}'`;
                break;
            case ZodIssueCode.invalid_arguments:
                message = `Invalid function arguments`;
                break;
            case ZodIssueCode.invalid_return_type:
                message = `Invalid function return type`;
                break;
            case ZodIssueCode.invalid_date:
                message = `Invalid date`;
                break;
            case ZodIssueCode.invalid_string:
                if (typeof issue.validation === "object") {
                    if ("includes" in issue.validation) {
                        message = `Invalid input: must include "${issue.validation.includes}"`;
                        if (typeof issue.validation.position === "number") {
                            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                        }
                    }
                    else if ("startsWith" in issue.validation) {
                        message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                    }
                    else if ("endsWith" in issue.validation) {
                        message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                    }
                    else {
                        util$1.assertNever(issue.validation);
                    }
                }
                else if (issue.validation !== "regex") {
                    message = `Invalid ${issue.validation}`;
                }
                else {
                    message = "Invalid";
                }
                break;
            case ZodIssueCode.too_small:
                if (issue.type === "array")
                    message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
                else if (issue.type === "string")
                    message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
                else if (issue.type === "number")
                    message = `Number must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${issue.minimum}`;
                else if (issue.type === "date")
                    message = `Date must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${new Date(Number(issue.minimum))}`;
                else
                    message = "Invalid input";
                break;
            case ZodIssueCode.too_big:
                if (issue.type === "array")
                    message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
                else if (issue.type === "string")
                    message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
                else if (issue.type === "number")
                    message = `Number must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
                else if (issue.type === "bigint")
                    message = `BigInt must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
                else if (issue.type === "date")
                    message = `Date must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `smaller than or equal to`
                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
                else
                    message = "Invalid input";
                break;
            case ZodIssueCode.custom:
                message = `Invalid input`;
                break;
            case ZodIssueCode.invalid_intersection_types:
                message = `Intersection results could not be merged`;
                break;
            case ZodIssueCode.not_multiple_of:
                message = `Number must be a multiple of ${issue.multipleOf}`;
                break;
            case ZodIssueCode.not_finite:
                message = "Number must be finite";
                break;
            default:
                message = _ctx.defaultError;
                util$1.assertNever(issue);
        }
        return { message };
    };

    let overrideErrorMap = errorMap;
    function setErrorMap(map) {
        overrideErrorMap = map;
    }
    function getErrorMap() {
        return overrideErrorMap;
    }

    const makeIssue = (params) => {
        const { data, path, errorMaps, issueData } = params;
        const fullPath = [...path, ...(issueData.path || [])];
        const fullIssue = {
            ...issueData,
            path: fullPath,
        };
        let errorMessage = "";
        const maps = errorMaps
            .filter((m) => !!m)
            .slice()
            .reverse();
        for (const map of maps) {
            errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
        }
        return {
            ...issueData,
            path: fullPath,
            message: issueData.message || errorMessage,
        };
    };
    const EMPTY_PATH = [];
    function addIssueToContext(ctx, issueData) {
        const issue = makeIssue({
            issueData: issueData,
            data: ctx.data,
            path: ctx.path,
            errorMaps: [
                ctx.common.contextualErrorMap,
                ctx.schemaErrorMap,
                getErrorMap(),
                errorMap, // then global default map
            ].filter((x) => !!x),
        });
        ctx.common.issues.push(issue);
    }
    class ParseStatus {
        constructor() {
            this.value = "valid";
        }
        dirty() {
            if (this.value === "valid")
                this.value = "dirty";
        }
        abort() {
            if (this.value !== "aborted")
                this.value = "aborted";
        }
        static mergeArray(status, results) {
            const arrayValue = [];
            for (const s of results) {
                if (s.status === "aborted")
                    return INVALID;
                if (s.status === "dirty")
                    status.dirty();
                arrayValue.push(s.value);
            }
            return { status: status.value, value: arrayValue };
        }
        static async mergeObjectAsync(status, pairs) {
            const syncPairs = [];
            for (const pair of pairs) {
                syncPairs.push({
                    key: await pair.key,
                    value: await pair.value,
                });
            }
            return ParseStatus.mergeObjectSync(status, syncPairs);
        }
        static mergeObjectSync(status, pairs) {
            const finalObject = {};
            for (const pair of pairs) {
                const { key, value } = pair;
                if (key.status === "aborted")
                    return INVALID;
                if (value.status === "aborted")
                    return INVALID;
                if (key.status === "dirty")
                    status.dirty();
                if (value.status === "dirty")
                    status.dirty();
                if (typeof value.value !== "undefined" || pair.alwaysSet) {
                    finalObject[key.value] = value.value;
                }
            }
            return { status: status.value, value: finalObject };
        }
    }
    const INVALID = Object.freeze({
        status: "aborted",
    });
    const DIRTY = (value) => ({ status: "dirty", value });
    const OK = (value) => ({ status: "valid", value });
    const isAborted = (x) => x.status === "aborted";
    const isDirty = (x) => x.status === "dirty";
    const isValid = (x) => x.status === "valid";
    const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

    var errorUtil;
    (function (errorUtil) {
        errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
        errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
    })(errorUtil || (errorUtil = {}));

    class ParseInputLazyPath {
        constructor(parent, value, path, key) {
            this._cachedPath = [];
            this.parent = parent;
            this.data = value;
            this._path = path;
            this._key = key;
        }
        get path() {
            if (!this._cachedPath.length) {
                if (this._key instanceof Array) {
                    this._cachedPath.push(...this._path, ...this._key);
                }
                else {
                    this._cachedPath.push(...this._path, this._key);
                }
            }
            return this._cachedPath;
        }
    }
    const handleResult = (ctx, result) => {
        if (isValid(result)) {
            return { success: true, data: result.value };
        }
        else {
            if (!ctx.common.issues.length) {
                throw new Error("Validation failed but no issues detected.");
            }
            return {
                success: false,
                get error() {
                    if (this._error)
                        return this._error;
                    const error = new ZodError(ctx.common.issues);
                    this._error = error;
                    return this._error;
                },
            };
        }
    };
    function processCreateParams(params) {
        if (!params)
            return {};
        const { errorMap, invalid_type_error, required_error, description } = params;
        if (errorMap && (invalid_type_error || required_error)) {
            throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
        }
        if (errorMap)
            return { errorMap: errorMap, description };
        const customMap = (iss, ctx) => {
            if (iss.code !== "invalid_type")
                return { message: ctx.defaultError };
            if (typeof ctx.data === "undefined") {
                return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
            }
            return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
        };
        return { errorMap: customMap, description };
    }
    class ZodType {
        constructor(def) {
            /** Alias of safeParseAsync */
            this.spa = this.safeParseAsync;
            this._def = def;
            this.parse = this.parse.bind(this);
            this.safeParse = this.safeParse.bind(this);
            this.parseAsync = this.parseAsync.bind(this);
            this.safeParseAsync = this.safeParseAsync.bind(this);
            this.spa = this.spa.bind(this);
            this.refine = this.refine.bind(this);
            this.refinement = this.refinement.bind(this);
            this.superRefine = this.superRefine.bind(this);
            this.optional = this.optional.bind(this);
            this.nullable = this.nullable.bind(this);
            this.nullish = this.nullish.bind(this);
            this.array = this.array.bind(this);
            this.promise = this.promise.bind(this);
            this.or = this.or.bind(this);
            this.and = this.and.bind(this);
            this.transform = this.transform.bind(this);
            this.brand = this.brand.bind(this);
            this.default = this.default.bind(this);
            this.catch = this.catch.bind(this);
            this.describe = this.describe.bind(this);
            this.pipe = this.pipe.bind(this);
            this.isNullable = this.isNullable.bind(this);
            this.isOptional = this.isOptional.bind(this);
        }
        get description() {
            return this._def.description;
        }
        _getType(input) {
            return getParsedType(input.data);
        }
        _getOrReturnCtx(input, ctx) {
            return (ctx || {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            });
        }
        _processInputParams(input) {
            return {
                status: new ParseStatus(),
                ctx: {
                    common: input.parent.common,
                    data: input.data,
                    parsedType: getParsedType(input.data),
                    schemaErrorMap: this._def.errorMap,
                    path: input.path,
                    parent: input.parent,
                },
            };
        }
        _parseSync(input) {
            const result = this._parse(input);
            if (isAsync(result)) {
                throw new Error("Synchronous parse encountered promise.");
            }
            return result;
        }
        _parseAsync(input) {
            const result = this._parse(input);
            return Promise.resolve(result);
        }
        parse(data, params) {
            const result = this.safeParse(data, params);
            if (result.success)
                return result.data;
            throw result.error;
        }
        safeParse(data, params) {
            var _a;
            const ctx = {
                common: {
                    issues: [],
                    async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                    contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                },
                path: (params === null || params === void 0 ? void 0 : params.path) || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data,
                parsedType: getParsedType(data),
            };
            const result = this._parseSync({ data, path: ctx.path, parent: ctx });
            return handleResult(ctx, result);
        }
        async parseAsync(data, params) {
            const result = await this.safeParseAsync(data, params);
            if (result.success)
                return result.data;
            throw result.error;
        }
        async safeParseAsync(data, params) {
            const ctx = {
                common: {
                    issues: [],
                    contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                    async: true,
                },
                path: (params === null || params === void 0 ? void 0 : params.path) || [],
                schemaErrorMap: this._def.errorMap,
                parent: null,
                data,
                parsedType: getParsedType(data),
            };
            const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
            const result = await (isAsync(maybeAsyncResult)
                ? maybeAsyncResult
                : Promise.resolve(maybeAsyncResult));
            return handleResult(ctx, result);
        }
        refine(check, message) {
            const getIssueProperties = (val) => {
                if (typeof message === "string" || typeof message === "undefined") {
                    return { message };
                }
                else if (typeof message === "function") {
                    return message(val);
                }
                else {
                    return message;
                }
            };
            return this._refinement((val, ctx) => {
                const result = check(val);
                const setError = () => ctx.addIssue({
                    code: ZodIssueCode.custom,
                    ...getIssueProperties(val),
                });
                if (typeof Promise !== "undefined" && result instanceof Promise) {
                    return result.then((data) => {
                        if (!data) {
                            setError();
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                }
                if (!result) {
                    setError();
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        refinement(check, refinementData) {
            return this._refinement((val, ctx) => {
                if (!check(val)) {
                    ctx.addIssue(typeof refinementData === "function"
                        ? refinementData(val, ctx)
                        : refinementData);
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        _refinement(refinement) {
            return new ZodEffects({
                schema: this,
                typeName: ZodFirstPartyTypeKind.ZodEffects,
                effect: { type: "refinement", refinement },
            });
        }
        superRefine(refinement) {
            return this._refinement(refinement);
        }
        optional() {
            return ZodOptional.create(this, this._def);
        }
        nullable() {
            return ZodNullable.create(this, this._def);
        }
        nullish() {
            return this.nullable().optional();
        }
        array() {
            return ZodArray.create(this, this._def);
        }
        promise() {
            return ZodPromise.create(this, this._def);
        }
        or(option) {
            return ZodUnion.create([this, option], this._def);
        }
        and(incoming) {
            return ZodIntersection.create(this, incoming, this._def);
        }
        transform(transform) {
            return new ZodEffects({
                ...processCreateParams(this._def),
                schema: this,
                typeName: ZodFirstPartyTypeKind.ZodEffects,
                effect: { type: "transform", transform },
            });
        }
        default(def) {
            const defaultValueFunc = typeof def === "function" ? def : () => def;
            return new ZodDefault({
                ...processCreateParams(this._def),
                innerType: this,
                defaultValue: defaultValueFunc,
                typeName: ZodFirstPartyTypeKind.ZodDefault,
            });
        }
        brand() {
            return new ZodBranded({
                typeName: ZodFirstPartyTypeKind.ZodBranded,
                type: this,
                ...processCreateParams(this._def),
            });
        }
        catch(def) {
            const catchValueFunc = typeof def === "function" ? def : () => def;
            return new ZodCatch({
                ...processCreateParams(this._def),
                innerType: this,
                catchValue: catchValueFunc,
                typeName: ZodFirstPartyTypeKind.ZodCatch,
            });
        }
        describe(description) {
            const This = this.constructor;
            return new This({
                ...this._def,
                description,
            });
        }
        pipe(target) {
            return ZodPipeline.create(this, target);
        }
        isOptional() {
            return this.safeParse(undefined).success;
        }
        isNullable() {
            return this.safeParse(null).success;
        }
    }
    const cuidRegex = /^c[^\s-]{8,}$/i;
    const cuid2Regex = /^[a-z][a-z0-9]*$/;
    const ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
    const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
    // from https://stackoverflow.com/a/46181/1550155
    // old version: too slow, didn't support unicode
    // const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
    //old email regex
    // const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
    // eslint-disable-next-line
    const emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
    // from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
    const emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
    const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
    const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
    // Adapted from https://stackoverflow.com/a/3143231
    const datetimeRegex = (args) => {
        if (args.precision) {
            if (args.offset) {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
            }
            else {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
            }
        }
        else if (args.precision === 0) {
            if (args.offset) {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
            }
            else {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
            }
        }
        else {
            if (args.offset) {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
            }
            else {
                return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
            }
        }
    };
    function isValidIP(ip, version) {
        if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
            return true;
        }
        if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
            return true;
        }
        return false;
    }
    class ZodString extends ZodType {
        constructor() {
            super(...arguments);
            this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
                validation,
                code: ZodIssueCode.invalid_string,
                ...errorUtil.errToObj(message),
            });
            /**
             * @deprecated Use z.string().min(1) instead.
             * @see {@link ZodString.min}
             */
            this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
            this.trim = () => new ZodString({
                ...this._def,
                checks: [...this._def.checks, { kind: "trim" }],
            });
            this.toLowerCase = () => new ZodString({
                ...this._def,
                checks: [...this._def.checks, { kind: "toLowerCase" }],
            });
            this.toUpperCase = () => new ZodString({
                ...this._def,
                checks: [...this._def.checks, { kind: "toUpperCase" }],
            });
        }
        _parse(input) {
            if (this._def.coerce) {
                input.data = String(input.data);
            }
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.string) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.string,
                    received: ctx.parsedType,
                }
                //
                );
                return INVALID;
            }
            const status = new ParseStatus();
            let ctx = undefined;
            for (const check of this._def.checks) {
                if (check.kind === "min") {
                    if (input.data.length < check.value) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: false,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "max") {
                    if (input.data.length > check.value) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: false,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "length") {
                    const tooBig = input.data.length > check.value;
                    const tooSmall = input.data.length < check.value;
                    if (tooBig || tooSmall) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        if (tooBig) {
                            addIssueToContext(ctx, {
                                code: ZodIssueCode.too_big,
                                maximum: check.value,
                                type: "string",
                                inclusive: true,
                                exact: true,
                                message: check.message,
                            });
                        }
                        else if (tooSmall) {
                            addIssueToContext(ctx, {
                                code: ZodIssueCode.too_small,
                                minimum: check.value,
                                type: "string",
                                inclusive: true,
                                exact: true,
                                message: check.message,
                            });
                        }
                        status.dirty();
                    }
                }
                else if (check.kind === "email") {
                    if (!emailRegex.test(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "email",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "emoji") {
                    if (!emojiRegex.test(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "emoji",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "uuid") {
                    if (!uuidRegex.test(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "uuid",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "cuid") {
                    if (!cuidRegex.test(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "cuid",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "cuid2") {
                    if (!cuid2Regex.test(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "cuid2",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "ulid") {
                    if (!ulidRegex.test(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "ulid",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "url") {
                    try {
                        new URL(input.data);
                    }
                    catch (_a) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "url",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "regex") {
                    check.regex.lastIndex = 0;
                    const testResult = check.regex.test(input.data);
                    if (!testResult) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "regex",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "trim") {
                    input.data = input.data.trim();
                }
                else if (check.kind === "includes") {
                    if (!input.data.includes(check.value, check.position)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.invalid_string,
                            validation: { includes: check.value, position: check.position },
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "toLowerCase") {
                    input.data = input.data.toLowerCase();
                }
                else if (check.kind === "toUpperCase") {
                    input.data = input.data.toUpperCase();
                }
                else if (check.kind === "startsWith") {
                    if (!input.data.startsWith(check.value)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.invalid_string,
                            validation: { startsWith: check.value },
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "endsWith") {
                    if (!input.data.endsWith(check.value)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.invalid_string,
                            validation: { endsWith: check.value },
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "datetime") {
                    const regex = datetimeRegex(check);
                    if (!regex.test(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.invalid_string,
                            validation: "datetime",
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "ip") {
                    if (!isValidIP(input.data, check.version)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            validation: "ip",
                            code: ZodIssueCode.invalid_string,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else {
                    util$1.assertNever(check);
                }
            }
            return { status: status.value, value: input.data };
        }
        _addCheck(check) {
            return new ZodString({
                ...this._def,
                checks: [...this._def.checks, check],
            });
        }
        email(message) {
            return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
        }
        url(message) {
            return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
        }
        emoji(message) {
            return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
        }
        uuid(message) {
            return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
        }
        cuid(message) {
            return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
        }
        cuid2(message) {
            return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
        }
        ulid(message) {
            return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
        }
        ip(options) {
            return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
        }
        datetime(options) {
            var _a;
            if (typeof options === "string") {
                return this._addCheck({
                    kind: "datetime",
                    precision: null,
                    offset: false,
                    message: options,
                });
            }
            return this._addCheck({
                kind: "datetime",
                precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
                offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
                ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
            });
        }
        regex(regex, message) {
            return this._addCheck({
                kind: "regex",
                regex: regex,
                ...errorUtil.errToObj(message),
            });
        }
        includes(value, options) {
            return this._addCheck({
                kind: "includes",
                value: value,
                position: options === null || options === void 0 ? void 0 : options.position,
                ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
            });
        }
        startsWith(value, message) {
            return this._addCheck({
                kind: "startsWith",
                value: value,
                ...errorUtil.errToObj(message),
            });
        }
        endsWith(value, message) {
            return this._addCheck({
                kind: "endsWith",
                value: value,
                ...errorUtil.errToObj(message),
            });
        }
        min(minLength, message) {
            return this._addCheck({
                kind: "min",
                value: minLength,
                ...errorUtil.errToObj(message),
            });
        }
        max(maxLength, message) {
            return this._addCheck({
                kind: "max",
                value: maxLength,
                ...errorUtil.errToObj(message),
            });
        }
        length(len, message) {
            return this._addCheck({
                kind: "length",
                value: len,
                ...errorUtil.errToObj(message),
            });
        }
        get isDatetime() {
            return !!this._def.checks.find((ch) => ch.kind === "datetime");
        }
        get isEmail() {
            return !!this._def.checks.find((ch) => ch.kind === "email");
        }
        get isURL() {
            return !!this._def.checks.find((ch) => ch.kind === "url");
        }
        get isEmoji() {
            return !!this._def.checks.find((ch) => ch.kind === "emoji");
        }
        get isUUID() {
            return !!this._def.checks.find((ch) => ch.kind === "uuid");
        }
        get isCUID() {
            return !!this._def.checks.find((ch) => ch.kind === "cuid");
        }
        get isCUID2() {
            return !!this._def.checks.find((ch) => ch.kind === "cuid2");
        }
        get isULID() {
            return !!this._def.checks.find((ch) => ch.kind === "ulid");
        }
        get isIP() {
            return !!this._def.checks.find((ch) => ch.kind === "ip");
        }
        get minLength() {
            let min = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "min") {
                    if (min === null || ch.value > min)
                        min = ch.value;
                }
            }
            return min;
        }
        get maxLength() {
            let max = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "max") {
                    if (max === null || ch.value < max)
                        max = ch.value;
                }
            }
            return max;
        }
    }
    ZodString.create = (params) => {
        var _a;
        return new ZodString({
            checks: [],
            typeName: ZodFirstPartyTypeKind.ZodString,
            coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
            ...processCreateParams(params),
        });
    };
    // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
    function floatSafeRemainder(val, step) {
        const valDecCount = (val.toString().split(".")[1] || "").length;
        const stepDecCount = (step.toString().split(".")[1] || "").length;
        const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
        const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
        const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
        return (valInt % stepInt) / Math.pow(10, decCount);
    }
    class ZodNumber extends ZodType {
        constructor() {
            super(...arguments);
            this.min = this.gte;
            this.max = this.lte;
            this.step = this.multipleOf;
        }
        _parse(input) {
            if (this._def.coerce) {
                input.data = Number(input.data);
            }
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.number) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.number,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            let ctx = undefined;
            const status = new ParseStatus();
            for (const check of this._def.checks) {
                if (check.kind === "int") {
                    if (!util$1.isInteger(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.invalid_type,
                            expected: "integer",
                            received: "float",
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "min") {
                    const tooSmall = check.inclusive
                        ? input.data < check.value
                        : input.data <= check.value;
                    if (tooSmall) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "number",
                            inclusive: check.inclusive,
                            exact: false,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "max") {
                    const tooBig = check.inclusive
                        ? input.data > check.value
                        : input.data >= check.value;
                    if (tooBig) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "number",
                            inclusive: check.inclusive,
                            exact: false,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "multipleOf") {
                    if (floatSafeRemainder(input.data, check.value) !== 0) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.not_multiple_of,
                            multipleOf: check.value,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "finite") {
                    if (!Number.isFinite(input.data)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.not_finite,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else {
                    util$1.assertNever(check);
                }
            }
            return { status: status.value, value: input.data };
        }
        gte(value, message) {
            return this.setLimit("min", value, true, errorUtil.toString(message));
        }
        gt(value, message) {
            return this.setLimit("min", value, false, errorUtil.toString(message));
        }
        lte(value, message) {
            return this.setLimit("max", value, true, errorUtil.toString(message));
        }
        lt(value, message) {
            return this.setLimit("max", value, false, errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
            return new ZodNumber({
                ...this._def,
                checks: [
                    ...this._def.checks,
                    {
                        kind,
                        value,
                        inclusive,
                        message: errorUtil.toString(message),
                    },
                ],
            });
        }
        _addCheck(check) {
            return new ZodNumber({
                ...this._def,
                checks: [...this._def.checks, check],
            });
        }
        int(message) {
            return this._addCheck({
                kind: "int",
                message: errorUtil.toString(message),
            });
        }
        positive(message) {
            return this._addCheck({
                kind: "min",
                value: 0,
                inclusive: false,
                message: errorUtil.toString(message),
            });
        }
        negative(message) {
            return this._addCheck({
                kind: "max",
                value: 0,
                inclusive: false,
                message: errorUtil.toString(message),
            });
        }
        nonpositive(message) {
            return this._addCheck({
                kind: "max",
                value: 0,
                inclusive: true,
                message: errorUtil.toString(message),
            });
        }
        nonnegative(message) {
            return this._addCheck({
                kind: "min",
                value: 0,
                inclusive: true,
                message: errorUtil.toString(message),
            });
        }
        multipleOf(value, message) {
            return this._addCheck({
                kind: "multipleOf",
                value: value,
                message: errorUtil.toString(message),
            });
        }
        finite(message) {
            return this._addCheck({
                kind: "finite",
                message: errorUtil.toString(message),
            });
        }
        safe(message) {
            return this._addCheck({
                kind: "min",
                inclusive: true,
                value: Number.MIN_SAFE_INTEGER,
                message: errorUtil.toString(message),
            })._addCheck({
                kind: "max",
                inclusive: true,
                value: Number.MAX_SAFE_INTEGER,
                message: errorUtil.toString(message),
            });
        }
        get minValue() {
            let min = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "min") {
                    if (min === null || ch.value > min)
                        min = ch.value;
                }
            }
            return min;
        }
        get maxValue() {
            let max = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "max") {
                    if (max === null || ch.value < max)
                        max = ch.value;
                }
            }
            return max;
        }
        get isInt() {
            return !!this._def.checks.find((ch) => ch.kind === "int" ||
                (ch.kind === "multipleOf" && util$1.isInteger(ch.value)));
        }
        get isFinite() {
            let max = null, min = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "finite" ||
                    ch.kind === "int" ||
                    ch.kind === "multipleOf") {
                    return true;
                }
                else if (ch.kind === "min") {
                    if (min === null || ch.value > min)
                        min = ch.value;
                }
                else if (ch.kind === "max") {
                    if (max === null || ch.value < max)
                        max = ch.value;
                }
            }
            return Number.isFinite(min) && Number.isFinite(max);
        }
    }
    ZodNumber.create = (params) => {
        return new ZodNumber({
            checks: [],
            typeName: ZodFirstPartyTypeKind.ZodNumber,
            coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
            ...processCreateParams(params),
        });
    };
    class ZodBigInt extends ZodType {
        constructor() {
            super(...arguments);
            this.min = this.gte;
            this.max = this.lte;
        }
        _parse(input) {
            if (this._def.coerce) {
                input.data = BigInt(input.data);
            }
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.bigint) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.bigint,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            let ctx = undefined;
            const status = new ParseStatus();
            for (const check of this._def.checks) {
                if (check.kind === "min") {
                    const tooSmall = check.inclusive
                        ? input.data < check.value
                        : input.data <= check.value;
                    if (tooSmall) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            type: "bigint",
                            minimum: check.value,
                            inclusive: check.inclusive,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "max") {
                    const tooBig = check.inclusive
                        ? input.data > check.value
                        : input.data >= check.value;
                    if (tooBig) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            type: "bigint",
                            maximum: check.value,
                            inclusive: check.inclusive,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "multipleOf") {
                    if (input.data % check.value !== BigInt(0)) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.not_multiple_of,
                            multipleOf: check.value,
                            message: check.message,
                        });
                        status.dirty();
                    }
                }
                else {
                    util$1.assertNever(check);
                }
            }
            return { status: status.value, value: input.data };
        }
        gte(value, message) {
            return this.setLimit("min", value, true, errorUtil.toString(message));
        }
        gt(value, message) {
            return this.setLimit("min", value, false, errorUtil.toString(message));
        }
        lte(value, message) {
            return this.setLimit("max", value, true, errorUtil.toString(message));
        }
        lt(value, message) {
            return this.setLimit("max", value, false, errorUtil.toString(message));
        }
        setLimit(kind, value, inclusive, message) {
            return new ZodBigInt({
                ...this._def,
                checks: [
                    ...this._def.checks,
                    {
                        kind,
                        value,
                        inclusive,
                        message: errorUtil.toString(message),
                    },
                ],
            });
        }
        _addCheck(check) {
            return new ZodBigInt({
                ...this._def,
                checks: [...this._def.checks, check],
            });
        }
        positive(message) {
            return this._addCheck({
                kind: "min",
                value: BigInt(0),
                inclusive: false,
                message: errorUtil.toString(message),
            });
        }
        negative(message) {
            return this._addCheck({
                kind: "max",
                value: BigInt(0),
                inclusive: false,
                message: errorUtil.toString(message),
            });
        }
        nonpositive(message) {
            return this._addCheck({
                kind: "max",
                value: BigInt(0),
                inclusive: true,
                message: errorUtil.toString(message),
            });
        }
        nonnegative(message) {
            return this._addCheck({
                kind: "min",
                value: BigInt(0),
                inclusive: true,
                message: errorUtil.toString(message),
            });
        }
        multipleOf(value, message) {
            return this._addCheck({
                kind: "multipleOf",
                value,
                message: errorUtil.toString(message),
            });
        }
        get minValue() {
            let min = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "min") {
                    if (min === null || ch.value > min)
                        min = ch.value;
                }
            }
            return min;
        }
        get maxValue() {
            let max = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "max") {
                    if (max === null || ch.value < max)
                        max = ch.value;
                }
            }
            return max;
        }
    }
    ZodBigInt.create = (params) => {
        var _a;
        return new ZodBigInt({
            checks: [],
            typeName: ZodFirstPartyTypeKind.ZodBigInt,
            coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
            ...processCreateParams(params),
        });
    };
    class ZodBoolean extends ZodType {
        _parse(input) {
            if (this._def.coerce) {
                input.data = Boolean(input.data);
            }
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.boolean) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.boolean,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            return OK(input.data);
        }
    }
    ZodBoolean.create = (params) => {
        return new ZodBoolean({
            typeName: ZodFirstPartyTypeKind.ZodBoolean,
            coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
            ...processCreateParams(params),
        });
    };
    class ZodDate extends ZodType {
        _parse(input) {
            if (this._def.coerce) {
                input.data = new Date(input.data);
            }
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.date) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.date,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            if (isNaN(input.data.getTime())) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_date,
                });
                return INVALID;
            }
            const status = new ParseStatus();
            let ctx = undefined;
            for (const check of this._def.checks) {
                if (check.kind === "min") {
                    if (input.data.getTime() < check.value) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            message: check.message,
                            inclusive: true,
                            exact: false,
                            minimum: check.value,
                            type: "date",
                        });
                        status.dirty();
                    }
                }
                else if (check.kind === "max") {
                    if (input.data.getTime() > check.value) {
                        ctx = this._getOrReturnCtx(input, ctx);
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            message: check.message,
                            inclusive: true,
                            exact: false,
                            maximum: check.value,
                            type: "date",
                        });
                        status.dirty();
                    }
                }
                else {
                    util$1.assertNever(check);
                }
            }
            return {
                status: status.value,
                value: new Date(input.data.getTime()),
            };
        }
        _addCheck(check) {
            return new ZodDate({
                ...this._def,
                checks: [...this._def.checks, check],
            });
        }
        min(minDate, message) {
            return this._addCheck({
                kind: "min",
                value: minDate.getTime(),
                message: errorUtil.toString(message),
            });
        }
        max(maxDate, message) {
            return this._addCheck({
                kind: "max",
                value: maxDate.getTime(),
                message: errorUtil.toString(message),
            });
        }
        get minDate() {
            let min = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "min") {
                    if (min === null || ch.value > min)
                        min = ch.value;
                }
            }
            return min != null ? new Date(min) : null;
        }
        get maxDate() {
            let max = null;
            for (const ch of this._def.checks) {
                if (ch.kind === "max") {
                    if (max === null || ch.value < max)
                        max = ch.value;
                }
            }
            return max != null ? new Date(max) : null;
        }
    }
    ZodDate.create = (params) => {
        return new ZodDate({
            checks: [],
            coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
            typeName: ZodFirstPartyTypeKind.ZodDate,
            ...processCreateParams(params),
        });
    };
    class ZodSymbol extends ZodType {
        _parse(input) {
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.symbol) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.symbol,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            return OK(input.data);
        }
    }
    ZodSymbol.create = (params) => {
        return new ZodSymbol({
            typeName: ZodFirstPartyTypeKind.ZodSymbol,
            ...processCreateParams(params),
        });
    };
    class ZodUndefined extends ZodType {
        _parse(input) {
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.undefined) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.undefined,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            return OK(input.data);
        }
    }
    ZodUndefined.create = (params) => {
        return new ZodUndefined({
            typeName: ZodFirstPartyTypeKind.ZodUndefined,
            ...processCreateParams(params),
        });
    };
    class ZodNull extends ZodType {
        _parse(input) {
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.null) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.null,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            return OK(input.data);
        }
    }
    ZodNull.create = (params) => {
        return new ZodNull({
            typeName: ZodFirstPartyTypeKind.ZodNull,
            ...processCreateParams(params),
        });
    };
    class ZodAny extends ZodType {
        constructor() {
            super(...arguments);
            // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
            this._any = true;
        }
        _parse(input) {
            return OK(input.data);
        }
    }
    ZodAny.create = (params) => {
        return new ZodAny({
            typeName: ZodFirstPartyTypeKind.ZodAny,
            ...processCreateParams(params),
        });
    };
    class ZodUnknown extends ZodType {
        constructor() {
            super(...arguments);
            // required
            this._unknown = true;
        }
        _parse(input) {
            return OK(input.data);
        }
    }
    ZodUnknown.create = (params) => {
        return new ZodUnknown({
            typeName: ZodFirstPartyTypeKind.ZodUnknown,
            ...processCreateParams(params),
        });
    };
    class ZodNever extends ZodType {
        _parse(input) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.never,
                received: ctx.parsedType,
            });
            return INVALID;
        }
    }
    ZodNever.create = (params) => {
        return new ZodNever({
            typeName: ZodFirstPartyTypeKind.ZodNever,
            ...processCreateParams(params),
        });
    };
    class ZodVoid extends ZodType {
        _parse(input) {
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.undefined) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.void,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            return OK(input.data);
        }
    }
    ZodVoid.create = (params) => {
        return new ZodVoid({
            typeName: ZodFirstPartyTypeKind.ZodVoid,
            ...processCreateParams(params),
        });
    };
    class ZodArray extends ZodType {
        _parse(input) {
            const { ctx, status } = this._processInputParams(input);
            const def = this._def;
            if (ctx.parsedType !== ZodParsedType.array) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.array,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            if (def.exactLength !== null) {
                const tooBig = ctx.data.length > def.exactLength.value;
                const tooSmall = ctx.data.length < def.exactLength.value;
                if (tooBig || tooSmall) {
                    addIssueToContext(ctx, {
                        code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                        minimum: (tooSmall ? def.exactLength.value : undefined),
                        maximum: (tooBig ? def.exactLength.value : undefined),
                        type: "array",
                        inclusive: true,
                        exact: true,
                        message: def.exactLength.message,
                    });
                    status.dirty();
                }
            }
            if (def.minLength !== null) {
                if (ctx.data.length < def.minLength.value) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: def.minLength.value,
                        type: "array",
                        inclusive: true,
                        exact: false,
                        message: def.minLength.message,
                    });
                    status.dirty();
                }
            }
            if (def.maxLength !== null) {
                if (ctx.data.length > def.maxLength.value) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: def.maxLength.value,
                        type: "array",
                        inclusive: true,
                        exact: false,
                        message: def.maxLength.message,
                    });
                    status.dirty();
                }
            }
            if (ctx.common.async) {
                return Promise.all([...ctx.data].map((item, i) => {
                    return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
                })).then((result) => {
                    return ParseStatus.mergeArray(status, result);
                });
            }
            const result = [...ctx.data].map((item, i) => {
                return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            });
            return ParseStatus.mergeArray(status, result);
        }
        get element() {
            return this._def.type;
        }
        min(minLength, message) {
            return new ZodArray({
                ...this._def,
                minLength: { value: minLength, message: errorUtil.toString(message) },
            });
        }
        max(maxLength, message) {
            return new ZodArray({
                ...this._def,
                maxLength: { value: maxLength, message: errorUtil.toString(message) },
            });
        }
        length(len, message) {
            return new ZodArray({
                ...this._def,
                exactLength: { value: len, message: errorUtil.toString(message) },
            });
        }
        nonempty(message) {
            return this.min(1, message);
        }
    }
    ZodArray.create = (schema, params) => {
        return new ZodArray({
            type: schema,
            minLength: null,
            maxLength: null,
            exactLength: null,
            typeName: ZodFirstPartyTypeKind.ZodArray,
            ...processCreateParams(params),
        });
    };
    function deepPartialify(schema) {
        if (schema instanceof ZodObject) {
            const newShape = {};
            for (const key in schema.shape) {
                const fieldSchema = schema.shape[key];
                newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
            }
            return new ZodObject({
                ...schema._def,
                shape: () => newShape,
            });
        }
        else if (schema instanceof ZodArray) {
            return new ZodArray({
                ...schema._def,
                type: deepPartialify(schema.element),
            });
        }
        else if (schema instanceof ZodOptional) {
            return ZodOptional.create(deepPartialify(schema.unwrap()));
        }
        else if (schema instanceof ZodNullable) {
            return ZodNullable.create(deepPartialify(schema.unwrap()));
        }
        else if (schema instanceof ZodTuple) {
            return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
        }
        else {
            return schema;
        }
    }
    class ZodObject extends ZodType {
        constructor() {
            super(...arguments);
            this._cached = null;
            /**
             * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
             * If you want to pass through unknown properties, use `.passthrough()` instead.
             */
            this.nonstrict = this.passthrough;
            // extend<
            //   Augmentation extends ZodRawShape,
            //   NewOutput extends util.flatten<{
            //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
            //       ? Augmentation[k]["_output"]
            //       : k extends keyof Output
            //       ? Output[k]
            //       : never;
            //   }>,
            //   NewInput extends util.flatten<{
            //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
            //       ? Augmentation[k]["_input"]
            //       : k extends keyof Input
            //       ? Input[k]
            //       : never;
            //   }>
            // >(
            //   augmentation: Augmentation
            // ): ZodObject<
            //   extendShape<T, Augmentation>,
            //   UnknownKeys,
            //   Catchall,
            //   NewOutput,
            //   NewInput
            // > {
            //   return new ZodObject({
            //     ...this._def,
            //     shape: () => ({
            //       ...this._def.shape(),
            //       ...augmentation,
            //     }),
            //   }) as any;
            // }
            /**
             * @deprecated Use `.extend` instead
             *  */
            this.augment = this.extend;
        }
        _getCached() {
            if (this._cached !== null)
                return this._cached;
            const shape = this._def.shape();
            const keys = util$1.objectKeys(shape);
            return (this._cached = { shape, keys });
        }
        _parse(input) {
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.object) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.object,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            const { status, ctx } = this._processInputParams(input);
            const { shape, keys: shapeKeys } = this._getCached();
            const extraKeys = [];
            if (!(this._def.catchall instanceof ZodNever &&
                this._def.unknownKeys === "strip")) {
                for (const key in ctx.data) {
                    if (!shapeKeys.includes(key)) {
                        extraKeys.push(key);
                    }
                }
            }
            const pairs = [];
            for (const key of shapeKeys) {
                const keyValidator = shape[key];
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                    alwaysSet: key in ctx.data,
                });
            }
            if (this._def.catchall instanceof ZodNever) {
                const unknownKeys = this._def.unknownKeys;
                if (unknownKeys === "passthrough") {
                    for (const key of extraKeys) {
                        pairs.push({
                            key: { status: "valid", value: key },
                            value: { status: "valid", value: ctx.data[key] },
                        });
                    }
                }
                else if (unknownKeys === "strict") {
                    if (extraKeys.length > 0) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.unrecognized_keys,
                            keys: extraKeys,
                        });
                        status.dirty();
                    }
                }
                else if (unknownKeys === "strip") ;
                else {
                    throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
                }
            }
            else {
                // run catchall validation
                const catchall = this._def.catchall;
                for (const key of extraKeys) {
                    const value = ctx.data[key];
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                        ),
                        alwaysSet: key in ctx.data,
                    });
                }
            }
            if (ctx.common.async) {
                return Promise.resolve()
                    .then(async () => {
                    const syncPairs = [];
                    for (const pair of pairs) {
                        const key = await pair.key;
                        syncPairs.push({
                            key,
                            value: await pair.value,
                            alwaysSet: pair.alwaysSet,
                        });
                    }
                    return syncPairs;
                })
                    .then((syncPairs) => {
                    return ParseStatus.mergeObjectSync(status, syncPairs);
                });
            }
            else {
                return ParseStatus.mergeObjectSync(status, pairs);
            }
        }
        get shape() {
            return this._def.shape();
        }
        strict(message) {
            errorUtil.errToObj;
            return new ZodObject({
                ...this._def,
                unknownKeys: "strict",
                ...(message !== undefined
                    ? {
                        errorMap: (issue, ctx) => {
                            var _a, _b, _c, _d;
                            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                            if (issue.code === "unrecognized_keys")
                                return {
                                    message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                                };
                            return {
                                message: defaultError,
                            };
                        },
                    }
                    : {}),
            });
        }
        strip() {
            return new ZodObject({
                ...this._def,
                unknownKeys: "strip",
            });
        }
        passthrough() {
            return new ZodObject({
                ...this._def,
                unknownKeys: "passthrough",
            });
        }
        // const AugmentFactory =
        //   <Def extends ZodObjectDef>(def: Def) =>
        //   <Augmentation extends ZodRawShape>(
        //     augmentation: Augmentation
        //   ): ZodObject<
        //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
        //     Def["unknownKeys"],
        //     Def["catchall"]
        //   > => {
        //     return new ZodObject({
        //       ...def,
        //       shape: () => ({
        //         ...def.shape(),
        //         ...augmentation,
        //       }),
        //     }) as any;
        //   };
        extend(augmentation) {
            return new ZodObject({
                ...this._def,
                shape: () => ({
                    ...this._def.shape(),
                    ...augmentation,
                }),
            });
        }
        /**
         * Prior to zod@1.0.12 there was a bug in the
         * inferred type of merged objects. Please
         * upgrade if you are experiencing issues.
         */
        merge(merging) {
            const merged = new ZodObject({
                unknownKeys: merging._def.unknownKeys,
                catchall: merging._def.catchall,
                shape: () => ({
                    ...this._def.shape(),
                    ...merging._def.shape(),
                }),
                typeName: ZodFirstPartyTypeKind.ZodObject,
            });
            return merged;
        }
        // merge<
        //   Incoming extends AnyZodObject,
        //   Augmentation extends Incoming["shape"],
        //   NewOutput extends {
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   },
        //   NewInput extends {
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }
        // >(
        //   merging: Incoming
        // ): ZodObject<
        //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
        //   Incoming["_def"]["unknownKeys"],
        //   Incoming["_def"]["catchall"],
        //   NewOutput,
        //   NewInput
        // > {
        //   const merged: any = new ZodObject({
        //     unknownKeys: merging._def.unknownKeys,
        //     catchall: merging._def.catchall,
        //     shape: () =>
        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
        //     typeName: ZodFirstPartyTypeKind.ZodObject,
        //   }) as any;
        //   return merged;
        // }
        setKey(key, schema) {
            return this.augment({ [key]: schema });
        }
        // merge<Incoming extends AnyZodObject>(
        //   merging: Incoming
        // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
        // ZodObject<
        //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
        //   Incoming["_def"]["unknownKeys"],
        //   Incoming["_def"]["catchall"]
        // > {
        //   // const mergedShape = objectUtil.mergeShapes(
        //   //   this._def.shape(),
        //   //   merging._def.shape()
        //   // );
        //   const merged: any = new ZodObject({
        //     unknownKeys: merging._def.unknownKeys,
        //     catchall: merging._def.catchall,
        //     shape: () =>
        //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
        //     typeName: ZodFirstPartyTypeKind.ZodObject,
        //   }) as any;
        //   return merged;
        // }
        catchall(index) {
            return new ZodObject({
                ...this._def,
                catchall: index,
            });
        }
        pick(mask) {
            const shape = {};
            util$1.objectKeys(mask).forEach((key) => {
                if (mask[key] && this.shape[key]) {
                    shape[key] = this.shape[key];
                }
            });
            return new ZodObject({
                ...this._def,
                shape: () => shape,
            });
        }
        omit(mask) {
            const shape = {};
            util$1.objectKeys(this.shape).forEach((key) => {
                if (!mask[key]) {
                    shape[key] = this.shape[key];
                }
            });
            return new ZodObject({
                ...this._def,
                shape: () => shape,
            });
        }
        /**
         * @deprecated
         */
        deepPartial() {
            return deepPartialify(this);
        }
        partial(mask) {
            const newShape = {};
            util$1.objectKeys(this.shape).forEach((key) => {
                const fieldSchema = this.shape[key];
                if (mask && !mask[key]) {
                    newShape[key] = fieldSchema;
                }
                else {
                    newShape[key] = fieldSchema.optional();
                }
            });
            return new ZodObject({
                ...this._def,
                shape: () => newShape,
            });
        }
        required(mask) {
            const newShape = {};
            util$1.objectKeys(this.shape).forEach((key) => {
                if (mask && !mask[key]) {
                    newShape[key] = this.shape[key];
                }
                else {
                    const fieldSchema = this.shape[key];
                    let newField = fieldSchema;
                    while (newField instanceof ZodOptional) {
                        newField = newField._def.innerType;
                    }
                    newShape[key] = newField;
                }
            });
            return new ZodObject({
                ...this._def,
                shape: () => newShape,
            });
        }
        keyof() {
            return createZodEnum(util$1.objectKeys(this.shape));
        }
    }
    ZodObject.create = (shape, params) => {
        return new ZodObject({
            shape: () => shape,
            unknownKeys: "strip",
            catchall: ZodNever.create(),
            typeName: ZodFirstPartyTypeKind.ZodObject,
            ...processCreateParams(params),
        });
    };
    ZodObject.strictCreate = (shape, params) => {
        return new ZodObject({
            shape: () => shape,
            unknownKeys: "strict",
            catchall: ZodNever.create(),
            typeName: ZodFirstPartyTypeKind.ZodObject,
            ...processCreateParams(params),
        });
    };
    ZodObject.lazycreate = (shape, params) => {
        return new ZodObject({
            shape,
            unknownKeys: "strip",
            catchall: ZodNever.create(),
            typeName: ZodFirstPartyTypeKind.ZodObject,
            ...processCreateParams(params),
        });
    };
    class ZodUnion extends ZodType {
        _parse(input) {
            const { ctx } = this._processInputParams(input);
            const options = this._def.options;
            function handleResults(results) {
                // return first issue-free validation if it exists
                for (const result of results) {
                    if (result.result.status === "valid") {
                        return result.result;
                    }
                }
                for (const result of results) {
                    if (result.result.status === "dirty") {
                        // add issues from dirty option
                        ctx.common.issues.push(...result.ctx.common.issues);
                        return result.result;
                    }
                }
                // return invalid
                const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_union,
                    unionErrors,
                });
                return INVALID;
            }
            if (ctx.common.async) {
                return Promise.all(options.map(async (option) => {
                    const childCtx = {
                        ...ctx,
                        common: {
                            ...ctx.common,
                            issues: [],
                        },
                        parent: null,
                    };
                    return {
                        result: await option._parseAsync({
                            data: ctx.data,
                            path: ctx.path,
                            parent: childCtx,
                        }),
                        ctx: childCtx,
                    };
                })).then(handleResults);
            }
            else {
                let dirty = undefined;
                const issues = [];
                for (const option of options) {
                    const childCtx = {
                        ...ctx,
                        common: {
                            ...ctx.common,
                            issues: [],
                        },
                        parent: null,
                    };
                    const result = option._parseSync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    });
                    if (result.status === "valid") {
                        return result;
                    }
                    else if (result.status === "dirty" && !dirty) {
                        dirty = { result, ctx: childCtx };
                    }
                    if (childCtx.common.issues.length) {
                        issues.push(childCtx.common.issues);
                    }
                }
                if (dirty) {
                    ctx.common.issues.push(...dirty.ctx.common.issues);
                    return dirty.result;
                }
                const unionErrors = issues.map((issues) => new ZodError(issues));
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_union,
                    unionErrors,
                });
                return INVALID;
            }
        }
        get options() {
            return this._def.options;
        }
    }
    ZodUnion.create = (types, params) => {
        return new ZodUnion({
            options: types,
            typeName: ZodFirstPartyTypeKind.ZodUnion,
            ...processCreateParams(params),
        });
    };
    /////////////////////////////////////////////////////
    /////////////////////////////////////////////////////
    //////////                                 //////////
    //////////      ZodDiscriminatedUnion      //////////
    //////////                                 //////////
    /////////////////////////////////////////////////////
    /////////////////////////////////////////////////////
    const getDiscriminator = (type) => {
        if (type instanceof ZodLazy) {
            return getDiscriminator(type.schema);
        }
        else if (type instanceof ZodEffects) {
            return getDiscriminator(type.innerType());
        }
        else if (type instanceof ZodLiteral) {
            return [type.value];
        }
        else if (type instanceof ZodEnum) {
            return type.options;
        }
        else if (type instanceof ZodNativeEnum) {
            // eslint-disable-next-line ban/ban
            return Object.keys(type.enum);
        }
        else if (type instanceof ZodDefault) {
            return getDiscriminator(type._def.innerType);
        }
        else if (type instanceof ZodUndefined) {
            return [undefined];
        }
        else if (type instanceof ZodNull) {
            return [null];
        }
        else {
            return null;
        }
    };
    class ZodDiscriminatedUnion extends ZodType {
        _parse(input) {
            const { ctx } = this._processInputParams(input);
            if (ctx.parsedType !== ZodParsedType.object) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.object,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            const discriminator = this.discriminator;
            const discriminatorValue = ctx.data[discriminator];
            const option = this.optionsMap.get(discriminatorValue);
            if (!option) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_union_discriminator,
                    options: Array.from(this.optionsMap.keys()),
                    path: [discriminator],
                });
                return INVALID;
            }
            if (ctx.common.async) {
                return option._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
            }
            else {
                return option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
        get discriminator() {
            return this._def.discriminator;
        }
        get options() {
            return this._def.options;
        }
        get optionsMap() {
            return this._def.optionsMap;
        }
        /**
         * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
         * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
         * have a different value for each object in the union.
         * @param discriminator the name of the discriminator property
         * @param types an array of object schemas
         * @param params
         */
        static create(discriminator, options, params) {
            // Get all the valid discriminator values
            const optionsMap = new Map();
            // try {
            for (const type of options) {
                const discriminatorValues = getDiscriminator(type.shape[discriminator]);
                if (!discriminatorValues) {
                    throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
                }
                for (const value of discriminatorValues) {
                    if (optionsMap.has(value)) {
                        throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                    }
                    optionsMap.set(value, type);
                }
            }
            return new ZodDiscriminatedUnion({
                typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
                discriminator,
                options,
                optionsMap,
                ...processCreateParams(params),
            });
        }
    }
    function mergeValues(a, b) {
        const aType = getParsedType(a);
        const bType = getParsedType(b);
        if (a === b) {
            return { valid: true, data: a };
        }
        else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
            const bKeys = util$1.objectKeys(b);
            const sharedKeys = util$1
                .objectKeys(a)
                .filter((key) => bKeys.indexOf(key) !== -1);
            const newObj = { ...a, ...b };
            for (const key of sharedKeys) {
                const sharedValue = mergeValues(a[key], b[key]);
                if (!sharedValue.valid) {
                    return { valid: false };
                }
                newObj[key] = sharedValue.data;
            }
            return { valid: true, data: newObj };
        }
        else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
            if (a.length !== b.length) {
                return { valid: false };
            }
            const newArray = [];
            for (let index = 0; index < a.length; index++) {
                const itemA = a[index];
                const itemB = b[index];
                const sharedValue = mergeValues(itemA, itemB);
                if (!sharedValue.valid) {
                    return { valid: false };
                }
                newArray.push(sharedValue.data);
            }
            return { valid: true, data: newArray };
        }
        else if (aType === ZodParsedType.date &&
            bType === ZodParsedType.date &&
            +a === +b) {
            return { valid: true, data: a };
        }
        else {
            return { valid: false };
        }
    }
    class ZodIntersection extends ZodType {
        _parse(input) {
            const { status, ctx } = this._processInputParams(input);
            const handleParsed = (parsedLeft, parsedRight) => {
                if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                    return INVALID;
                }
                const merged = mergeValues(parsedLeft.value, parsedRight.value);
                if (!merged.valid) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_intersection_types,
                    });
                    return INVALID;
                }
                if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                    status.dirty();
                }
                return { status: status.value, value: merged.data };
            };
            if (ctx.common.async) {
                return Promise.all([
                    this._def.left._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: ctx,
                    }),
                    this._def.right._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: ctx,
                    }),
                ]).then(([left, right]) => handleParsed(left, right));
            }
            else {
                return handleParsed(this._def.left._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }), this._def.right._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }));
            }
        }
    }
    ZodIntersection.create = (left, right, params) => {
        return new ZodIntersection({
            left: left,
            right: right,
            typeName: ZodFirstPartyTypeKind.ZodIntersection,
            ...processCreateParams(params),
        });
    };
    class ZodTuple extends ZodType {
        _parse(input) {
            const { status, ctx } = this._processInputParams(input);
            if (ctx.parsedType !== ZodParsedType.array) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.array,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            if (ctx.data.length < this._def.items.length) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: this._def.items.length,
                    inclusive: true,
                    exact: false,
                    type: "array",
                });
                return INVALID;
            }
            const rest = this._def.rest;
            if (!rest && ctx.data.length > this._def.items.length) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: this._def.items.length,
                    inclusive: true,
                    exact: false,
                    type: "array",
                });
                status.dirty();
            }
            const items = [...ctx.data]
                .map((item, itemIndex) => {
                const schema = this._def.items[itemIndex] || this._def.rest;
                if (!schema)
                    return null;
                return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
            })
                .filter((x) => !!x); // filter nulls
            if (ctx.common.async) {
                return Promise.all(items).then((results) => {
                    return ParseStatus.mergeArray(status, results);
                });
            }
            else {
                return ParseStatus.mergeArray(status, items);
            }
        }
        get items() {
            return this._def.items;
        }
        rest(rest) {
            return new ZodTuple({
                ...this._def,
                rest,
            });
        }
    }
    ZodTuple.create = (schemas, params) => {
        if (!Array.isArray(schemas)) {
            throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
        }
        return new ZodTuple({
            items: schemas,
            typeName: ZodFirstPartyTypeKind.ZodTuple,
            rest: null,
            ...processCreateParams(params),
        });
    };
    class ZodRecord extends ZodType {
        get keySchema() {
            return this._def.keyType;
        }
        get valueSchema() {
            return this._def.valueType;
        }
        _parse(input) {
            const { status, ctx } = this._processInputParams(input);
            if (ctx.parsedType !== ZodParsedType.object) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.object,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            const pairs = [];
            const keyType = this._def.keyType;
            const valueType = this._def.valueType;
            for (const key in ctx.data) {
                pairs.push({
                    key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                    value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
                });
            }
            if (ctx.common.async) {
                return ParseStatus.mergeObjectAsync(status, pairs);
            }
            else {
                return ParseStatus.mergeObjectSync(status, pairs);
            }
        }
        get element() {
            return this._def.valueType;
        }
        static create(first, second, third) {
            if (second instanceof ZodType) {
                return new ZodRecord({
                    keyType: first,
                    valueType: second,
                    typeName: ZodFirstPartyTypeKind.ZodRecord,
                    ...processCreateParams(third),
                });
            }
            return new ZodRecord({
                keyType: ZodString.create(),
                valueType: first,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(second),
            });
        }
    }
    class ZodMap extends ZodType {
        _parse(input) {
            const { status, ctx } = this._processInputParams(input);
            if (ctx.parsedType !== ZodParsedType.map) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.map,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            const keyType = this._def.keyType;
            const valueType = this._def.valueType;
            const pairs = [...ctx.data.entries()].map(([key, value], index) => {
                return {
                    key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                    value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
                };
            });
            if (ctx.common.async) {
                const finalMap = new Map();
                return Promise.resolve().then(async () => {
                    for (const pair of pairs) {
                        const key = await pair.key;
                        const value = await pair.value;
                        if (key.status === "aborted" || value.status === "aborted") {
                            return INVALID;
                        }
                        if (key.status === "dirty" || value.status === "dirty") {
                            status.dirty();
                        }
                        finalMap.set(key.value, value.value);
                    }
                    return { status: status.value, value: finalMap };
                });
            }
            else {
                const finalMap = new Map();
                for (const pair of pairs) {
                    const key = pair.key;
                    const value = pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            }
        }
    }
    ZodMap.create = (keyType, valueType, params) => {
        return new ZodMap({
            valueType,
            keyType,
            typeName: ZodFirstPartyTypeKind.ZodMap,
            ...processCreateParams(params),
        });
    };
    class ZodSet extends ZodType {
        _parse(input) {
            const { status, ctx } = this._processInputParams(input);
            if (ctx.parsedType !== ZodParsedType.set) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.set,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            const def = this._def;
            if (def.minSize !== null) {
                if (ctx.data.size < def.minSize.value) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: def.minSize.value,
                        type: "set",
                        inclusive: true,
                        exact: false,
                        message: def.minSize.message,
                    });
                    status.dirty();
                }
            }
            if (def.maxSize !== null) {
                if (ctx.data.size > def.maxSize.value) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: def.maxSize.value,
                        type: "set",
                        inclusive: true,
                        exact: false,
                        message: def.maxSize.message,
                    });
                    status.dirty();
                }
            }
            const valueType = this._def.valueType;
            function finalizeSet(elements) {
                const parsedSet = new Set();
                for (const element of elements) {
                    if (element.status === "aborted")
                        return INVALID;
                    if (element.status === "dirty")
                        status.dirty();
                    parsedSet.add(element.value);
                }
                return { status: status.value, value: parsedSet };
            }
            const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
            if (ctx.common.async) {
                return Promise.all(elements).then((elements) => finalizeSet(elements));
            }
            else {
                return finalizeSet(elements);
            }
        }
        min(minSize, message) {
            return new ZodSet({
                ...this._def,
                minSize: { value: minSize, message: errorUtil.toString(message) },
            });
        }
        max(maxSize, message) {
            return new ZodSet({
                ...this._def,
                maxSize: { value: maxSize, message: errorUtil.toString(message) },
            });
        }
        size(size, message) {
            return this.min(size, message).max(size, message);
        }
        nonempty(message) {
            return this.min(1, message);
        }
    }
    ZodSet.create = (valueType, params) => {
        return new ZodSet({
            valueType,
            minSize: null,
            maxSize: null,
            typeName: ZodFirstPartyTypeKind.ZodSet,
            ...processCreateParams(params),
        });
    };
    class ZodFunction extends ZodType {
        constructor() {
            super(...arguments);
            this.validate = this.implement;
        }
        _parse(input) {
            const { ctx } = this._processInputParams(input);
            if (ctx.parsedType !== ZodParsedType.function) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.function,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            function makeArgsIssue(args, error) {
                return makeIssue({
                    data: args,
                    path: ctx.path,
                    errorMaps: [
                        ctx.common.contextualErrorMap,
                        ctx.schemaErrorMap,
                        getErrorMap(),
                        errorMap,
                    ].filter((x) => !!x),
                    issueData: {
                        code: ZodIssueCode.invalid_arguments,
                        argumentsError: error,
                    },
                });
            }
            function makeReturnsIssue(returns, error) {
                return makeIssue({
                    data: returns,
                    path: ctx.path,
                    errorMaps: [
                        ctx.common.contextualErrorMap,
                        ctx.schemaErrorMap,
                        getErrorMap(),
                        errorMap,
                    ].filter((x) => !!x),
                    issueData: {
                        code: ZodIssueCode.invalid_return_type,
                        returnTypeError: error,
                    },
                });
            }
            const params = { errorMap: ctx.common.contextualErrorMap };
            const fn = ctx.data;
            if (this._def.returns instanceof ZodPromise) {
                return OK(async (...args) => {
                    const error = new ZodError([]);
                    const parsedArgs = await this._def.args
                        .parseAsync(args, params)
                        .catch((e) => {
                        error.addIssue(makeArgsIssue(args, e));
                        throw error;
                    });
                    const result = await fn(...parsedArgs);
                    const parsedReturns = await this._def.returns._def.type
                        .parseAsync(result, params)
                        .catch((e) => {
                        error.addIssue(makeReturnsIssue(result, e));
                        throw error;
                    });
                    return parsedReturns;
                });
            }
            else {
                return OK((...args) => {
                    const parsedArgs = this._def.args.safeParse(args, params);
                    if (!parsedArgs.success) {
                        throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                    }
                    const result = fn(...parsedArgs.data);
                    const parsedReturns = this._def.returns.safeParse(result, params);
                    if (!parsedReturns.success) {
                        throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                    }
                    return parsedReturns.data;
                });
            }
        }
        parameters() {
            return this._def.args;
        }
        returnType() {
            return this._def.returns;
        }
        args(...items) {
            return new ZodFunction({
                ...this._def,
                args: ZodTuple.create(items).rest(ZodUnknown.create()),
            });
        }
        returns(returnType) {
            return new ZodFunction({
                ...this._def,
                returns: returnType,
            });
        }
        implement(func) {
            const validatedFunc = this.parse(func);
            return validatedFunc;
        }
        strictImplement(func) {
            const validatedFunc = this.parse(func);
            return validatedFunc;
        }
        static create(args, returns, params) {
            return new ZodFunction({
                args: (args
                    ? args
                    : ZodTuple.create([]).rest(ZodUnknown.create())),
                returns: returns || ZodUnknown.create(),
                typeName: ZodFirstPartyTypeKind.ZodFunction,
                ...processCreateParams(params),
            });
        }
    }
    class ZodLazy extends ZodType {
        get schema() {
            return this._def.getter();
        }
        _parse(input) {
            const { ctx } = this._processInputParams(input);
            const lazySchema = this._def.getter();
            return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
        }
    }
    ZodLazy.create = (getter, params) => {
        return new ZodLazy({
            getter: getter,
            typeName: ZodFirstPartyTypeKind.ZodLazy,
            ...processCreateParams(params),
        });
    };
    class ZodLiteral extends ZodType {
        _parse(input) {
            if (input.data !== this._def.value) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    received: ctx.data,
                    code: ZodIssueCode.invalid_literal,
                    expected: this._def.value,
                });
                return INVALID;
            }
            return { status: "valid", value: input.data };
        }
        get value() {
            return this._def.value;
        }
    }
    ZodLiteral.create = (value, params) => {
        return new ZodLiteral({
            value: value,
            typeName: ZodFirstPartyTypeKind.ZodLiteral,
            ...processCreateParams(params),
        });
    };
    function createZodEnum(values, params) {
        return new ZodEnum({
            values: values,
            typeName: ZodFirstPartyTypeKind.ZodEnum,
            ...processCreateParams(params),
        });
    }
    class ZodEnum extends ZodType {
        _parse(input) {
            if (typeof input.data !== "string") {
                const ctx = this._getOrReturnCtx(input);
                const expectedValues = this._def.values;
                addIssueToContext(ctx, {
                    expected: util$1.joinValues(expectedValues),
                    received: ctx.parsedType,
                    code: ZodIssueCode.invalid_type,
                });
                return INVALID;
            }
            if (this._def.values.indexOf(input.data) === -1) {
                const ctx = this._getOrReturnCtx(input);
                const expectedValues = this._def.values;
                addIssueToContext(ctx, {
                    received: ctx.data,
                    code: ZodIssueCode.invalid_enum_value,
                    options: expectedValues,
                });
                return INVALID;
            }
            return OK(input.data);
        }
        get options() {
            return this._def.values;
        }
        get enum() {
            const enumValues = {};
            for (const val of this._def.values) {
                enumValues[val] = val;
            }
            return enumValues;
        }
        get Values() {
            const enumValues = {};
            for (const val of this._def.values) {
                enumValues[val] = val;
            }
            return enumValues;
        }
        get Enum() {
            const enumValues = {};
            for (const val of this._def.values) {
                enumValues[val] = val;
            }
            return enumValues;
        }
        extract(values) {
            return ZodEnum.create(values);
        }
        exclude(values) {
            return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
        }
    }
    ZodEnum.create = createZodEnum;
    class ZodNativeEnum extends ZodType {
        _parse(input) {
            const nativeEnumValues = util$1.getValidEnumValues(this._def.values);
            const ctx = this._getOrReturnCtx(input);
            if (ctx.parsedType !== ZodParsedType.string &&
                ctx.parsedType !== ZodParsedType.number) {
                const expectedValues = util$1.objectValues(nativeEnumValues);
                addIssueToContext(ctx, {
                    expected: util$1.joinValues(expectedValues),
                    received: ctx.parsedType,
                    code: ZodIssueCode.invalid_type,
                });
                return INVALID;
            }
            if (nativeEnumValues.indexOf(input.data) === -1) {
                const expectedValues = util$1.objectValues(nativeEnumValues);
                addIssueToContext(ctx, {
                    received: ctx.data,
                    code: ZodIssueCode.invalid_enum_value,
                    options: expectedValues,
                });
                return INVALID;
            }
            return OK(input.data);
        }
        get enum() {
            return this._def.values;
        }
    }
    ZodNativeEnum.create = (values, params) => {
        return new ZodNativeEnum({
            values: values,
            typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
            ...processCreateParams(params),
        });
    };
    class ZodPromise extends ZodType {
        unwrap() {
            return this._def.type;
        }
        _parse(input) {
            const { ctx } = this._processInputParams(input);
            if (ctx.parsedType !== ZodParsedType.promise &&
                ctx.common.async === false) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.promise,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            const promisified = ctx.parsedType === ZodParsedType.promise
                ? ctx.data
                : Promise.resolve(ctx.data);
            return OK(promisified.then((data) => {
                return this._def.type.parseAsync(data, {
                    path: ctx.path,
                    errorMap: ctx.common.contextualErrorMap,
                });
            }));
        }
    }
    ZodPromise.create = (schema, params) => {
        return new ZodPromise({
            type: schema,
            typeName: ZodFirstPartyTypeKind.ZodPromise,
            ...processCreateParams(params),
        });
    };
    class ZodEffects extends ZodType {
        innerType() {
            return this._def.schema;
        }
        sourceType() {
            return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
                ? this._def.schema.sourceType()
                : this._def.schema;
        }
        _parse(input) {
            const { status, ctx } = this._processInputParams(input);
            const effect = this._def.effect || null;
            if (effect.type === "preprocess") {
                const processed = effect.transform(ctx.data);
                if (ctx.common.async) {
                    return Promise.resolve(processed).then((processed) => {
                        return this._def.schema._parseAsync({
                            data: processed,
                            path: ctx.path,
                            parent: ctx,
                        });
                    });
                }
                else {
                    return this._def.schema._parseSync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                }
            }
            const checkCtx = {
                addIssue: (arg) => {
                    addIssueToContext(ctx, arg);
                    if (arg.fatal) {
                        status.abort();
                    }
                    else {
                        status.dirty();
                    }
                },
                get path() {
                    return ctx.path;
                },
            };
            checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
            if (effect.type === "refinement") {
                const executeRefinement = (acc
                // effect: RefinementEffect<any>
                ) => {
                    const result = effect.refinement(acc, checkCtx);
                    if (ctx.common.async) {
                        return Promise.resolve(result);
                    }
                    if (result instanceof Promise) {
                        throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                    }
                    return acc;
                };
                if (ctx.common.async === false) {
                    const inner = this._def.schema._parseSync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: ctx,
                    });
                    if (inner.status === "aborted")
                        return INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    // return value is ignored
                    executeRefinement(inner.value);
                    return { status: status.value, value: inner.value };
                }
                else {
                    return this._def.schema
                        ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                        .then((inner) => {
                        if (inner.status === "aborted")
                            return INVALID;
                        if (inner.status === "dirty")
                            status.dirty();
                        return executeRefinement(inner.value).then(() => {
                            return { status: status.value, value: inner.value };
                        });
                    });
                }
            }
            if (effect.type === "transform") {
                if (ctx.common.async === false) {
                    const base = this._def.schema._parseSync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: ctx,
                    });
                    if (!isValid(base))
                        return base;
                    const result = effect.transform(base.value, checkCtx);
                    if (result instanceof Promise) {
                        throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                    }
                    return { status: status.value, value: result };
                }
                else {
                    return this._def.schema
                        ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                        .then((base) => {
                        if (!isValid(base))
                            return base;
                        return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                    });
                }
            }
            util$1.assertNever(effect);
        }
    }
    ZodEffects.create = (schema, effect, params) => {
        return new ZodEffects({
            schema,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect,
            ...processCreateParams(params),
        });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
        return new ZodEffects({
            schema,
            effect: { type: "preprocess", transform: preprocess },
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            ...processCreateParams(params),
        });
    };
    class ZodOptional extends ZodType {
        _parse(input) {
            const parsedType = this._getType(input);
            if (parsedType === ZodParsedType.undefined) {
                return OK(undefined);
            }
            return this._def.innerType._parse(input);
        }
        unwrap() {
            return this._def.innerType;
        }
    }
    ZodOptional.create = (type, params) => {
        return new ZodOptional({
            innerType: type,
            typeName: ZodFirstPartyTypeKind.ZodOptional,
            ...processCreateParams(params),
        });
    };
    class ZodNullable extends ZodType {
        _parse(input) {
            const parsedType = this._getType(input);
            if (parsedType === ZodParsedType.null) {
                return OK(null);
            }
            return this._def.innerType._parse(input);
        }
        unwrap() {
            return this._def.innerType;
        }
    }
    ZodNullable.create = (type, params) => {
        return new ZodNullable({
            innerType: type,
            typeName: ZodFirstPartyTypeKind.ZodNullable,
            ...processCreateParams(params),
        });
    };
    class ZodDefault extends ZodType {
        _parse(input) {
            const { ctx } = this._processInputParams(input);
            let data = ctx.data;
            if (ctx.parsedType === ZodParsedType.undefined) {
                data = this._def.defaultValue();
            }
            return this._def.innerType._parse({
                data,
                path: ctx.path,
                parent: ctx,
            });
        }
        removeDefault() {
            return this._def.innerType;
        }
    }
    ZodDefault.create = (type, params) => {
        return new ZodDefault({
            innerType: type,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
            defaultValue: typeof params.default === "function"
                ? params.default
                : () => params.default,
            ...processCreateParams(params),
        });
    };
    class ZodCatch extends ZodType {
        _parse(input) {
            const { ctx } = this._processInputParams(input);
            // newCtx is used to not collect issues from inner types in ctx
            const newCtx = {
                ...ctx,
                common: {
                    ...ctx.common,
                    issues: [],
                },
            };
            const result = this._def.innerType._parse({
                data: newCtx.data,
                path: newCtx.path,
                parent: {
                    ...newCtx,
                },
            });
            if (isAsync(result)) {
                return result.then((result) => {
                    return {
                        status: "valid",
                        value: result.status === "valid"
                            ? result.value
                            : this._def.catchValue({
                                get error() {
                                    return new ZodError(newCtx.common.issues);
                                },
                                input: newCtx.data,
                            }),
                    };
                });
            }
            else {
                return {
                    status: "valid",
                    value: result.status === "valid"
                        ? result.value
                        : this._def.catchValue({
                            get error() {
                                return new ZodError(newCtx.common.issues);
                            },
                            input: newCtx.data,
                        }),
                };
            }
        }
        removeCatch() {
            return this._def.innerType;
        }
    }
    ZodCatch.create = (type, params) => {
        return new ZodCatch({
            innerType: type,
            typeName: ZodFirstPartyTypeKind.ZodCatch,
            catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
            ...processCreateParams(params),
        });
    };
    class ZodNaN extends ZodType {
        _parse(input) {
            const parsedType = this._getType(input);
            if (parsedType !== ZodParsedType.nan) {
                const ctx = this._getOrReturnCtx(input);
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_type,
                    expected: ZodParsedType.nan,
                    received: ctx.parsedType,
                });
                return INVALID;
            }
            return { status: "valid", value: input.data };
        }
    }
    ZodNaN.create = (params) => {
        return new ZodNaN({
            typeName: ZodFirstPartyTypeKind.ZodNaN,
            ...processCreateParams(params),
        });
    };
    const BRAND = Symbol("zod_brand");
    class ZodBranded extends ZodType {
        _parse(input) {
            const { ctx } = this._processInputParams(input);
            const data = ctx.data;
            return this._def.type._parse({
                data,
                path: ctx.path,
                parent: ctx,
            });
        }
        unwrap() {
            return this._def.type;
        }
    }
    class ZodPipeline extends ZodType {
        _parse(input) {
            const { status, ctx } = this._processInputParams(input);
            if (ctx.common.async) {
                const handleAsync = async () => {
                    const inResult = await this._def.in._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: ctx,
                    });
                    if (inResult.status === "aborted")
                        return INVALID;
                    if (inResult.status === "dirty") {
                        status.dirty();
                        return DIRTY(inResult.value);
                    }
                    else {
                        return this._def.out._parseAsync({
                            data: inResult.value,
                            path: ctx.path,
                            parent: ctx,
                        });
                    }
                };
                return handleAsync();
            }
            else {
                const inResult = this._def.in._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inResult.status === "aborted")
                    return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return {
                        status: "dirty",
                        value: inResult.value,
                    };
                }
                else {
                    return this._def.out._parseSync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx,
                    });
                }
            }
        }
        static create(a, b) {
            return new ZodPipeline({
                in: a,
                out: b,
                typeName: ZodFirstPartyTypeKind.ZodPipeline,
            });
        }
    }
    const custom = (check, params = {}, 
    /*
     * @deprecated
     *
     * Pass `fatal` into the params object instead:
     *
     * ```ts
     * z.string().custom((val) => val.length > 5, { fatal: false })
     * ```
     *
     */
    fatal) => {
        if (check)
            return ZodAny.create().superRefine((data, ctx) => {
                var _a, _b;
                if (!check(data)) {
                    const p = typeof params === "function"
                        ? params(data)
                        : typeof params === "string"
                            ? { message: params }
                            : params;
                    const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                    const p2 = typeof p === "string" ? { message: p } : p;
                    ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
                }
            });
        return ZodAny.create();
    };
    const late = {
        object: ZodObject.lazycreate,
    };
    var ZodFirstPartyTypeKind;
    (function (ZodFirstPartyTypeKind) {
        ZodFirstPartyTypeKind["ZodString"] = "ZodString";
        ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
        ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
        ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
        ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
        ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
        ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
        ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
        ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
        ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
        ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
        ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
        ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
        ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
        ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
        ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
        ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
        ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
        ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
        ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
        ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
        ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
        ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
        ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
        ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
        ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
        ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
        ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
        ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
        ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
        ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
        ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
        ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
        ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
        ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
    const instanceOfType = (
    // const instanceOfType = <T extends new (...args: any[]) => any>(
    cls, params = {
        message: `Input not instance of ${cls.name}`,
    }) => custom((data) => data instanceof cls, params);
    const stringType = ZodString.create;
    const numberType = ZodNumber.create;
    const nanType = ZodNaN.create;
    const bigIntType = ZodBigInt.create;
    const booleanType = ZodBoolean.create;
    const dateType = ZodDate.create;
    const symbolType = ZodSymbol.create;
    const undefinedType = ZodUndefined.create;
    const nullType = ZodNull.create;
    const anyType = ZodAny.create;
    const unknownType = ZodUnknown.create;
    const neverType = ZodNever.create;
    const voidType = ZodVoid.create;
    const arrayType = ZodArray.create;
    const objectType = ZodObject.create;
    const strictObjectType = ZodObject.strictCreate;
    const unionType = ZodUnion.create;
    const discriminatedUnionType = ZodDiscriminatedUnion.create;
    const intersectionType = ZodIntersection.create;
    const tupleType = ZodTuple.create;
    const recordType = ZodRecord.create;
    const mapType = ZodMap.create;
    const setType = ZodSet.create;
    const functionType = ZodFunction.create;
    const lazyType = ZodLazy.create;
    const literalType = ZodLiteral.create;
    const enumType = ZodEnum.create;
    const nativeEnumType = ZodNativeEnum.create;
    const promiseType = ZodPromise.create;
    const effectsType = ZodEffects.create;
    const optionalType = ZodOptional.create;
    const nullableType = ZodNullable.create;
    const preprocessType = ZodEffects.createWithPreprocess;
    const pipelineType = ZodPipeline.create;
    const ostring = () => stringType().optional();
    const onumber = () => numberType().optional();
    const oboolean = () => booleanType().optional();
    const coerce = {
        string: ((arg) => ZodString.create({ ...arg, coerce: true })),
        number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
        boolean: ((arg) => ZodBoolean.create({
            ...arg,
            coerce: true,
        })),
        bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
        date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
    };
    const NEVER = INVALID;

    var z = /*#__PURE__*/Object.freeze({
        __proto__: null,
        defaultErrorMap: errorMap,
        setErrorMap: setErrorMap,
        getErrorMap: getErrorMap,
        makeIssue: makeIssue,
        EMPTY_PATH: EMPTY_PATH,
        addIssueToContext: addIssueToContext,
        ParseStatus: ParseStatus,
        INVALID: INVALID,
        DIRTY: DIRTY,
        OK: OK,
        isAborted: isAborted,
        isDirty: isDirty,
        isValid: isValid,
        isAsync: isAsync,
        get util () { return util$1; },
        get objectUtil () { return objectUtil; },
        ZodParsedType: ZodParsedType,
        getParsedType: getParsedType,
        ZodType: ZodType,
        ZodString: ZodString,
        ZodNumber: ZodNumber,
        ZodBigInt: ZodBigInt,
        ZodBoolean: ZodBoolean,
        ZodDate: ZodDate,
        ZodSymbol: ZodSymbol,
        ZodUndefined: ZodUndefined,
        ZodNull: ZodNull,
        ZodAny: ZodAny,
        ZodUnknown: ZodUnknown,
        ZodNever: ZodNever,
        ZodVoid: ZodVoid,
        ZodArray: ZodArray,
        ZodObject: ZodObject,
        ZodUnion: ZodUnion,
        ZodDiscriminatedUnion: ZodDiscriminatedUnion,
        ZodIntersection: ZodIntersection,
        ZodTuple: ZodTuple,
        ZodRecord: ZodRecord,
        ZodMap: ZodMap,
        ZodSet: ZodSet,
        ZodFunction: ZodFunction,
        ZodLazy: ZodLazy,
        ZodLiteral: ZodLiteral,
        ZodEnum: ZodEnum,
        ZodNativeEnum: ZodNativeEnum,
        ZodPromise: ZodPromise,
        ZodEffects: ZodEffects,
        ZodTransformer: ZodEffects,
        ZodOptional: ZodOptional,
        ZodNullable: ZodNullable,
        ZodDefault: ZodDefault,
        ZodCatch: ZodCatch,
        ZodNaN: ZodNaN,
        BRAND: BRAND,
        ZodBranded: ZodBranded,
        ZodPipeline: ZodPipeline,
        custom: custom,
        Schema: ZodType,
        ZodSchema: ZodType,
        late: late,
        get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
        coerce: coerce,
        any: anyType,
        array: arrayType,
        bigint: bigIntType,
        boolean: booleanType,
        date: dateType,
        discriminatedUnion: discriminatedUnionType,
        effect: effectsType,
        'enum': enumType,
        'function': functionType,
        'instanceof': instanceOfType,
        intersection: intersectionType,
        lazy: lazyType,
        literal: literalType,
        map: mapType,
        nan: nanType,
        nativeEnum: nativeEnumType,
        never: neverType,
        'null': nullType,
        nullable: nullableType,
        number: numberType,
        object: objectType,
        oboolean: oboolean,
        onumber: onumber,
        optional: optionalType,
        ostring: ostring,
        pipeline: pipelineType,
        preprocess: preprocessType,
        promise: promiseType,
        record: recordType,
        set: setType,
        strictObject: strictObjectType,
        string: stringType,
        symbol: symbolType,
        transformer: effectsType,
        tuple: tupleType,
        'undefined': undefinedType,
        union: unionType,
        unknown: unknownType,
        'void': voidType,
        NEVER: NEVER,
        ZodIssueCode: ZodIssueCode,
        quotelessJson: quotelessJson,
        ZodError: ZodError
    });

    /** Used as references for various `Number` constants. */
    var NAN$2 = 0 / 0;

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN$2;
      }
      return +value;
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /** Used to match a single whitespace character. */
    var reWhitespace = /\s/;

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    /** Used to match leading whitespace. */
    var reTrimStart$2 = /^\s+/;

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart$2, '')
        : string;
    }

    /** Used as references for various `Number` constants. */
    var NAN$1 = 0 / 0;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN$1;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN$1 : +value);
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$3 = 1 / 0,
        MAX_INTEGER = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY$3 || value === -INFINITY$3) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$a = 'Expected a function';

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$a);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /** Used to store function metadata. */
    var metaMap = WeakMap$1 && new WeakMap$1;

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$8 = 1;

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG$8,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$f = Math.max;

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax$f(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$e = Math.max;

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax$e(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$6 = 4294967295;

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH$6;
      this.__views__ = [];
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used for built-in method references. */
    var objectProto$d = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$c = objectProto$d.hasOwnProperty;

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty$c.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$c = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$c.hasOwnProperty;

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty$b.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /** Used to match wrap detail comments. */
    var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$7 = 1,
        WRAP_BIND_KEY_FLAG$6 = 2,
        WRAP_CURRY_FLAG$6 = 8,
        WRAP_CURRY_RIGHT_FLAG$3 = 16,
        WRAP_PARTIAL_FLAG$6 = 32,
        WRAP_PARTIAL_RIGHT_FLAG$3 = 64,
        WRAP_ARY_FLAG$4 = 128,
        WRAP_REARG_FLAG$3 = 256,
        WRAP_FLIP_FLAG$2 = 512;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG$4],
      ['bind', WRAP_BIND_FLAG$7],
      ['bindKey', WRAP_BIND_KEY_FLAG$6],
      ['curry', WRAP_CURRY_FLAG$6],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG$3],
      ['flip', WRAP_FLIP_FLAG$2],
      ['partial', WRAP_PARTIAL_FLAG$6],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG$3],
      ['rearg', WRAP_REARG_FLAG$3]
    ];

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$6 = 1,
        WRAP_BIND_KEY_FLAG$5 = 2,
        WRAP_CURRY_BOUND_FLAG$1 = 4,
        WRAP_CURRY_FLAG$5 = 8,
        WRAP_PARTIAL_FLAG$5 = 32,
        WRAP_PARTIAL_RIGHT_FLAG$2 = 64;

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG$5,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG$5 : WRAP_PARTIAL_RIGHT_FLAG$2);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$2 : WRAP_PARTIAL_FLAG$5);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG$1)) {
        bitmask &= ~(WRAP_BIND_FLAG$6 | WRAP_BIND_KEY_FLAG$5);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = func;
      return object.placeholder;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$e = Math.min;

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin$e(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER$1 = '__lodash_placeholder__';

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER$1) {
          array[index] = PLACEHOLDER$1;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$5 = 1,
        WRAP_BIND_KEY_FLAG$4 = 2,
        WRAP_CURRY_FLAG$4 = 8,
        WRAP_CURRY_RIGHT_FLAG$2 = 16,
        WRAP_ARY_FLAG$3 = 128,
        WRAP_FLIP_FLAG$1 = 512;

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG$3,
          isBind = bitmask & WRAP_BIND_FLAG$5,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG$4,
          isCurried = bitmask & (WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2),
          isFlip = bitmask & WRAP_FLIP_FLAG$1,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$4 = 1;

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG$4,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$3 = 1,
        WRAP_BIND_KEY_FLAG$3 = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG$3 = 8,
        WRAP_ARY_FLAG$2 = 128,
        WRAP_REARG_FLAG$2 = 256;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$d = Math.min;

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG$3 | WRAP_BIND_KEY_FLAG$3 | WRAP_ARY_FLAG$2);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_CURRY_FLAG$3)) ||
        ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_REARG_FLAG$2) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG$2 | WRAP_REARG_FLAG$2)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG$3));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG$3) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG$3 ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG$2) {
        data[8] = data[8] == null ? source[8] : nativeMin$d(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$9 = 'Expected a function';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$2 = 1,
        WRAP_BIND_KEY_FLAG$2 = 2,
        WRAP_CURRY_FLAG$2 = 8,
        WRAP_CURRY_RIGHT_FLAG$1 = 16,
        WRAP_PARTIAL_FLAG$4 = 32,
        WRAP_PARTIAL_RIGHT_FLAG$1 = 64;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$d = Math.max;

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$9);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG$4 | WRAP_PARTIAL_RIGHT_FLAG$1);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax$d(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG$1) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax$d(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1)) {
        bitmask &= ~(WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG$2) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG$2 || bitmask == WRAP_CURRY_RIGHT_FLAG$1) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG$4 || bitmask == (WRAP_BIND_FLAG$2 | WRAP_PARTIAL_FLAG$4)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_ARY_FLAG$1 = 128;

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG$1, undefined, undefined, undefined, undefined, n);
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /** Used for built-in method references. */
    var objectProto$b = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$b.hasOwnProperty;

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty$a.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /** `Object#toString` result references. */
    var objectTag = '[object Object]';

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto$a = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty$9.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /** `Object#toString` result references. */
    var domExcTag = '[object DOMException]',
        errorTag = '[object Error]';

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /** Error message constants. */
    var FUNC_ERROR_TEXT$8 = 'Expected a function';

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$8);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG$1 = 1,
        WRAP_PARTIAL_FLAG$3 = 32;

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG$1;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG$3;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    // Assign default placeholders.
    bind.placeholder = {};

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG$1 = 2,
        WRAP_PARTIAL_FLAG$2 = 32;

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG$1;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG$2;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    // Assign default placeholders.
    bindKey.placeholder = {};

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /** Used to compose unicode character classes. */
    var rsAstralRange$3 = '\\ud800-\\udfff',
        rsComboMarksRange$4 = '\\u0300-\\u036f',
        reComboHalfMarksRange$4 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$4 = '\\u20d0-\\u20ff',
        rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
        rsVarRange$3 = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsZWJ$3 = '\\u200d';

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3  + rsComboRange$4 + rsVarRange$3 + ']');

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /** Used to compose unicode character classes. */
    var rsAstralRange$2 = '\\ud800-\\udfff',
        rsComboMarksRange$3 = '\\u0300-\\u036f',
        reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
        rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
        rsVarRange$2 = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsAstral$1 = '[' + rsAstralRange$2 + ']',
        rsCombo$3 = '[' + rsComboRange$3 + ']',
        rsFitz$2 = '\\ud83c[\\udffb-\\udfff]',
        rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
        rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
        rsRegional$2 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair$2 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ$2 = '\\u200d';

    /** Used to compose unicode regexes. */
    var reOptMod$2 = rsModifier$2 + '?',
        rsOptVar$2 = '[' + rsVarRange$2 + ']?',
        rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
        rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
        rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode$1) || [];
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to compose unicode character classes. */
    var rsComboMarksRange$2 = '\\u0300-\\u036f',
        reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
        rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

    /** Used to compose unicode capture groups. */
    var rsCombo$2 = '[' + rsComboRange$2 + ']';

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo$2, 'g');

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /** Used to compose unicode character classes. */
    var rsAstralRange$1 = '\\ud800-\\udfff',
        rsComboMarksRange$1 = '\\u0300-\\u036f',
        reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
        rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange$1 = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos$1 = "['\u2019]",
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo$1 = '[' + rsComboRange$1 + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
        rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
        rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
        rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ$1 = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod$1 = rsModifier$1 + '?',
        rsOptVar$1 = '[' + rsVarRange$1 + ']?',
        rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
        rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]";

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsFinite$1 = root.isFinite,
        nativeMin$c = Math.min;

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin$c(toInteger(precision), 292);
        if (precision && nativeIsFinite$1(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil$3 = Math.ceil,
        nativeMax$c = Math.max;

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax$c(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil$3(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG$3 = 4;

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG$3);
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$5 = 1,
        CLONE_SYMBOLS_FLAG$2 = 4;

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG$5 | CLONE_SYMBOLS_FLAG$2, customizer);
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG$1 = 4;

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG$1, customizer);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$7 = 'Expected a function';

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = baseIteratee;

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT$7);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$4 = 1;

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG$4));
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
      };
    }

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty$8.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_CURRY_FLAG$1 = 8;

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG$1, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    // Assign default placeholders.
    curry.placeholder = {};

    /** Used to compose bitmasks for function metadata. */
    var WRAP_CURRY_RIGHT_FLAG = 16;

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    // Assign default placeholders.
    curryRight.placeholder = {};

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = function() {
      return root.Date.now();
    };

    /** Error message constants. */
    var FUNC_ERROR_TEXT$6 = 'Expected a function';

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$b = Math.max,
        nativeMin$b = Math.min;

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$6);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax$b(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin$b(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /** Used for built-in method references. */
    var objectProto$8 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto$8[key]) && !hasOwnProperty$7.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /** Error message constants. */
    var FUNC_ERROR_TEXT$5 = 'Expected a function';

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$5);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$1 = 200;

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE$1) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, baseIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, baseIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, castFunction(iteratee));
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, castFunction(iteratee));
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }

    /** `Object#toString` result references. */
    var mapTag$3 = '[object Map]',
        setTag$3 = '[object Set]';

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag$1(object);
        if (tag == mapTag$3) {
          return mapToArray(object);
        }
        if (tag == setTag$3) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /** Used to match HTML entities and HTML characters. */
    var reUnescapedHtml = /[&<>"']/g,
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, baseIteratee(predicate, 3));
    }

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$5 = 4294967295;

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH$5) : 0;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, baseIteratee(predicate, 3));
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = baseIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$a = Math.max;

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax$a(length + index, 0);
      }
      return baseFindIndex(array, baseIteratee(predicate, 3), index);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, baseIteratee(predicate, 3), baseForOwn);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$9 = Math.max,
        nativeMin$a = Math.min;

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax$9(length + index, 0)
          : nativeMin$a(index, length - 1);
      }
      return baseFindIndex(array, baseIteratee(predicate, 3), index, true);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, baseIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee(iteratee, 3));
    }

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$2 = 1 / 0;

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY$2);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0;

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY$1) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_FLIP_FLAG = 512;

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /** Error message constants. */
    var FUNC_ERROR_TEXT$4 = 'Expected a function';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_CURRY_FLAG = 8,
        WRAP_PARTIAL_FLAG$1 = 32,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG$1 = 256;

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT$4);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG$1 | WRAP_REARG_FLAG$1) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, castFunction(iteratee), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, castFunction(iteratee), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, castFunction(iteratee));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, castFunction(iteratee));
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty$6.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /** Used for built-in method references. */
    var objectProto$6 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty$5.call(object, key);
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$8 = Math.max,
        nativeMin$9 = Math.min;

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin$9(start, end) && number < nativeMax$8(start, end);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$7 = Math.max;

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax$7(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$6 = Math.max;

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax$6(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$8 = Math.min;

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin$8(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, baseIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$5.toString;

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString$1.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$4.toString;

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty$4.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, baseIteratee);

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    var arrayBufferTag = '[object ArrayBuffer]';

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /** `Object#toString` result references. */
    var boolTag = '[object Boolean]';

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /** `Object#toString` result references. */
    var dateTag = '[object Date]';

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /* Node.js helper references. */
    var nodeIsDate = nodeUtil && nodeUtil.isDate;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /** `Object#toString` result references. */
    var mapTag$2 = '[object Map]',
        setTag$2 = '[object Set]';

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag$1(value);
      if (tag == mapTag$2 || tag == setTag$2) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty$3.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsFinite = root.isFinite;

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite$1(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /** `Object#toString` result references. */
    var numberTag = '[object Number]';

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN$1(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.';

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /** `Object#toString` result references. */
    var regexpTag = '[object RegExp]';

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /* Node.js helper references. */
    var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$3 = 9007199254740991;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER$3 && value <= MAX_SAFE_INTEGER$3;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /** `Object#toString` result references. */
    var weakMapTag = '[object WeakMap]';

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag$1(value) == weakMapTag;
    }

    /** `Object#toString` result references. */
    var weakSetTag = '[object WeakSet]';

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$3 = 1;

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG$3));
    }

    /** Used for built-in method references. */
    var arrayProto$4 = Array.prototype;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeJoin = arrayProto$4.join;

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$5 = Math.max,
        nativeMin$7 = Math.min;

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax$5(length + index, 0) : nativeMin$7(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$2 = 1;

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG$2));
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$1 = 1;

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG$1));
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined) {
          result = result === undefined ? current : (result + current);
        }
      }
      return result;
    }

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? (baseSum(array, iteratee) / length) : NAN;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, baseIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin$1(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /** Error message constants. */
    var FUNC_ERROR_TEXT$3 = 'Expected a function';

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$3);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }

    /** `Object#toString` result references. */
    var mapTag$1 = '[object Map]',
        setTag$1 = '[object Set]';

    /** Built-in value references. */
    var symIterator$1 = Symbol$1 ? Symbol$1.iterator : undefined;

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator$1 && value[symIterator$1]) {
        return iteratorToArray(value[symIterator$1]());
      }
      var tag = getTag$1(value),
          func = tag == mapTag$1 ? mapToArray : (tag == setTag$1 ? setToArray : values);

      return func(value);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(baseIteratee(predicate)));
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$6 = Math.min;

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(baseIteratee))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(baseIteratee));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin$6(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$2 = 9007199254740991;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeFloor$3 = Math.floor;

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER$2) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor$3(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsAstral = '[' + rsAstralRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil$2 = Math.ceil;

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil$2(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil$1 = Math.ceil,
        nativeFloor$2 = Math.floor;

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor$2(mid), chars) +
        string +
        createPadding(nativeCeil$1(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /** Used to match leading whitespace. */
    var reTrimStart$1 = /^\s+/;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeParseInt = root.parseInt;

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt$1(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart$1, ''), radix || 0);
    }

    /** Used to compose bitmasks for function metadata. */
    var WRAP_PARTIAL_FLAG = 32;

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    // Assign default placeholders.
    partial.placeholder = {};

    /** Used to compose bitmasks for function metadata. */
    var WRAP_PARTIAL_RIGHT_FLAG = 64;

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    // Assign default placeholders.
    partialRight.placeholder = {};

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /** Used for built-in method references. */
    var arrayProto$3 = Array.prototype;

    /** Built-in value references. */
    var splice$1 = arrayProto$3.splice;

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice$1.call(seen, fromIndex, 1);
          }
          splice$1.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, baseIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /** Used for built-in method references. */
    var arrayProto$2 = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto$2.splice;

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeFloor$1 = Math.floor,
        nativeRandom$1 = Math.random;

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor$1(nativeRandom$1() * (upper - lower + 1));
    }

    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$5 = Math.min,
        nativeRandom = Math.random;

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin$5(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeMax$4 = Math.max;

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax$4(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /** Used to compose bitmasks for function metadata. */
    var WRAP_REARG_FLAG = 256;

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(baseIteratee(predicate, 3)));
    }

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = baseIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$2 = 'Expected a function';

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /** Used for built-in method references. */
    var arrayProto$1 = Array.prototype;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeReverse = arrayProto$1.reverse;

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag$1(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, baseIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$4 = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH$4 - 1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeFloor = Math.floor,
        nativeMin$4 = Math.min;

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin$4(high, MAX_ARRAY_INDEX);
    }

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$3 = 4294967295,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH$3 >>> 1;

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, baseIteratee(iteratee, 2))
        : [];
    }

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$2 = 4294967295;

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH$2 : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT$1 = 'Expected a function';

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$3 = Math.max;

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      start = start == null ? 0 : nativeMax$3(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, baseIteratee(iteratee, 2))
        : 0;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, baseIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, baseIteratee(predicate, 3))
        : [];
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto$2[key]) && !hasOwnProperty$2.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /** Used to match template delimiters. */
    var reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g;

    /** Used to match template delimiters. */
    var reEvaluate = /<%([\s\S]+?)%>/g;

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    var templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': { 'escape': escape }
      }
    };

    /** Error message constants. */
    var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /**
     * Used to validate the `validate` option in `_.template` variable.
     *
     * Forbids characters which could potentially change the meaning of the function argument definition:
     * - "()," (modification of function parameters)
     * - "=" (default value)
     * - "[]{}" (destructuring of function parameters)
     * - "/" (beginning of a comment)
     * - whitespace
     */
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = templateSettings.imports._.templateSettings || templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = hasOwnProperty$1.call(options, 'sourceURL')
        ? ('//# sourceURL=' +
           (options.sourceURL + '').replace(/\s/g, ' ') +
           '\n')
        : '';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty$1.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH$1 = 4294967295;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$3 = Math.min;

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER$1) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH$1,
          length = nativeMin$3(n, MAX_ARRAY_LENGTH$1);

      iteratee = castFunction(iteratee);
      n -= MAX_ARRAY_LENGTH$1;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = baseIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source);

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set$1 && (1 / setToArray(new Set$1([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set$1(values);
    };

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$2 = Math.max;

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax$2(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    var array = {
      chunk, compact, concat, difference, differenceBy,
      differenceWith, drop, dropRight, dropRightWhile, dropWhile,
      fill, findIndex, findLastIndex, first: head, flatten,
      flattenDeep, flattenDepth, fromPairs, head, indexOf,
      initial, intersection, intersectionBy, intersectionWith, join,
      last, lastIndexOf, nth, pull, pullAll,
      pullAllBy, pullAllWith, pullAt, remove, reverse,
      slice, sortedIndex, sortedIndexBy, sortedIndexOf, sortedLastIndex,
      sortedLastIndexBy, sortedLastIndexOf, sortedUniq, sortedUniqBy, tail,
      take, takeRight, takeRightWhile, takeWhile, union,
      unionBy, unionWith, uniq, uniqBy, uniqWith,
      unzip, unzipWith, without, xor, xorBy,
      xorWith, zip, zipObject, zipObjectDeep, zipWith
    };

    var collection = {
      countBy, each: forEach, eachRight: forEachRight, every, filter,
      find, findLast, flatMap, flatMapDeep, flatMapDepth,
      forEach, forEachRight, groupBy, includes, invokeMap,
      keyBy, map, orderBy, partition, reduce,
      reduceRight, reject, sample, sampleSize, shuffle,
      size, some, sortBy
    };

    var date = {
      now
    };

    var func = {
      after, ary, before, bind, bindKey,
      curry, curryRight, debounce, defer, delay,
      flip, memoize, negate, once, overArgs,
      partial, partialRight, rearg, rest, spread,
      throttle, unary, wrap
    };

    var lang = {
      castArray, clone, cloneDeep, cloneDeepWith, cloneWith,
      conformsTo, eq, gt, gte, isArguments,
      isArray, isArrayBuffer, isArrayLike, isArrayLikeObject, isBoolean,
      isBuffer, isDate, isElement, isEmpty, isEqual,
      isEqualWith, isError, isFinite: isFinite$1, isFunction, isInteger,
      isLength, isMap, isMatch, isMatchWith, isNaN: isNaN$1,
      isNative, isNil, isNull, isNumber, isObject,
      isObjectLike, isPlainObject, isRegExp, isSafeInteger, isSet,
      isString, isSymbol, isTypedArray, isUndefined, isWeakMap,
      isWeakSet, lt, lte, toArray, toFinite,
      toInteger, toLength, toNumber, toPlainObject, toSafeInteger,
      toString
    };

    var math = {
      add, ceil, divide, floor, max,
      maxBy, mean, meanBy, min, minBy,
      multiply, round, subtract, sum, sumBy
    };

    var number = {
      clamp, inRange, random
    };

    var object = {
      assign, assignIn, assignInWith, assignWith, at,
      create, defaults, defaultsDeep, entries: toPairs, entriesIn: toPairsIn,
      extend: assignIn, extendWith: assignInWith, findKey, findLastKey, forIn,
      forInRight, forOwn, forOwnRight, functions, functionsIn,
      get, has, hasIn, invert, invertBy,
      invoke, keys, keysIn, mapKeys, mapValues,
      merge, mergeWith, omit, omitBy, pick,
      pickBy, result, set, setWith, toPairs,
      toPairsIn, transform, unset, update, updateWith,
      values, valuesIn
    };

    var seq = {
      at: wrapperAt, chain, commit: wrapperCommit, lodash, next: wrapperNext,
      plant: wrapperPlant, reverse: wrapperReverse, tap, thru, toIterator: wrapperToIterator,
      toJSON: wrapperValue, value: wrapperValue, valueOf: wrapperValue, wrapperChain
    };

    var string = {
      camelCase, capitalize, deburr, endsWith, escape,
      escapeRegExp, kebabCase, lowerCase, lowerFirst, pad,
      padEnd, padStart, parseInt: parseInt$1, repeat, replace,
      snakeCase, split, startCase, startsWith, template,
      templateSettings, toLower, toUpper, trim, trimEnd,
      trimStart, truncate, unescape, upperCase, upperFirst,
      words
    };

    var util = {
      attempt, bindAll, cond, conforms, constant,
      defaultTo, flow, flowRight, identity, iteratee,
      matches, matchesProperty, method, methodOf, mixin: mixin$1,
      noop, nthArg, over, overEvery, overSome,
      property, propertyOf, range, rangeRight, stubArray,
      stubFalse, stubObject, stubString, stubTrue, times,
      toPath, uniqueId
    };

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$1 = Math.max,
        nativeMin$2 = Math.min;

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin$2(end, start + size); break;
          case 'takeRight': start = nativeMax$1(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG$1 = 1,
        LAZY_MAP_FLAG = 2;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMin$1 = Math.min;

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin$1(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG$1) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /**
     * @license
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="es" -o ./`
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the semantic version number. */
    var VERSION = '4.17.21';

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_KEY_FLAG = 2;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_WHILE_FLAG = 3;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Built-in value references. */
    var symIterator = Symbol$1 ? Symbol$1.iterator : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max,
        nativeMin = Math.min;

    // wrap `_.mixin` so it works when provided only one argument
    var mixin = (function(func) {
      return function(object, source, options) {
        if (options == null) {
          var isObj = isObject(source),
              props = isObj && keys(source),
              methodNames = props && props.length && baseFunctions(source, props);

          if (!(methodNames ? methodNames.length : isObj)) {
            options = source;
            source = object;
            object = this;
          }
        }
        return func(object, source, options);
      };
    }(mixin$1));

    // Add methods that return wrapped values in chain sequences.
    lodash.after = func.after;
    lodash.ary = func.ary;
    lodash.assign = object.assign;
    lodash.assignIn = object.assignIn;
    lodash.assignInWith = object.assignInWith;
    lodash.assignWith = object.assignWith;
    lodash.at = object.at;
    lodash.before = func.before;
    lodash.bind = func.bind;
    lodash.bindAll = util.bindAll;
    lodash.bindKey = func.bindKey;
    lodash.castArray = lang.castArray;
    lodash.chain = seq.chain;
    lodash.chunk = array.chunk;
    lodash.compact = array.compact;
    lodash.concat = array.concat;
    lodash.cond = util.cond;
    lodash.conforms = util.conforms;
    lodash.constant = util.constant;
    lodash.countBy = collection.countBy;
    lodash.create = object.create;
    lodash.curry = func.curry;
    lodash.curryRight = func.curryRight;
    lodash.debounce = func.debounce;
    lodash.defaults = object.defaults;
    lodash.defaultsDeep = object.defaultsDeep;
    lodash.defer = func.defer;
    lodash.delay = func.delay;
    lodash.difference = array.difference;
    lodash.differenceBy = array.differenceBy;
    lodash.differenceWith = array.differenceWith;
    lodash.drop = array.drop;
    lodash.dropRight = array.dropRight;
    lodash.dropRightWhile = array.dropRightWhile;
    lodash.dropWhile = array.dropWhile;
    lodash.fill = array.fill;
    lodash.filter = collection.filter;
    lodash.flatMap = collection.flatMap;
    lodash.flatMapDeep = collection.flatMapDeep;
    lodash.flatMapDepth = collection.flatMapDepth;
    lodash.flatten = array.flatten;
    lodash.flattenDeep = array.flattenDeep;
    lodash.flattenDepth = array.flattenDepth;
    lodash.flip = func.flip;
    lodash.flow = util.flow;
    lodash.flowRight = util.flowRight;
    lodash.fromPairs = array.fromPairs;
    lodash.functions = object.functions;
    lodash.functionsIn = object.functionsIn;
    lodash.groupBy = collection.groupBy;
    lodash.initial = array.initial;
    lodash.intersection = array.intersection;
    lodash.intersectionBy = array.intersectionBy;
    lodash.intersectionWith = array.intersectionWith;
    lodash.invert = object.invert;
    lodash.invertBy = object.invertBy;
    lodash.invokeMap = collection.invokeMap;
    lodash.iteratee = util.iteratee;
    lodash.keyBy = collection.keyBy;
    lodash.keys = keys;
    lodash.keysIn = object.keysIn;
    lodash.map = collection.map;
    lodash.mapKeys = object.mapKeys;
    lodash.mapValues = object.mapValues;
    lodash.matches = util.matches;
    lodash.matchesProperty = util.matchesProperty;
    lodash.memoize = func.memoize;
    lodash.merge = object.merge;
    lodash.mergeWith = object.mergeWith;
    lodash.method = util.method;
    lodash.methodOf = util.methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = util.nthArg;
    lodash.omit = object.omit;
    lodash.omitBy = object.omitBy;
    lodash.once = func.once;
    lodash.orderBy = collection.orderBy;
    lodash.over = util.over;
    lodash.overArgs = func.overArgs;
    lodash.overEvery = util.overEvery;
    lodash.overSome = util.overSome;
    lodash.partial = func.partial;
    lodash.partialRight = func.partialRight;
    lodash.partition = collection.partition;
    lodash.pick = object.pick;
    lodash.pickBy = object.pickBy;
    lodash.property = util.property;
    lodash.propertyOf = util.propertyOf;
    lodash.pull = array.pull;
    lodash.pullAll = array.pullAll;
    lodash.pullAllBy = array.pullAllBy;
    lodash.pullAllWith = array.pullAllWith;
    lodash.pullAt = array.pullAt;
    lodash.range = util.range;
    lodash.rangeRight = util.rangeRight;
    lodash.rearg = func.rearg;
    lodash.reject = collection.reject;
    lodash.remove = array.remove;
    lodash.rest = func.rest;
    lodash.reverse = array.reverse;
    lodash.sampleSize = collection.sampleSize;
    lodash.set = object.set;
    lodash.setWith = object.setWith;
    lodash.shuffle = collection.shuffle;
    lodash.slice = array.slice;
    lodash.sortBy = collection.sortBy;
    lodash.sortedUniq = array.sortedUniq;
    lodash.sortedUniqBy = array.sortedUniqBy;
    lodash.split = string.split;
    lodash.spread = func.spread;
    lodash.tail = array.tail;
    lodash.take = array.take;
    lodash.takeRight = array.takeRight;
    lodash.takeRightWhile = array.takeRightWhile;
    lodash.takeWhile = array.takeWhile;
    lodash.tap = seq.tap;
    lodash.throttle = func.throttle;
    lodash.thru = thru;
    lodash.toArray = lang.toArray;
    lodash.toPairs = object.toPairs;
    lodash.toPairsIn = object.toPairsIn;
    lodash.toPath = util.toPath;
    lodash.toPlainObject = lang.toPlainObject;
    lodash.transform = object.transform;
    lodash.unary = func.unary;
    lodash.union = array.union;
    lodash.unionBy = array.unionBy;
    lodash.unionWith = array.unionWith;
    lodash.uniq = array.uniq;
    lodash.uniqBy = array.uniqBy;
    lodash.uniqWith = array.uniqWith;
    lodash.unset = object.unset;
    lodash.unzip = array.unzip;
    lodash.unzipWith = array.unzipWith;
    lodash.update = object.update;
    lodash.updateWith = object.updateWith;
    lodash.values = object.values;
    lodash.valuesIn = object.valuesIn;
    lodash.without = array.without;
    lodash.words = string.words;
    lodash.wrap = func.wrap;
    lodash.xor = array.xor;
    lodash.xorBy = array.xorBy;
    lodash.xorWith = array.xorWith;
    lodash.zip = array.zip;
    lodash.zipObject = array.zipObject;
    lodash.zipObjectDeep = array.zipObjectDeep;
    lodash.zipWith = array.zipWith;

    // Add aliases.
    lodash.entries = object.toPairs;
    lodash.entriesIn = object.toPairsIn;
    lodash.extend = object.assignIn;
    lodash.extendWith = object.assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = math.add;
    lodash.attempt = util.attempt;
    lodash.camelCase = string.camelCase;
    lodash.capitalize = string.capitalize;
    lodash.ceil = math.ceil;
    lodash.clamp = number.clamp;
    lodash.clone = lang.clone;
    lodash.cloneDeep = lang.cloneDeep;
    lodash.cloneDeepWith = lang.cloneDeepWith;
    lodash.cloneWith = lang.cloneWith;
    lodash.conformsTo = lang.conformsTo;
    lodash.deburr = string.deburr;
    lodash.defaultTo = util.defaultTo;
    lodash.divide = math.divide;
    lodash.endsWith = string.endsWith;
    lodash.eq = lang.eq;
    lodash.escape = string.escape;
    lodash.escapeRegExp = string.escapeRegExp;
    lodash.every = collection.every;
    lodash.find = collection.find;
    lodash.findIndex = array.findIndex;
    lodash.findKey = object.findKey;
    lodash.findLast = collection.findLast;
    lodash.findLastIndex = array.findLastIndex;
    lodash.findLastKey = object.findLastKey;
    lodash.floor = math.floor;
    lodash.forEach = collection.forEach;
    lodash.forEachRight = collection.forEachRight;
    lodash.forIn = object.forIn;
    lodash.forInRight = object.forInRight;
    lodash.forOwn = object.forOwn;
    lodash.forOwnRight = object.forOwnRight;
    lodash.get = object.get;
    lodash.gt = lang.gt;
    lodash.gte = lang.gte;
    lodash.has = object.has;
    lodash.hasIn = object.hasIn;
    lodash.head = array.head;
    lodash.identity = identity;
    lodash.includes = collection.includes;
    lodash.indexOf = array.indexOf;
    lodash.inRange = number.inRange;
    lodash.invoke = object.invoke;
    lodash.isArguments = lang.isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = lang.isArrayBuffer;
    lodash.isArrayLike = lang.isArrayLike;
    lodash.isArrayLikeObject = lang.isArrayLikeObject;
    lodash.isBoolean = lang.isBoolean;
    lodash.isBuffer = lang.isBuffer;
    lodash.isDate = lang.isDate;
    lodash.isElement = lang.isElement;
    lodash.isEmpty = lang.isEmpty;
    lodash.isEqual = lang.isEqual;
    lodash.isEqualWith = lang.isEqualWith;
    lodash.isError = lang.isError;
    lodash.isFinite = lang.isFinite;
    lodash.isFunction = lang.isFunction;
    lodash.isInteger = lang.isInteger;
    lodash.isLength = lang.isLength;
    lodash.isMap = lang.isMap;
    lodash.isMatch = lang.isMatch;
    lodash.isMatchWith = lang.isMatchWith;
    lodash.isNaN = lang.isNaN;
    lodash.isNative = lang.isNative;
    lodash.isNil = lang.isNil;
    lodash.isNull = lang.isNull;
    lodash.isNumber = lang.isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = lang.isObjectLike;
    lodash.isPlainObject = lang.isPlainObject;
    lodash.isRegExp = lang.isRegExp;
    lodash.isSafeInteger = lang.isSafeInteger;
    lodash.isSet = lang.isSet;
    lodash.isString = lang.isString;
    lodash.isSymbol = lang.isSymbol;
    lodash.isTypedArray = lang.isTypedArray;
    lodash.isUndefined = lang.isUndefined;
    lodash.isWeakMap = lang.isWeakMap;
    lodash.isWeakSet = lang.isWeakSet;
    lodash.join = array.join;
    lodash.kebabCase = string.kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = array.lastIndexOf;
    lodash.lowerCase = string.lowerCase;
    lodash.lowerFirst = string.lowerFirst;
    lodash.lt = lang.lt;
    lodash.lte = lang.lte;
    lodash.max = math.max;
    lodash.maxBy = math.maxBy;
    lodash.mean = math.mean;
    lodash.meanBy = math.meanBy;
    lodash.min = math.min;
    lodash.minBy = math.minBy;
    lodash.stubArray = util.stubArray;
    lodash.stubFalse = util.stubFalse;
    lodash.stubObject = util.stubObject;
    lodash.stubString = util.stubString;
    lodash.stubTrue = util.stubTrue;
    lodash.multiply = math.multiply;
    lodash.nth = array.nth;
    lodash.noop = util.noop;
    lodash.now = date.now;
    lodash.pad = string.pad;
    lodash.padEnd = string.padEnd;
    lodash.padStart = string.padStart;
    lodash.parseInt = string.parseInt;
    lodash.random = number.random;
    lodash.reduce = collection.reduce;
    lodash.reduceRight = collection.reduceRight;
    lodash.repeat = string.repeat;
    lodash.replace = string.replace;
    lodash.result = object.result;
    lodash.round = math.round;
    lodash.sample = collection.sample;
    lodash.size = collection.size;
    lodash.snakeCase = string.snakeCase;
    lodash.some = collection.some;
    lodash.sortedIndex = array.sortedIndex;
    lodash.sortedIndexBy = array.sortedIndexBy;
    lodash.sortedIndexOf = array.sortedIndexOf;
    lodash.sortedLastIndex = array.sortedLastIndex;
    lodash.sortedLastIndexBy = array.sortedLastIndexBy;
    lodash.sortedLastIndexOf = array.sortedLastIndexOf;
    lodash.startCase = string.startCase;
    lodash.startsWith = string.startsWith;
    lodash.subtract = math.subtract;
    lodash.sum = math.sum;
    lodash.sumBy = math.sumBy;
    lodash.template = string.template;
    lodash.times = util.times;
    lodash.toFinite = lang.toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = lang.toLength;
    lodash.toLower = string.toLower;
    lodash.toNumber = lang.toNumber;
    lodash.toSafeInteger = lang.toSafeInteger;
    lodash.toString = lang.toString;
    lodash.toUpper = string.toUpper;
    lodash.trim = string.trim;
    lodash.trimEnd = string.trimEnd;
    lodash.trimStart = string.trimStart;
    lodash.truncate = string.truncate;
    lodash.unescape = string.unescape;
    lodash.uniqueId = util.uniqueId;
    lodash.upperCase = string.upperCase;
    lodash.upperFirst = string.upperFirst;

    // Add aliases.
    lodash.each = collection.forEach;
    lodash.eachRight = collection.forEachRight;
    lodash.first = array.head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;
    (lodash.templateSettings = string.templateSettings).imports._ = lodash;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': baseIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(baseIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = seq.at;
    lodash.prototype.chain = seq.wrapperChain;
    lodash.prototype.commit = seq.commit;
    lodash.prototype.next = seq.next;
    lodash.prototype.plant = seq.plant;
    lodash.prototype.reverse = seq.reverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = seq.value;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = seq.toIterator;
    }

    /**
     * @license
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="es" -o ./`
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    const EXPORT_IMPORT_FORMAT_VERSION = 1;
    const exportImportCategories = [];
    const ExportImportCategories = exportImportCategories;
    function ExportImportRegisterCategory(definition) {
        if (moduleInitPhase !== ModuleInitPhase.init) {
            throw new Error("Export/Import categories can be registered only during init");
        }
        if (exportImportCategories.some(c => c.category === definition.category)) {
            throw new Error(`Export/Import category "${definition.category}" already defined!`);
        }
        exportImportCategories.push(definition);
    }
    function ExportImportDoExport(category, compress, character) {
        const definition = exportImportCategories.find(c => c.category === category);
        if (!definition) {
            throw new Error(`Unknown export category "${category}"`);
        }
        if (character && !checkPermissionAccess("exportimport_export", character)) {
            throw new Error("Missing the following permission required to export:\nAllow exporting BCX module configurations");
        }
        let result = JSON.stringify({
            __bcxExport: EXPORT_IMPORT_FORMAT_VERSION,
            [category]: definition.export(character),
        });
        if (compress) {
            result = LZString.compressToBase64(result);
        }
        return result;
    }
    function ExportImportDoImport(category, data, character) {
        const definition = exportImportCategories.find(c => c.category === category);
        if (!definition) {
            throw new Error(`Unknown import category "${category}"`);
        }
        data = data.trim();
        let parsedData;
        try {
            if (data && !data.startsWith("{")) {
                data = LZString.decompressFromBase64(data) || "";
                if (!data || typeof data !== "string" || !data.startsWith("{")) {
                    return "Invalid input: decompression failed";
                }
                data = data.trim();
            }
            parsedData = JSON.parse(data);
        }
        catch (err) {
            return `Invalid input: parse error: ${err}`;
        }
        if (!isObject$1(parsedData) || typeof parsedData.__bcxExport !== "number") {
            return "Invalid input: Input is not data exported from BCX";
        }
        if (parsedData.__bcxExport !== EXPORT_IMPORT_FORMAT_VERSION) {
            return `Unable to load version ${parsedData.__bcxExport} of export, maximum compatible version: ${EXPORT_IMPORT_FORMAT_VERSION}`;
        }
        if (parsedData[category] === undefined) {
            return `Input doesn't include data for category "${definition.name}"\n` +
                `Input has data for following known categories:\n` +
                (Object.keys(parsedData).map((key) => {
                    const knownCategory = exportImportCategories.find(c => c.category === key);
                    return knownCategory ? ` - ${knownCategory.name}\n` : "";
                }).join("") || "[NONE]\n");
        }
        const zodResult = definition.importValidator.safeParse(parsedData[category]);
        if (!zodResult.success) {
            return `Invalid input:\n${JSON.stringify(zodResult.error.format(), undefined, "\t")}`;
        }
        if (character) {
            const missingPermissions = definition.importPermissions.filter(p => !checkPermissionAccess(p, character));
            if (missingPermissions.length > 0) {
                return "Missing the following permissions required to import:\n" +
                    missingPermissions
                        .map(p => { var _a, _b; return (_b = (_a = getPlayerPermissionSettings()[p]) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : p; })
                        .join("\n");
            }
        }
        return definition.import(zodResult.data, character);
    }
    class ModuleExportImport extends BaseModule {
        init() {
            registerPermission("exportimport_export", {
                name: "Allow exporting BCX module configurations",
                category: ModuleCategory.ExportImport,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [true, AccessLevel.mistress],
                    [Preset.slave]: [true, AccessLevel.mistress],
                },
            });
        }
        load() {
            exportImportCategories.sort((a, b) => a.module - b.module);
            queryHandlers.export_import_do_export = (sender, data) => {
                if (isObject$1(data) &&
                    typeof data.category === "string" &&
                    exportImportCategories.some(c => c.category === data.category) &&
                    typeof data.compress === "boolean") {
                    return ExportImportDoExport(data.category, data.compress, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.export_import_do_import = (sender, data) => {
                if (isObject$1(data) &&
                    typeof data.category === "string" &&
                    exportImportCategories.some(c => c.category === data.category) &&
                    typeof data.data === "string") {
                    return ExportImportDoImport(data.category, data.data, sender);
                }
                else {
                    return undefined;
                }
            };
        }
    }

    const CURSES_TRIGGER_TEXTS = {
        remove: "PLAYER_NAME's body seems to be cursed and the ASSET_NAME just falls off her body.",
        add: "The curse on PLAYER_NAME's ASSET_NAME wakes up and the item reappears.",
        swap: "The curse on PLAYER_NAME's ASSET_NAME wakes up, not allowing the item to be replaced by another item.",
        update: "The curse on PLAYER_NAME's ASSET_NAME wakes up and undoes all changes to the item.",
        color: "The curse on PLAYER_NAME's ASSET_NAME wakes up, changing the color of the item back.",
        autoremove: "The curse on PLAYER_NAME's body becomes dormant and the ASSET_NAME falls off her body.",
    };
    const CURSES_TRIGGER_TEXTS_BATCH = {
        remove: "PLAYER_NAME's body seems to be cursed and several items just fall off her body.",
        add: "The curses on PLAYER_NAME's body wake up and several items reappear.",
        swap: "The curses on PLAYER_NAME's body wake up, not allowing several items to be replaced.",
        update: "The curses on PLAYER_NAME's body wake up and undoes all changes to several items.",
        color: "The curses on PLAYER_NAME's body wake up, changing the color of several items back.",
        autoremove: "The curses on PLAYER_NAME's body become dormant and several items fall off her body.",
    };
    const CURSES_TRIGGER_LOGS = {
        remove: "The curse on PLAYER_NAME's body prevented a ASSET_NAME from being added to it",
        add: "The curse on PLAYER_NAME's ASSET_NAME made the item reappear",
        swap: "The curse on PLAYER_NAME's ASSET_NAME prevented the item from being replaced",
        update: "The curse on PLAYER_NAME's ASSET_NAME reverted all changes to the item",
        color: "The curse on PLAYER_NAME's ASSET_NAME reverted the color of the item",
    };
    const CURSES_TRIGGER_LOGS_BATCH = {
        remove: "The curses on PLAYER_NAME's body prevented several items from being added to it",
        add: "The curses on PLAYER_NAME's body made several items reappear",
        swap: "The curses on PLAYER_NAME's body prevented several items from being replaced",
        update: "The curses on PLAYER_NAME's body reverted all changes to several items",
        color: "The curses on PLAYER_NAME's body reverted the color of several items",
    };

    const LOG_ENTRIES_LIMIT = 256;
    var LogEntryType;
    (function (LogEntryType) {
        LogEntryType[LogEntryType["plaintext"] = 0] = "plaintext";
        LogEntryType[LogEntryType["deleted"] = 1] = "deleted";
        LogEntryType[LogEntryType["ruleTrigger"] = 2] = "ruleTrigger";
        LogEntryType[LogEntryType["ruleTriggerAttempt"] = 3] = "ruleTriggerAttempt";
        LogEntryType[LogEntryType["curseTrigger"] = 4] = "curseTrigger";
        LogEntryType[LogEntryType["curseTriggerBatch"] = 5] = "curseTriggerBatch";
    })(LogEntryType || (LogEntryType = {}));
    var LogAccessLevel;
    (function (LogAccessLevel) {
        LogAccessLevel[LogAccessLevel["none"] = 0] = "none";
        LogAccessLevel[LogAccessLevel["protected"] = 1] = "protected";
        LogAccessLevel[LogAccessLevel["normal"] = 2] = "normal";
        LogAccessLevel[LogAccessLevel["everyone"] = 3] = "everyone";
    })(LogAccessLevel || (LogAccessLevel = {}));
    function logMessage(category, type, data) {
        var _a;
        if (!moduleIsEnabled(ModuleCategory.Log))
            return;
        const access = (_a = modStorage.logConfig) === null || _a === void 0 ? void 0 : _a[category];
        if (access === undefined) {
            throw new Error(`Attempt to log message with unknown category "${category}"`);
        }
        if (access > LogAccessLevel.none) {
            logMessageAdd(access, type, data);
        }
    }
    function logMessageAdd(access, type, data) {
        if (!moduleIsEnabled(ModuleCategory.Log))
            return;
        if (!modStorage.log) {
            throw new Error("Mod storage log not initialized");
        }
        modStorage.log.unshift([Date.now(), access, type, data]);
        if (modStorage.log.length >= 2 && modStorage.log[0][0] <= modStorage.log[1][0]) {
            modStorage.log[0][0] = modStorage.log[1][0] + 1;
        }
        modStorage.log.splice(LOG_ENTRIES_LIMIT);
        modStorageSync();
        notifyOfChange();
    }
    function logMessageDelete(time, character) {
        var _a;
        if (!moduleIsEnabled(ModuleCategory.Log))
            return false;
        if (character && !checkPermissionAccess("log_delete", character)) {
            return false;
        }
        const access = (_a = modStorage.logConfig) === null || _a === void 0 ? void 0 : _a.log_deleted;
        if (access === undefined) {
            throw new Error("log_deleted category not found");
        }
        if (!modStorage.log) {
            throw new Error("Mod storage log not initialized");
        }
        let changed = false;
        for (let i = modStorage.log.length - 1; i >= 0; i--) {
            const e = modStorage.log[i];
            if ((Array.isArray(time) && time.includes(e[0])) || e[0] === time) {
                changed = true;
                if (access === LogAccessLevel.none) {
                    modStorage.log.splice(i, 1);
                }
                else {
                    e[1] = access;
                    e[2] = LogEntryType.deleted;
                    e[3] = null;
                }
            }
        }
        if (changed) {
            modStorageSync();
            notifyOfChange();
        }
        return changed;
    }
    function logConfigSet(category, accessLevel, character) {
        var _a;
        if (!moduleIsEnabled(ModuleCategory.Log))
            return false;
        if (character && !checkPermissionAccess("log_configure", character)) {
            return false;
        }
        if (((_a = modStorage.logConfig) === null || _a === void 0 ? void 0 : _a[category]) === undefined) {
            return false;
        }
        if (![LogAccessLevel.none, LogAccessLevel.normal, LogAccessLevel.protected].includes(accessLevel)) {
            return false;
        }
        if (modStorage.logConfig[category] === accessLevel) {
            return true;
        }
        if (character) {
            logMessage("log_config_change", LogEntryType.plaintext, `${character} changed log configuration "${LOG_CONFIG_NAMES[category]}" ` +
                `from "${LOG_LEVEL_NAMES[modStorage.logConfig[category]]}" to "${LOG_LEVEL_NAMES[accessLevel]}"`);
            if (!character.isPlayer()) {
                ChatRoomSendLocal(`${character.toNicknamedString()} changed log configuration "${LOG_CONFIG_NAMES[category]}" ` +
                    `from "${LOG_LEVEL_NAMES[modStorage.logConfig[category]]}" to "${LOG_LEVEL_NAMES[accessLevel]}"`, undefined, character.MemberNumber);
            }
        }
        modStorage.logConfig[category] = accessLevel;
        modStorageSync();
        notifyOfChange();
        return true;
    }
    function logClear(character) {
        if (!moduleIsEnabled(ModuleCategory.Log))
            return false;
        if (character && !checkPermissionAccess("log_delete", character)) {
            return false;
        }
        modStorage.log = [];
        logMessageAdd(LogAccessLevel.everyone, LogEntryType.plaintext, "The log has been cleared");
        return true;
    }
    function getVisibleLogEntries(character) {
        if (!moduleIsEnabled(ModuleCategory.Log))
            return [];
        if (!modStorage.log) {
            throw new Error("Mod storage log not initialized");
        }
        const allow = {
            [LogAccessLevel.none]: character.isPlayer(),
            [LogAccessLevel.normal]: checkPermissionAccess("log_view_normal", character),
            [LogAccessLevel.protected]: checkPermissionAccess("log_view_protected", character),
            [LogAccessLevel.everyone]: true,
        };
        return modStorage.log.filter(e => allow[e[1]]);
    }
    function logMessageRender(entry, character) {
        var _a, _b;
        if (entry[2] === LogEntryType.plaintext) {
            const e = entry;
            return e[3];
        }
        else if (entry[2] === LogEntryType.deleted) {
            return "[Log message deleted]";
        }
        else if (entry[2] === LogEntryType.ruleTrigger || entry[2] === LogEntryType.ruleTriggerAttempt) {
            const data = entry[3];
            if (!Array.isArray(data) || data.length !== 2 || typeof data[0] !== "string") {
                return `[ERROR: Bad data for type ${entry[2]}]`;
            }
            if (!guard_BCX_Rule(data[0])) {
                return `[ERROR: Trigger for unknown rule "${data[0]}"]`;
            }
            const rule = RulesGetDisplayDefinition(data[0]);
            const log = entry[2] === LogEntryType.ruleTriggerAttempt ? (_a = rule.triggerTexts) === null || _a === void 0 ? void 0 : _a.attempt_log : (_b = rule.triggerTexts) === null || _b === void 0 ? void 0 : _b.log;
            return log ? dictionaryProcess(log, { PLAYER_NAME: character.Name, ...data[1] }) : `[ERROR: Missing log text for rule "${data[0]}" trigger]`;
        }
        else if (entry[2] === LogEntryType.curseTrigger) {
            const data = entry[3];
            if (!Array.isArray(data) ||
                data.length !== 2 ||
                data.some(i => typeof i !== "string") ||
                !Object.keys(CURSES_TRIGGER_LOGS).includes(data[0])) {
                return `[ERROR: Bad data for type ${entry[2]}]`;
            }
            return dictionaryProcess(CURSES_TRIGGER_LOGS[data[0]], { PLAYER_NAME: character.Name, ASSET_NAME: data[1] });
        }
        else if (entry[2] === LogEntryType.curseTriggerBatch) {
            const data = entry[3];
            if (typeof data !== "string" ||
                !Object.keys(CURSES_TRIGGER_LOGS_BATCH).includes(data)) {
                return `[ERROR: Bad data for type ${entry[2]}]`;
            }
            return dictionaryProcess(CURSES_TRIGGER_LOGS_BATCH[data], { PLAYER_NAME: character.Name });
        }
        return `[ERROR: Unknown entry type ${entry[2]}]`;
    }
    const alreadyPraisedBy = new Set();
    function logGetAllowedActions(character) {
        var _a;
        return {
            configure: checkPermissionAccess("log_configure", character),
            delete: checkPermissionAccess("log_delete", character),
            leaveMessage: checkPermissionAccess("log_add_note", character) && !!((_a = modStorage.logConfig) === null || _a === void 0 ? void 0 : _a.user_note),
            praise: checkPermissionAccess("log_praise", character) && !alreadyPraisedBy.has(character.MemberNumber),
        };
    }
    function logGetConfig() {
        if (!moduleIsEnabled(ModuleCategory.Log))
            return {};
        if (!modStorage.logConfig) {
            throw new Error("Mod storage log not initialized");
        }
        return { ...modStorage.logConfig };
    }
    function logPraise(value, message, character) {
        if (!moduleIsEnabled(ModuleCategory.Log))
            return false;
        if (![-1, 0, 1].includes(value)) {
            throw new Error("Invalid value");
        }
        if (value === 0 && !message)
            return false;
        const allowed = logGetAllowedActions(character);
        if (value !== 0 && !allowed.praise)
            return false;
        if (message && !allowed.leaveMessage)
            return false;
        if (value !== 0) {
            alreadyPraisedBy.add(character.MemberNumber);
        }
        if (value > 0) {
            if (message) {
                logMessage("user_note", LogEntryType.plaintext, `Praised by ${character} with note: ${message}`);
                ChatRoomSendLocal(`${character.toNicknamedString()} praised you with the following note: ${message}`, undefined, character.MemberNumber);
            }
            else {
                logMessage("praise", LogEntryType.plaintext, `Praised by ${character}`);
                ChatRoomSendLocal(`${character.toNicknamedString()} praised you.`, undefined, character.MemberNumber);
            }
        }
        else if (value < 0) {
            if (message) {
                logMessage("user_note", LogEntryType.plaintext, `Scolded by ${character} with note: ${message}`);
                ChatRoomSendLocal(`${character.toNicknamedString()} scolded you with the following note: ${message}`, undefined, character.MemberNumber);
            }
            else {
                logMessage("praise", LogEntryType.plaintext, `Scolded by ${character}`);
                ChatRoomSendLocal(`${character.toNicknamedString()} scolded you.`, undefined, character.MemberNumber);
            }
        }
        else if (message) {
            logMessage("user_note", LogEntryType.plaintext, `${character} attached a note: ${message}`);
            ChatRoomSendLocal(`${character.toNicknamedString()} put the following note on you: ${message}`, undefined, character.MemberNumber);
        }
        return true;
    }
    const logConfigDefaults = {
        log_config_change: LogAccessLevel.protected,
        log_deleted: LogAccessLevel.normal,
        praise: LogAccessLevel.normal,
        user_note: LogAccessLevel.normal,
        entered_public_room: LogAccessLevel.none,
        entered_private_room: LogAccessLevel.none,
        had_orgasm: LogAccessLevel.none,
        permission_change: LogAccessLevel.protected,
        curse_change: LogAccessLevel.none,
        curse_trigger: LogAccessLevel.none,
        rule_change: LogAccessLevel.none,
        rule_trigger: LogAccessLevel.none,
        command_change: LogAccessLevel.none,
        authority_roles_change: LogAccessLevel.protected,
        relationships_change: LogAccessLevel.none,
    };
    const LOG_CONFIG_NAMES = {
        log_config_change: "Log changes in logging configuration",
        log_deleted: "Log deleted log entries",
        praise: "Log praising or scolding behavior",
        user_note: "Ability to see attached notes",
        entered_public_room: "Log which public rooms are entered",
        entered_private_room: "Log which private rooms are entered",
        had_orgasm: "Log each single orgasm",
        permission_change: "Log changes in permission settings",
        curse_change: "Log each application, removal or change of curses",
        curse_trigger: "Log every time a triggered curse reapplies an item",
        rule_change: "Log each addition, removal or change of rules",
        rule_trigger: "Log every rule violation",
        command_change: "Log each change of commands limit",
        authority_roles_change: "Log getting or losing a BCX owner/mistress",
        relationships_change: "Log each change in relationships module",
    };
    const LOG_LEVEL_NAMES = {
        [LogAccessLevel.everyone]: "[ERROR]",
        [LogAccessLevel.none]: "No",
        [LogAccessLevel.protected]: "Protected",
        [LogAccessLevel.normal]: "Yes",
    };
    class ModuleLog extends BaseModule {
        init() {
            registerPermission("log_view_normal", {
                name: "Allow to see normal log entries",
                category: ModuleCategory.Log,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.mistress],
                    [Preset.switch]: [true, AccessLevel.mistress],
                    [Preset.submissive]: [true, AccessLevel.friend],
                    [Preset.slave]: [true, AccessLevel.public],
                },
            });
            registerPermission("log_view_protected", {
                name: "Allow to see protected log entries",
                category: ModuleCategory.Log,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.lover],
                    [Preset.switch]: [true, AccessLevel.lover],
                    [Preset.submissive]: [true, AccessLevel.mistress],
                    [Preset.slave]: [true, AccessLevel.mistress],
                },
            });
            registerPermission("log_configure", {
                name: "Allow to configure what is logged",
                category: ModuleCategory.Log,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.owner],
                    [Preset.slave]: [false, AccessLevel.owner],
                },
            });
            registerPermission("log_delete", {
                name: "Allow deleting log entries",
                category: ModuleCategory.Log,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.owner],
                    [Preset.slave]: [false, AccessLevel.owner],
                },
            });
            registerPermission("log_praise", {
                name: "Allow to praise or scold",
                category: ModuleCategory.Log,
                defaults: {
                    [Preset.dominant]: [false, AccessLevel.friend],
                    [Preset.switch]: [false, AccessLevel.friend],
                    [Preset.submissive]: [false, AccessLevel.public],
                    [Preset.slave]: [false, AccessLevel.public],
                },
            });
            registerPermission("log_add_note", {
                name: "Allow to attach notes to the body",
                category: ModuleCategory.Log,
                defaults: {
                    [Preset.dominant]: [false, AccessLevel.mistress],
                    [Preset.switch]: [false, AccessLevel.mistress],
                    [Preset.submissive]: [false, AccessLevel.friend],
                    [Preset.slave]: [false, AccessLevel.public],
                },
            });
            queryHandlers.logData = (sender) => {
                return getVisibleLogEntries(sender);
            };
            queryHandlers.logDelete = (sender, data) => {
                if (typeof data === "number" || (Array.isArray(data) && data.every(item => typeof item === "number"))) {
                    return logMessageDelete(data, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.logConfigGet = (sender) => {
                if (sender.isPlayer() || checkPermissionAccess("log_configure", sender)) {
                    return logGetConfig();
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.logConfigEdit = (sender, data) => {
                if (!isObject$1(data) ||
                    typeof data.category !== "string" ||
                    typeof data.target !== "number") {
                    console.warn(`BCX: Bad logConfigEdit query from ${sender}`, data);
                    return undefined;
                }
                return logConfigSet(data.category, data.target, sender);
            };
            queryHandlers.logClear = (sender) => {
                return logClear(sender);
            };
            queryHandlers.logPraise = (sender, data) => {
                if (!isObject$1(data) ||
                    (data.message !== null && typeof data.message !== "string") ||
                    ![-1, 0, 1].includes(data.value)) {
                    console.warn(`BCX: Bad logPraise query from ${sender}`, data);
                    return undefined;
                }
                return logPraise(data.value, data.message, sender);
            };
            queryHandlers.logGetAllowedActions = (sender) => {
                return logGetAllowedActions(sender);
            };
            registerWhisperCommand("modules", "log", "- Manage the behaviour log", (argv, sender, respond) => {
                const subcommand = (argv[0] || "").toLocaleLowerCase();
                if (subcommand === "list") {
                    const logEntries = getVisibleLogEntries(sender);
                    if (logEntries.length === 0) {
                        return respond(`You have no permission to view the log.`);
                    }
                    const totalPages = Math.ceil(logEntries.length / 5);
                    const page = clamp$1(Number.parseInt(argv[1] || "", 10) || 1, 1, totalPages);
                    let result = `Page ${page} / ${totalPages}:`;
                    for (let i = 5 * (page - 1); i < Math.min(5 * page, logEntries.length); i++) {
                        const entry = logEntries[i];
                        const time = new Date(entry[0]);
                        result += `\n[${time.toUTCString()}] (${entry[0]})\n  ${logMessageRender(entry, getPlayerCharacter())}`;
                    }
                    respond(result);
                }
                else if (subcommand === "delete") {
                    if (!/^[0-9]+$/.test(argv[1] || "")) {
                        return respond(`Expected number as timestamp.`);
                    }
                    const timestamp = Number.parseInt(argv[1], 10);
                    if (!getVisibleLogEntries(sender).some(logentry => logentry[0] === timestamp)) {
                        return respond(`No such log entry found`);
                    }
                    respond(logMessageDelete(timestamp, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                }
                else if (subcommand === "praise" || subcommand === "scold") {
                    if (!checkPermissionAccess("log_praise", sender)) {
                        return respond(COMMAND_GENERIC_ERROR);
                    }
                    respond(logPraise(subcommand === "praise" ? 1 : -1, null, sender) ? `Ok.` :
                        `The command failed to execute, likely because you already did ${subcommand} recently.`);
                }
                else if (subcommand === "config") {
                    if (!checkPermissionAccess("log_configure", sender)) {
                        return respond(COMMAND_GENERIC_ERROR);
                    }
                    const category = argv[1] || "";
                    const config = logGetConfig();
                    if (!category) {
                        let result = "Current log config:";
                        for (const [k, v] of Object.entries(config)) {
                            if (LOG_CONFIG_NAMES[k] !== undefined &&
                                LOG_LEVEL_NAMES[v] !== undefined) {
                                result += `\n[${k}]\n  ${LOG_CONFIG_NAMES[k]}: ${LOG_LEVEL_NAMES[v]}`;
                            }
                        }
                        return respond(result);
                    }
                    else if (LOG_CONFIG_NAMES[category] === undefined) {
                        return respond(`Unknown category "${category}".`);
                    }
                    else {
                        const level = (argv[2] || "").toLocaleLowerCase();
                        if (level !== "yes" && level !== "protected" && level !== "no") {
                            return respond(`Expected level to be one of:\nno, protected, yes`);
                        }
                        return respond(logConfigSet(category, level === "yes" ? LogAccessLevel.normal : level === "protected" ? LogAccessLevel.protected : LogAccessLevel.none, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                    }
                }
                else {
                    respond(Command_fixExclamationMark(sender, `!log usage:\n` +
                        `!log list [page] - List all visible logs\n` +
                        `!log delete <timestamp> - Deletes the log with the given <timestamp> (the number in parentheses in list)\n` +
                        `!log praise - Note that you praised ${Player.Name} in her log\n` +
                        `!log scold - Note that you scolded ${Player.Name} in her log\n` +
                        `!log config - Shows the current logging settings for ${Player.Name}\n` +
                        `!log config <category> <no|protected|yes> - Sets visibility of the given config <category>`));
                }
            }, (argv, sender) => {
                if (argv.length <= 1) {
                    const c = argv[0].toLocaleLowerCase();
                    return ["list", "delete", "praise", "scold", "config"].filter(i => i.startsWith(c));
                }
                const subcommand = argv[0].toLocaleLowerCase();
                if (subcommand === "delete") {
                    if (argv.length === 2) {
                        return getVisibleLogEntries(sender).map(logentry => logentry[0].toString()).filter(i => i.startsWith(argv[1]));
                    }
                }
                else if (subcommand === "config") {
                    if (!checkPermissionAccess("log_configure", sender)) {
                        return [];
                    }
                    if (argv.length === 2) {
                        return Object.keys(logGetConfig()).concat("").filter(i => i.startsWith(argv[1].toLocaleLowerCase()));
                    }
                    else if (argv.length === 3) {
                        return ["no", "protected", "yes"].filter(i => i.startsWith(argv[2].toLocaleLowerCase()));
                    }
                }
                return [];
            });
            ExportImportRegisterCategory({
                category: `logConfig`,
                name: `Behaviour Log - Configuration`,
                module: ModuleCategory.Log,
                export: () => logGetConfig(),
                import: (data, character) => {
                    var _a;
                    let res = "";
                    for (const [k, v] of Object.entries(data)) {
                        const category = k;
                        if (((_a = modStorage.logConfig) === null || _a === void 0 ? void 0 : _a[category]) === undefined || LOG_CONFIG_NAMES[category] === undefined) {
                            res += `Skipped unknown log config category '${category}'\n`;
                            continue;
                        }
                        if (!logConfigSet(category, v, character)) {
                            res += `Error setting category '${LOG_CONFIG_NAMES[category]}'\n`;
                        }
                    }
                    return res + `Done!`;
                },
                importPermissions: ["log_configure"],
                importValidator: z.record(z.nativeEnum(LogAccessLevel)),
            });
        }
        load() {
            if (!moduleIsEnabled(ModuleCategory.Log)) {
                delete modStorage.log;
                delete modStorage.logConfig;
                return;
            }
            if (!Array.isArray(modStorage.log)) {
                logClear(null);
            }
            else if (!modStorage.log.every(e => Array.isArray(e) &&
                e.length === 4 &&
                typeof e[0] === "number" &&
                typeof e[1] === "number" &&
                typeof e[2] === "number")) {
                console.error("BCX: Some log entries have invalid format, reseting whole log!");
                logClear(null);
            }
            if (!modStorage.logConfig) {
                modStorage.logConfig = { ...logConfigDefaults };
            }
            else {
                const transitionDictionary = {
                    permissionChange: "permission_change",
                    logConfigChange: "log_config_change",
                    logDeleted: "log_deleted",
                    userNote: "user_note",
                    curseChange: "curse_change",
                    curseTrigger: "curse_trigger",
                    hadOrgasm: "had_orgasm",
                    enteredPublicRoom: "entered_public_room",
                    enteredPrivateRoom: "entered_private_room",
                    ownershipChangesBCX: "authority_roles_change",
                };
                for (const k of Object.keys(modStorage.logConfig)) {
                    if (transitionDictionary[k] !== undefined) {
                        console.info(`BCX: Updating log config name "${k}"->"${transitionDictionary[k]}"`);
                        modStorage.logConfig[transitionDictionary[k]] = modStorage.logConfig[k];
                        delete modStorage.logConfig[k];
                        continue;
                    }
                    if (logConfigDefaults[k] === undefined) {
                        console.info(`BCX: Removing unknown log config category "${k}"`);
                        delete modStorage.logConfig[k];
                    }
                }
                for (const k of Object.keys(logConfigDefaults)) {
                    if (modStorage.logConfig[k] === undefined) {
                        console.info(`BCX: Adding missing log category "${k}"`);
                        modStorage.logConfig[k] = logConfigDefaults[k];
                    }
                }
            }
            hookFunction("ActivityOrgasmStart", 0, (args, next) => {
                const C = args[0];
                if (C.ID === 0 && (typeof ActivityOrgasmRuined === "undefined" || !ActivityOrgasmRuined)) {
                    logMessage("had_orgasm", LogEntryType.plaintext, `${Player.Name} had an orgasm`);
                }
                return next(args);
            }, ModuleCategory.Log);
            hookFunction("ChatRoomSync", 0, (args, next) => {
                const data = args[0];
                if (data.Private) {
                    logMessage("entered_private_room", LogEntryType.plaintext, `${Player.Name} entered private room "${data.Name}"`);
                }
                else {
                    logMessage("entered_public_room", LogEntryType.plaintext, `${Player.Name} entered public room "${data.Name}"`);
                }
                return next(args);
            }, ModuleCategory.Log);
        }
        reload() {
            removeAllHooksByModule(ModuleCategory.Log);
            this.load();
        }
    }

    const speechHooks = [];
    function registerSpeechHook(hook) {
        if (moduleInitPhase !== ModuleInitPhase.init) {
            throw new Error("Speech hooks can be registered only during init");
        }
        speechHooks.push(hook);
    }
    function falteringSpeech(message) {
        const soundList = ["uuh... ", "uhh... ", "...ah... ", "uhm... ", "mnn... ", "..nn... "];
        let oocMsg = false;
        let firstWord = true;
        let alreadyStudderedWord = false;
        let seed = message.length;
        for (let messageIndex = 0; messageIndex < message.length; messageIndex++) {
            const character = message.charAt(messageIndex).toLowerCase();
            if (character === "(")
                oocMsg = true;
            if (!oocMsg && !alreadyStudderedWord && /\p{L}/igu.test(character)) {
                const studderFactor = Math.floor(Math.sin(seed++) * 100000) % 10;
                if ((!alreadyStudderedWord && studderFactor >= 6) || firstWord) {
                    message = message.substring(0, messageIndex + 1) + "-" + message.substring(messageIndex, message.length);
                    seed++;
                    if (Math.random() < 0.33 && !firstWord) {
                        message = message.substring(0, messageIndex) + soundList[Math.floor(Math.random() * soundList.length)] + message.substring(messageIndex, message.length);
                    }
                    messageIndex += 2;
                    if (firstWord)
                        firstWord = false;
                }
                alreadyStudderedWord = true;
            }
            if (character === ")")
                oocMsg = false;
            if (character === " ")
                alreadyStudderedWord = false;
        }
        return message;
    }
    function parseMsg(msg) {
        var _a;
        const rawMessage = msg;
        if (msg.startsWith("//")) {
            msg = msg.substr(1);
        }
        else if (msg.startsWith("/")) {
            return {
                type: "Command",
                rawMessage,
                originalMessage: msg,
                target: null,
                hasOOC: true,
            };
        }
        if (msg.startsWith("*") || (((_a = Player.ChatSettings) === null || _a === void 0 ? void 0 : _a.MuStylePoses) && msg.startsWith(":") && msg.length > 3)) {
            return null;
        }
        return {
            type: ChatRoomTargetMemberNumber == null ? "Chat" : "Whisper",
            rawMessage,
            originalMessage: msg,
            target: ChatRoomTargetMemberNumber,
            noOOCMessage: msg.replace(/\([^)]*\)*\s?/gs, ""),
            hasOOC: msg.includes("("),
        };
    }
    function processMsg(msg) {
        if (msg.type === "Command") {
            return msg.rawMessage;
        }
        if ((msg.type === "Chat" || msg.type === "Whisper") &&
            ChatRoomShouldBlockGaggedOOCMessage(msg.originalMessage, ChatRoomCharacter.find(C => C.MemberNumber === ChatRoomTargetMemberNumber))) {
            ChatRoomMessage({ Content: "ChatRoomBlockGaggedOOC", Type: "Action", Sender: Player.MemberNumber });
            return null;
        }
        let result = 0;
        for (const hook of speechHooks) {
            if (hook.allowSend) {
                const hookResult = hook.allowSend(msg);
                if (hookResult === 2) {
                    result = 2;
                }
                else if (hookResult === 1 && result === 0) {
                    result = 1;
                }
            }
        }
        if (result === 1)
            return null;
        let message = msg.originalMessage;
        for (const hook of speechHooks) {
            if (hook.modify) {
                message = hook.modify(msg, message);
            }
        }
        for (const hook of speechHooks) {
            if (hook.onSend) {
                hook.onSend(msg, message);
            }
        }
        if (message.startsWith("/")) {
            message = "/" + message;
        }
        return message;
    }
    let antigarble = 0;
    function setAntigarble(value) {
        if (![0, 1, 2].includes(value)) {
            throw new Error("Bad antigarble value, expected 0/1/2");
        }
        if (value !== 0) {
            const blockRule = RulesGetRuleState("speech_block_antigarble");
            if (blockRule.isEnforced) {
                blockRule.triggerAttempt();
                return false;
            }
            else if (blockRule.inEffect) {
                blockRule.trigger();
            }
        }
        antigarble = value;
        return true;
    }
    class ModuleSpeech extends BaseModule {
        load() {
            let currentlyProcessedMessage = null;
            hookFunction("CommandParse", 5, (args, next) => {
                const msg = args[0].trim();
                if (msg) {
                    const info = parseMsg(msg);
                    if (info) {
                        const msg2 = processMsg(info);
                        if (msg2 === null) {
                            if (RulesGetRuleState("speech_force_retype").isEnforced) {
                                ElementValue("InputChat", "");
                                if (ChatRoomLastMessage.length > 0 && ChatRoomLastMessage.at(-1) === msg) {
                                    ChatRoomLastMessage.splice(ChatRoomLastMessage.length - 1, 1);
                                    ChatRoomLastMessageIndex = Math.min(ChatRoomLastMessageIndex, ChatRoomLastMessage.length);
                                }
                            }
                            return;
                        }
                        args[0] = msg2;
                        currentlyProcessedMessage = {
                            result: msg2.startsWith("//") ? msg2.substring(1) : msg2,
                            original: info.originalMessage.startsWith("//") ? info.originalMessage.substring(1) : info.originalMessage,
                            target: info.target,
                        };
                    }
                }
                const res = next(args);
                currentlyProcessedMessage = null;
                return res;
            });
            hookFunction("ServerSend", 1, (args, next) => {
                const data = args[1];
                if (args[0] === "ChatRoomChat" &&
                    currentlyProcessedMessage &&
                    isObject$1(data) &&
                    (data.Type === "Whisper" || data.Type === "Chat") &&
                    (typeof data.Target === "number" ? data.Target : null) === currentlyProcessedMessage.target &&
                    data.Content !== currentlyProcessedMessage.original) {
                    if (!Array.isArray(data.Dictionary)) {
                        data.Dictionary = [];
                    }
                    data.Dictionary.push({ Tag: "BCX_ORIGINAL_MESSAGE", Text: currentlyProcessedMessage.original });
                }
                return next(args);
            });
            hookFunction("ChatRoomMessage", 1, (args, next) => {
                const data = args[0];
                if (antigarble > 0 &&
                    isObject$1(data) &&
                    data.Type === "Whisper" &&
                    typeof data.Content === "string" &&
                    Array.isArray(data.Dictionary)) {
                    const orig = data.Dictionary.find(i => isObject$1(i) && i.Tag === "BCX_ORIGINAL_MESSAGE" && typeof i.Text === "string");
                    if (orig && data.Content !== orig.Text) {
                        if (antigarble === 2) {
                            data.Content = orig.Text;
                        }
                        else {
                            data.Content += ` <> ${orig.Text}`;
                        }
                    }
                }
                return next(args);
            });
            hookFunction("CommandParse", 0, (args, next) => next(args));
            hookFunction("ChatRoomSendEmote", 5, (args, next) => {
                var _a;
                const rawMessage = args[0];
                let msg = rawMessage;
                if (((_a = Player.ChatSettings) === null || _a === void 0 ? void 0 : _a.MuStylePoses) && msg.startsWith(":"))
                    msg = msg.substring(1);
                else {
                    msg = msg.replace(/^\*/, "").replace(/\*$/, "");
                    if (msg.startsWith("/me "))
                        msg = msg.replace("/me ", "");
                    if (msg.startsWith("/action "))
                        msg = msg.replace("/action ", "*");
                }
                msg = msg.trim();
                const msg2 = processMsg({
                    type: "Emote",
                    rawMessage,
                    originalMessage: msg,
                    target: ChatRoomTargetMemberNumber,
                    noOOCMessage: msg,
                    hasOOC: false,
                });
                if (msg2 !== null) {
                    return next(["*" + msg2]);
                }
                else if (RulesGetRuleState("speech_force_retype").isEnforced) {
                    const chat = document.getElementById("InputChat");
                    if (chat) {
                        chat.value = "";
                    }
                }
            });
            const ANTIGARBLE_LEVELS = {
                "0": 0,
                "1": 1,
                "2": 2,
                "normal": 0,
                "both": 1,
                "ungarbled": 2,
            };
            const ANTIGARBLE_LEVEL_NAMES = Object.keys(ANTIGARBLE_LEVELS).filter(k => k.length > 1);
            registerCommand$1("cheats", "antigarble", "<level> - Set garble prevention to show [normal|both|ungarbled] messages (only affects received messages!)", value => {
                const val = ANTIGARBLE_LEVELS[value || ""];
                if (val !== undefined) {
                    if (setAntigarble(val)) {
                        ChatRoomSendLocal(`Antigarble set to ${ANTIGARBLE_LEVEL_NAMES[val]}`);
                        return true;
                    }
                    return false;
                }
                ChatRoomSendLocal(`Invalid antigarble level; use ${ANTIGARBLE_LEVEL_NAMES.join("/")}`);
                return false;
            }, value => {
                return ANTIGARBLE_LEVEL_NAMES.filter(k => k.length > 1 && k.startsWith(value));
            });
            hookFunction("SpeechGarble", 6, (args, next) => {
                if (antigarble === 2)
                    return args[1];
                let res = next(args);
                if (typeof res === "string" && res !== args[1] && antigarble === 1)
                    res += ` <> ${args[1]}`;
                return res;
            });
            if (typeof window.InventoryItemNeckAccessoriesCollarAutoShockUnitDetectSpeech === "function") {
                hookFunction("InventoryItemNeckAccessoriesCollarAutoShockUnitDetectSpeech", 10, (args, next) => {
                    if (ChatRoomLastMessage &&
                        ChatRoomLastMessage.length > 0 &&
                        ChatRoomLastMessage[ChatRoomLastMessage.length - 1].startsWith(".") &&
                        !ChatRoomLastMessage[ChatRoomLastMessage.length - 1].startsWith(".."))
                        return false;
                    return next(args);
                });
            }
        }
    }

    const RelationshipData_schema = z.object({
        memberNumber: z.number(),
        nickname: z.string().refine(isValidNickname),
        enforceNickname: z.boolean(),
    });
    const NICKNAME_LENGTH_MAX = 20;
    const NICKNAME_REGEX = /^[\p{L}0-9\p{Z}'-]+$/u;
    function isValidNickname(nickname) {
        return (nickname.trim() === nickname &&
            nickname.length > 0 &&
            nickname.length <= NICKNAME_LENGTH_MAX &&
            NICKNAME_REGEX.test(nickname));
    }
    function guard_RelationshipData(data) {
        const d = data;
        return isObject$1(d) &&
            typeof d.memberNumber === "number" &&
            typeof d.nickname === "string" &&
            isValidNickname(d.nickname) &&
            typeof d.enforceNickname === "boolean";
    }
    function RelationshipsGetNickname(target) {
        if (target instanceof ChatroomCharacter) {
            target = target.MemberNumber;
        }
        if (target != null && moduleIsEnabled(ModuleCategory.Relationships) && modStorage.relationships) {
            const rel = modStorage.relationships.find(r => r.memberNumber === target);
            if (rel)
                return rel.nickname;
        }
        return null;
    }
    class ModuleRelationhips extends BaseModule {
        init() {
            registerPermission("relationships_view_all", {
                name: "Allow viewing others in relationship list",
                category: ModuleCategory.Relationships,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [true, AccessLevel.mistress],
                    [Preset.slave]: [true, AccessLevel.mistress],
                },
            });
            registerPermission("relationships_modify_self", {
                name: "Allow changing relationship config for herself",
                category: ModuleCategory.Relationships,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [false, AccessLevel.mistress],
                    [Preset.slave]: [false, AccessLevel.mistress],
                },
            });
            registerPermission("relationships_modify_others", {
                name: "Allow changing relationship config for others",
                category: ModuleCategory.Relationships,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [false, AccessLevel.mistress],
                    [Preset.slave]: [false, AccessLevel.mistress],
                },
            });
            queryHandlers.relatonshipsGet = (sender) => {
                if (!moduleIsEnabled(ModuleCategory.Relationships) || !modStorage.relationships)
                    return undefined;
                const viewAll = checkPermissionAccess("relationships_view_all", sender);
                return {
                    relationships: viewAll ? cloneDeep(modStorage.relationships) : cloneDeep(modStorage.relationships.filter(r => r.memberNumber === sender.MemberNumber)),
                    access_view_all: viewAll,
                    access_modify_self: checkPermissionAccess("relationships_modify_self", sender),
                    access_modify_others: viewAll && checkPermissionAccess("relationships_modify_others", sender),
                };
            };
            queryHandlers.relationshipsRemove = (sender, data) => {
                if (!moduleIsEnabled(ModuleCategory.Relationships) ||
                    !modStorage.relationships ||
                    typeof data !== "number")
                    return undefined;
                const index = modStorage.relationships.findIndex(i => i.memberNumber === data);
                if (index < 0)
                    return true;
                if (!checkPermissionAccess(sender.MemberNumber === data ? "relationships_modify_self" : "relationships_modify_others", sender))
                    return false;
                modStorage.relationships.splice(index, 1);
                logMessage("relationships_change", LogEntryType.plaintext, `${sender} removed the set custom name for ${getCharacterName(data, "[unknown name]")} (${data})`);
                if (!sender.isPlayer()) {
                    ChatRoomSendLocal(`${sender.toNicknamedString()} removed the set custom name for ${getCharacterNickname(data, "[unknown name]")} (${data})`, undefined, sender.MemberNumber);
                }
                modStorageSync();
                notifyOfChange();
                return true;
            };
            queryHandlers.relationshipsSet = (sender, data) => {
                var _a;
                if (!moduleIsEnabled(ModuleCategory.Relationships) ||
                    !modStorage.relationships ||
                    !guard_RelationshipData(data))
                    return undefined;
                data = pick(data, ["memberNumber", "nickname", "enforceNickname"]);
                const index = modStorage.relationships.findIndex(i => i.memberNumber === data.memberNumber);
                if (index >= 0 && isEqual(modStorage.relationships[index], data))
                    return true;
                if (!checkPermissionAccess(sender.MemberNumber === data.memberNumber ? "relationships_modify_self" : "relationships_modify_others", sender))
                    return false;
                const oldData = index >= 0 ? modStorage.relationships[index] : null;
                if (index >= 0) {
                    modStorage.relationships[index] = data;
                }
                else {
                    modStorage.relationships.push(data);
                }
                if ((oldData === null || oldData === void 0 ? void 0 : oldData.nickname) !== data.nickname) {
                    logMessage("relationships_change", LogEntryType.plaintext, `${sender} changed the custom name for ${getCharacterName(data.memberNumber, "[unknown name]")} (${data.memberNumber}) to '${data.nickname}'`);
                    if (!sender.isPlayer()) {
                        ChatRoomSendLocal(`${sender.toNicknamedString()} changed the custom name for character ${data.memberNumber} to '${data.nickname}'`, undefined, sender.MemberNumber);
                    }
                }
                if (((_a = oldData === null || oldData === void 0 ? void 0 : oldData.enforceNickname) !== null && _a !== void 0 ? _a : false) !== data.enforceNickname) {
                    logMessage("relationships_change", LogEntryType.plaintext, `${sender} ${data.enforceNickname ? "started" : "stopped"} custom name enforcement for ${getCharacterName(data.memberNumber, "[unknown name]")} (${data.memberNumber})`);
                    if (!sender.isPlayer()) {
                        ChatRoomSendLocal(`${sender.toNicknamedString()} ${data.enforceNickname ? "now requires" : "no longer requires"} you to only use ${getCharacterNickname(data.memberNumber, "[unknown name]")}'s (${data.memberNumber}) custom name.`, undefined, sender.MemberNumber);
                    }
                }
                modStorageSync();
                notifyOfChange();
                return true;
            };
            registerSpeechHook({
                allowSend: (msg) => {
                    if (moduleIsEnabled(ModuleCategory.Relationships) &&
                        modStorage.relationships &&
                        (msg.type === "Chat" || msg.type === "Whisper")) {
                        const allowed = new Set();
                        const forbiden = new Set();
                        for (const char of getAllCharactersInRoom()) {
                            const rel = modStorage.relationships.find(r => r.memberNumber === char.MemberNumber);
                            if (rel) {
                                allowed.add(rel.nickname.toLowerCase());
                            }
                            if (rel && rel.enforceNickname) {
                                forbiden.add(char.Character.Name.toLowerCase());
                                if (char.Character.Nickname && isValidNickname(char.Character.Nickname)) {
                                    forbiden.add(char.Character.Nickname.toLowerCase());
                                }
                            }
                            else {
                                allowed.add(char.Character.Name.toLowerCase());
                                if (char.Character.Nickname && isValidNickname(char.Character.Nickname)) {
                                    allowed.add(char.Character.Nickname.toLowerCase());
                                }
                            }
                        }
                        const transgression = Array.from(forbiden).find(i => {
                            var _a;
                            return ((_a = msg.noOOCMessage) !== null && _a !== void 0 ? _a : msg.originalMessage).toLocaleLowerCase().match(new RegExp(`([^\\p{L}]|^)${escapeRegExp$1(i.trim())}([^\\p{L}]|$)`, "iu")) &&
                                !Array.from(allowed).some(allow => {
                                    var _a;
                                    return findMatch(i, allow) && ((_a = msg.noOOCMessage) !== null && _a !== void 0 ? _a : msg.originalMessage).toLocaleLowerCase().match(new RegExp(`([^\\p{L}]|^)${escapeRegExp$1(allow.trim())}([^\\p{L}]|$)`, "iu"));
                                });
                        });
                        if (transgression !== undefined) {
                            ChatRoomSendLocal(`You are not allowed to use the name '${transgression}'! You need to use the name for her that was given to you!`, 7000);
                            return 1;
                        }
                    }
                    return 0;
                },
            });
            ExportImportRegisterCategory({
                category: `relationships`,
                name: `Relationships`,
                module: ModuleCategory.Relationships,
                export: (character) => {
                    var _a;
                    if (character && !checkPermissionAccess("relationships_view_all", character)) {
                        throw new Error("Missing the following permission required to export:\nAllow viewing others in relationship list");
                    }
                    return (_a = modStorage.relationships) !== null && _a !== void 0 ? _a : [];
                },
                import: (data, character) => {
                    data = uniqBy(data, r => r.memberNumber);
                    modStorage.relationships = data;
                    if (character) {
                        logMessage("relationships_change", LogEntryType.plaintext, `${character} imported settings for relationships module`);
                        if (!character.isPlayer()) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} settings for relationships module`, undefined, character.MemberNumber);
                        }
                    }
                    return `Done!`;
                },
                importPermissions: ["relationships_view_all", "relationships_modify_self", "relationships_modify_others"],
                importValidator: z.array(RelationshipData_schema),
            });
        }
        load() {
            if (!moduleIsEnabled(ModuleCategory.Relationships)) {
                delete modStorage.relationships;
                return;
            }
            if (!Array.isArray(modStorage.relationships)) {
                modStorage.relationships = [];
            }
            const seen = new Set();
            for (let i = 0; i < modStorage.relationships.length; i++) {
                const e = modStorage.relationships[i];
                if (!guard_RelationshipData(e) ||
                    seen.has(e.memberNumber)) {
                    modStorage.relationships.splice(i, 1);
                    i--;
                    continue;
                }
                seen.add(e.memberNumber);
            }
            let shouldReplaceNickname = false;
            hookFunction("CharacterNickname", 4, (args, next) => {
                const C = args[0];
                if (shouldReplaceNickname && modStorage.relationships && C) {
                    const entry = modStorage.relationships.find(r => r.memberNumber === C.MemberNumber);
                    if (entry) {
                        return entry.nickname;
                    }
                }
                return next(args);
            }, ModuleCategory.Relationships);
            hookFunction("ChatRoomRun", 0, (args, next) => {
                shouldReplaceNickname = true;
                const res = next(args);
                shouldReplaceNickname = false;
                return res;
            }, ModuleCategory.Relationships);
            hookFunction("ChatRoomMessage", 4, (args, next) => {
                const data = args[0];
                const original = shouldReplaceNickname;
                if (isObject$1(data) &&
                    ["Action", "Chat", "Whisper", "Emote", "Activity", "ServerMessage"].includes(data.Type) &&
                    modStorage.relationships) {
                    shouldReplaceNickname = true;
                }
                const res = next(args);
                shouldReplaceNickname = original;
                return res;
            });
            hookFunction("CommandParse", 0, (args, next) => {
                const original = shouldReplaceNickname;
                if (ChatRoomTargetMemberNumber) {
                    shouldReplaceNickname = true;
                }
                const res = next(args);
                shouldReplaceNickname = original;
                return res;
            });
            patchFunction("CommandParse", {
                'TextGet("WhisperTo") + " " + TargetName + ": " + msg;': 'TextGet("WhisperTo") + " " + (WhisperTarget ? CharacterNickname(WhisperTarget) : TargetName) + ": " + msg;',
            });
            patchFunction("ChatRoomTarget", {
                "TargetName = ChatRoomCharacter[C].Name;": "TargetName = CharacterNickname(ChatRoomCharacter[C]);",
            });
        }
        reload() {
            removeAllHooksByModule(ModuleCategory.Relationships);
            this.load();
        }
    }
    function findMatch(name, sentence) {
        if (typeof name === "string") {
            name = name.split(" ").map(i => i.trim()).filter(Boolean);
        }
        if (typeof sentence === "string") {
            sentence = sentence.split(" ").map(i => i.trim()).filter(Boolean);
        }
        for (let j = 0; j < sentence.length; j++) {
            let matches = true;
            for (let i = 0; i < name.length; i++) {
                if (j + i >= sentence.length || name[i] !== sentence[j + i]) {
                    matches = false;
                    break;
                }
            }
            if (matches) {
                return true;
            }
        }
        return false;
    }

    function initRules_bc_alter() {
        registerRule("alt_restrict_hearing", {
            name: "Sensory deprivation: Sound",
            type: 1,
            loggable: false,
            shortDescription: "impacts PLAYER_NAME's hearing; adjustable",
            longDescription: "This rule impacts PLAYER_NAME's natural ability to hear in the same way items do, independent of them (strength of deafening can be adjusted).",
            keywords: ["deafness", "limit", "permanent", "ears"],
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                deafeningStrength: {
                    type: "listSelect",
                    options: [["light", "Light"], ["medium", "Medium"], ["heavy", "Heavy"]],
                    default: "light",
                    description: "Hearing impairment:",
                },
            },
            load(state) {
                const strengthMap = {
                    light: 1,
                    medium: 2,
                    heavy: 4,
                };
                hookFunction("Player.GetDeafLevel", 1, (args, next) => {
                    var _a;
                    let res = next(args);
                    if (state.isEnforced && state.customData) {
                        res += (_a = strengthMap[state.customData.deafeningStrength]) !== null && _a !== void 0 ? _a : 0;
                    }
                    return res;
                }, ModuleCategory.Rules);
            },
        });
        registerRule("alt_hearing_whitelist", {
            name: "Hearing whitelist",
            type: 1,
            loggable: false,
            shortDescription: "of members whom PLAYER_NAME can always understand",
            longDescription: "This rule defines a list of members whose voice can always be understood by PLAYER_NAME - independent of any sensory deprivation items or hearing impairing BCX rules on PLAYER_NAME. There is an additional option to toggle whether PLAYER_NAME can still understand a white-listed member's voice if that member is speech impaired herself (e.g. by being gagged).",
            keywords: ["deafness", "bypass", "ignore", "antigarble", "ears", "exception", "understanding"],
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                whitelistedMembers: {
                    type: "memberNumberList",
                    default: [],
                    description: "Members numbers still heard while hearing impaired:",
                    Y: 350,
                    options: {
                        pageSize: 3,
                    },
                },
                ignoreGaggedMembersToggle: {
                    type: "toggle",
                    default: false,
                    description: "Also understand if those are speech impaired",
                    Y: 710,
                },
            },
            load(state) {
                let ignoreDeaf = false;
                hookFunction("SpeechGarble", 2, (args, next) => {
                    const C = args[0];
                    if (state.isEnforced &&
                        state.customData &&
                        C.MemberNumber != null &&
                        state.customData.whitelistedMembers
                            .filter(m => m !== Player.MemberNumber)
                            .includes(C.MemberNumber) &&
                        (C.CanTalk() || state.customData.ignoreGaggedMembersToggle)) {
                        return args[1];
                    }
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomMessage", 9, (args, next) => {
                    const data = args[0];
                    const C = args[0].Sender;
                    if (state.isEnforced &&
                        state.customData &&
                        typeof C === "number" &&
                        state.customData.whitelistedMembers
                            .filter(m => m !== Player.MemberNumber)
                            .includes(C)) {
                        ignoreDeaf = true;
                        const orig = Array.isArray(data.Dictionary) && data.Dictionary.find((i) => isObject$1(i) && i.Tag === "BCX_ORIGINAL_MESSAGE" && typeof i.Text === "string");
                        if (orig && state.customData.ignoreGaggedMembersToggle) {
                            data.Content = orig.Text;
                        }
                    }
                    next(args);
                    ignoreDeaf = false;
                }, ModuleCategory.Rules);
                trackFunction("PreferenceIsPlayerInSensDep");
                hookFunction("Player.GetDeafLevel", 9, (args, next) => {
                    if (ignoreDeaf) {
                        return 0;
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("alt_restrict_sight", {
            name: "Sensory deprivation: Sight",
            type: 1,
            loggable: false,
            shortDescription: "impacts PLAYER_NAME's sight; adjustable",
            longDescription: "This rule impacts PLAYER_NAME's natural ability to see in the same way items do, independent of them (strength of blindness can be adjusted).",
            keywords: ["seeing", "blindfold", "limit", "permanent", "eyes"],
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                blindnessStrength: {
                    type: "listSelect",
                    options: [["light", "Light"], ["medium", "Medium"], ["heavy", "Heavy"]],
                    default: "light",
                    description: "Eyesight impairment:",
                },
            },
            load(state) {
                const strengthMap = {
                    light: 1,
                    medium: 2,
                    heavy: 3,
                };
                hookFunction("Player.GetBlindLevel", 1, (args, next) => {
                    var _a, _b;
                    let res = next(args);
                    if (state.isEnforced && state.customData) {
                        res += (_a = strengthMap[state.customData.blindnessStrength]) !== null && _a !== void 0 ? _a : 0;
                    }
                    return Math.min(res, ((_b = Player.GameplaySettings) === null || _b === void 0 ? void 0 : _b.SensDepChatLog) === "SensDepLight" ? 2 : 3);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("alt_seeing_whitelist", {
            name: "Seeing whitelist",
            type: 1,
            loggable: false,
            shortDescription: "of members whom PLAYER_NAME can always see",
            longDescription: "This rule defines a list of members whose appearance can always be seen normally by PLAYER_NAME - independent of any blinding items or seeing impairing BCX rules on PLAYER_NAME.",
            keywords: ["sight", "blindness", "bypass", "ignore", "antiblind", "blindfold", "eyes", "seeing"],
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                whitelistedMembers: {
                    type: "memberNumberList",
                    default: [],
                    description: "Members still seen while under blindness:",
                },
            },
            load(state) {
                let noBlind = false;
                hookFunction("DrawCharacter", 0, (args, next) => {
                    const C = args[0];
                    if (state.isEnforced && state.customData && C.MemberNumber != null && state.customData.whitelistedMembers.includes(C.MemberNumber)) {
                        noBlind = true;
                    }
                    next(args);
                    noBlind = false;
                }, ModuleCategory.Rules);
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    const C = args[0];
                    if (state.isEnforced && state.customData && C.MemberNumber != null && state.customData.whitelistedMembers.includes(C.MemberNumber)) {
                        noBlind = true;
                    }
                    next(args);
                    noBlind = false;
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomClickCharacter", 0, (args, next) => {
                    const C = args[0];
                    if (state.isEnforced && state.customData && C.MemberNumber != null && state.customData.whitelistedMembers.includes(C.MemberNumber)) {
                        noBlind = true;
                    }
                    next(args);
                    noBlind = false;
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomMessage", 0, (args, next) => {
                    var _a;
                    let C = null;
                    if (typeof ((_a = args[0]) === null || _a === void 0 ? void 0 : _a.Sender) === "number") {
                        C = getChatroomCharacter(args[0].Sender);
                    }
                    if (C && state.isEnforced && state.customData && C.MemberNumber != null && state.customData.whitelistedMembers.includes(C.MemberNumber)) {
                        noBlind = true;
                    }
                    next(args);
                    noBlind = false;
                }, ModuleCategory.Rules);
                hookFunction("Player.GetBlindLevel", 6, (args, next) => {
                    if (noBlind)
                        return 0;
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomUpdateDisplay", 0, (args, next) => {
                    next(args);
                    if (state.isEnforced && state.customData) {
                        if (ChatRoomCharacterCount === 1) {
                            ChatRoomCharacterDrawlist = [Player];
                        }
                        ChatRoomSenseDepBypass = true;
                        for (const C of ChatRoomCharacter) {
                            if (C.MemberNumber != null && !ChatRoomCharacterDrawlist.includes(C) && state.customData.whitelistedMembers.includes(C.MemberNumber)) {
                                ChatRoomCharacterDrawlist.push(C);
                            }
                        }
                        ChatRoomCharacterDrawlist.sort((a, b) => {
                            return ChatRoomCharacter.indexOf(a) - ChatRoomCharacter.indexOf(b);
                        });
                        ChatRoomCharacterCount = ChatRoomCharacterDrawlist.length;
                    }
                });
            },
        });
        registerRule("alt_eyes_fullblind", {
            name: "Fully blind when eyes are closed",
            type: 1,
            loggable: false,
            longDescription: "This rule enforces full blindness when the eyes are closed. (Light sensory deprivation setting is still respected and doesn't blind fully)",
            keywords: ["seeing", "blindness", "eyes", "blindfold", "realistic", "room"],
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                affectPlayer: {
                    type: "toggle",
                    default: false,
                    description: "Player sees the effect also on herself",
                },
                hideNames: {
                    type: "toggle",
                    default: false,
                    description: "Hide names and icons during the effect",
                    Y: 440,
                },
            },
            tick(state) {
                if (state.isEnforced) {
                    DialogFacialExpressionsSelectedBlindnessLevel = 3;
                }
                return false;
            },
            load(state) {
                hookFunction("DialogClickExpressionMenu", 5, (args, next) => {
                    if (state.isEnforced && MouseIn(220, 50, 90, 90))
                        return;
                    return next(args);
                });
                hookFunction("ChatRoomDrawCharacter", 1, (args, next) => {
                    var _a, _b, _c;
                    if (args[0])
                        return next(args);
                    const ChatRoomHideIconStateBackup = ChatRoomHideIconState;
                    const eyes1 = InventoryGet(Player, "Eyes");
                    const eyes2 = InventoryGet(Player, "Eyes2");
                    if (state.isEnforced &&
                        ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.hideNames) &&
                        ((_b = eyes1 === null || eyes1 === void 0 ? void 0 : eyes1.Property) === null || _b === void 0 ? void 0 : _b.Expression) === "Closed" &&
                        ((_c = eyes2 === null || eyes2 === void 0 ? void 0 : eyes2.Property) === null || _c === void 0 ? void 0 : _c.Expression) === "Closed") {
                        ChatRoomHideIconState = 3;
                    }
                    next(args);
                    ChatRoomHideIconState = ChatRoomHideIconStateBackup;
                });
                hookFunction("DrawCharacter", 1, (args, next) => {
                    var _a, _b, _c, _d;
                    const eyes1 = InventoryGet(Player, "Eyes");
                    const eyes2 = InventoryGet(Player, "Eyes2");
                    if (state.isEnforced &&
                        ((_a = Player.GameplaySettings) === null || _a === void 0 ? void 0 : _a.SensDepChatLog) !== "SensDepLight" &&
                        ((_b = eyes1 === null || eyes1 === void 0 ? void 0 : eyes1.Property) === null || _b === void 0 ? void 0 : _b.Expression) === "Closed" &&
                        ((_c = eyes2 === null || eyes2 === void 0 ? void 0 : eyes2.Property) === null || _c === void 0 ? void 0 : _c.Expression) === "Closed" &&
                        CurrentModule === "Online" &&
                        CurrentScreen === "ChatRoom" &&
                        args[0].IsPlayer() &&
                        ((_d = state.customData) === null || _d === void 0 ? void 0 : _d.affectPlayer))
                        return;
                    return next(args);
                });
            },
        });
        registerRule("alt_field_of_vision", {
            name: "Field of vision for eyes",
            type: 1,
            loggable: false,
            longDescription: "This rule blacks out the bottom half of the room view when eyes are looking up and the upper half when eyes are looking down.",
            keywords: ["seeing", "limit", "angle", "room", "blindfold", "partially", "movement", "gaze", "gazing", "teasing", "viewing", "looking"],
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                affectPlayer: {
                    type: "toggle",
                    default: false,
                    description: "Player sees the effect also on herself",
                },
                hideNames: {
                    type: "toggle",
                    default: false,
                    description: "Hide names and icons during the effect",
                    Y: 440,
                },
            },
            load(state) {
                let limitTop = 0;
                let limitBottom = 0;
                const GRADIENT_TIP_POINT = 0.9;
                let inRoomDraw = false;
                hookFunction("ChatRoomDrawBackground", 6, (args, next) => {
                    next(args);
                    const Y = args[1];
                    const Zoom = args[2];
                    const height = 1000 * Zoom;
                    if (limitTop > 0) {
                        const Grad = MainCanvas.createLinearGradient(0, Y, 0, Y + limitTop * height);
                        Grad.addColorStop(0, "#000");
                        Grad.addColorStop(GRADIENT_TIP_POINT, "#000");
                        Grad.addColorStop(1, "rgba(0,0,0,0)");
                        MainCanvas.fillStyle = Grad;
                        MainCanvas.fillRect(0, Y, 1000, limitTop * height);
                    }
                    if (limitBottom > 0) {
                        const bottomY = Y + (1 - limitBottom) * height;
                        const Grad = MainCanvas.createLinearGradient(0, bottomY + limitBottom * height, 0, bottomY);
                        Grad.addColorStop(0, "#000");
                        Grad.addColorStop(GRADIENT_TIP_POINT, "#000");
                        Grad.addColorStop(1, "rgba(0,0,0,0)");
                        MainCanvas.fillStyle = Grad;
                        MainCanvas.fillRect(0, bottomY, 1000, limitBottom * height);
                    }
                });
                hookFunction("ChatRoomDrawCharacter", 2, (args, next) => {
                    var _a, _b, _c, _d, _e, _f, _g;
                    if (args[0])
                        return next(args);
                    const ChatRoomHideIconStateBackup = ChatRoomHideIconState;
                    limitTop = 0;
                    limitBottom = 0;
                    if (state.isEnforced) {
                        const offset = Player.IsKneeling() ? 0.28 : 0;
                        const eyes1 = InventoryGet(Player, "Eyes");
                        const eyes2 = InventoryGet(Player, "Eyes2");
                        if (eyes1 && eyes2) {
                            if (((_a = eyes1.Property) === null || _a === void 0 ? void 0 : _a.Expression) === "Shy" || ((_b = eyes2.Property) === null || _b === void 0 ? void 0 : _b.Expression) === "Shy") {
                                limitTop = 0.58 + offset;
                            }
                            else if (((_c = eyes1.Property) === null || _c === void 0 ? void 0 : _c.Expression) === "Lewd" || ((_d = eyes2.Property) === null || _d === void 0 ? void 0 : _d.Expression) === "Lewd") {
                                limitBottom = 0.76 - offset;
                            }
                            else if (((_e = eyes1.Property) === null || _e === void 0 ? void 0 : _e.Expression) === "VeryLewd" || ((_f = eyes2.Property) === null || _f === void 0 ? void 0 : _f.Expression) === "VeryLewd") {
                                limitBottom = 0.93 - offset;
                            }
                        }
                        if (CharacterAppearsInverted(Player)) {
                            [limitTop, limitBottom] = [limitBottom, limitTop];
                        }
                    }
                    if (limitTop || limitBottom) {
                        inRoomDraw = true;
                        if ((_g = state.customData) === null || _g === void 0 ? void 0 : _g.hideNames) {
                            ChatRoomHideIconState = 3;
                        }
                    }
                    next(args);
                    inRoomDraw = false;
                    ChatRoomHideIconState = ChatRoomHideIconStateBackup;
                });
                let DrawC = null;
                hookFunction("DrawCharacter", 0, (args, next) => {
                    DrawC = args[0];
                    const res = next(args);
                    DrawC = null;
                    return res;
                });
                hookFunction("DrawImageEx", 6, (args, next) => {
                    var _a;
                    const Source = args[0];
                    if (inRoomDraw &&
                        (ChatRoomCharacterDrawlist.some(C => C.Canvas === Source || C.CanvasBlink === Source) ||
                            CharacterCanvas.canvas === Source) &&
                        Source instanceof HTMLCanvasElement &&
                        DrawC &&
                        (!DrawC.IsPlayer() || ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.affectPlayer))) {
                        const Canvas = Source;
                        const CharacterCanvas = document.createElement("canvas").getContext("2d");
                        CharacterCanvas.canvas.width = 500;
                        CharacterCanvas.canvas.height = CanvasDrawHeight;
                        CharacterCanvas.globalCompositeOperation = "copy";
                        CharacterCanvas.drawImage(Canvas, 0, 0);
                        CharacterCanvas.globalCompositeOperation = "source-atop";
                        const HeightRatio = DrawC.HeightRatio;
                        const YOffset = CharacterAppearanceYOffset(DrawC, HeightRatio);
                        const YCutOff = YOffset >= 0 || CurrentScreen === "ChatRoom";
                        const YStart = CanvasUpperOverflow + (YCutOff ? -YOffset / HeightRatio : 0);
                        const SourceHeight = 1000 / HeightRatio + (YCutOff ? 0 : -YOffset / HeightRatio);
                        const [top, bottom] = CharacterAppearsInverted(DrawC) ? [limitBottom, limitTop] : [limitTop, limitBottom];
                        if (top) {
                            const Grad = CharacterCanvas.createLinearGradient(0, YStart, 0, YStart + SourceHeight * top);
                            Grad.addColorStop(0, "#000");
                            Grad.addColorStop(GRADIENT_TIP_POINT, "#000");
                            Grad.addColorStop(1, "rgba(0,0,0,0)");
                            CharacterCanvas.fillStyle = Grad;
                            CharacterCanvas.fillRect(0, YStart, Canvas.width, SourceHeight * top);
                        }
                        if (bottom) {
                            const Y = YStart + (1 - bottom) * SourceHeight;
                            const Grad = CharacterCanvas.createLinearGradient(0, YStart + SourceHeight, 0, Y);
                            Grad.addColorStop(0, "#000");
                            Grad.addColorStop(GRADIENT_TIP_POINT, "#000");
                            Grad.addColorStop(1, "rgba(0,0,0,0)");
                            CharacterCanvas.fillStyle = Grad;
                            CharacterCanvas.fillRect(0, Y, Canvas.width, Canvas.height - Y);
                        }
                        args[0] = CharacterCanvas.canvas;
                    }
                    return next(args);
                });
            },
        });
        registerRule("alt_blindfolds_fullblind", {
            name: "Fully blind when blindfolded",
            type: 1,
            loggable: false,
            longDescription: "This rule enforces full blindness when wearing any item that limits sight in any way. (This rules does NOT respect Light sensory deprivation setting and always forces player to be fully blind. The crafting property 'thin' is not factored in either due to technical limitations. )",
            keywords: ["seeing", "blindness", "limit", "eyes", "realistic", "room", "light"],
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                hookFunction("Player.GetBlindLevel", 2, (args, next) => {
                    const effectsToCheck = ["BlindHeavy", "BlindNormal", "BlindLight"];
                    if (state.isEnforced && effectsToCheck.some(i => Player.Effect.includes(i) && !Player.Effect.includes("VRAvatars")))
                        return 3;
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("alt_always_slow", {
            name: "Always leave rooms slowly",
            type: 1,
            loggable: false,
            longDescription: "This rule forces PLAYER_NAME to always leave the room slowly, independent of the items she is wearing. WARNING: Due to limitation in Bondage Club itself, only BCX users will be able to stop PLAYER_NAME from leaving the room. This rule will ignore BC's roleplay difficulty setting 'Cannot be slowed down' and slow down PLAYER_NAME regardless!",
            keywords: ["slowness", "limit", "leaving", "permanent", "stopping", "exit", "blocking"],
            defaultLimit: ConditionsLimit.normal,
            init(state) {
                registerEffectBuilder(PlayerEffects => {
                    if (state.isEnforced && !PlayerEffects.Effect.includes("Slow")) {
                        PlayerEffects.Effect.push("Slow");
                    }
                });
                hookFunction("Player.IsSlow", 2, (args, next) => {
                    if (state.isEnforced)
                        return true;
                    return next(args);
                });
            },
        });
        registerRule("alt_set_leave_slowing", {
            name: "Set slowed leave time",
            type: 1,
            loggable: false,
            longDescription: "This rule can set the time PLAYER_NAME needs to leave the current room, when items or a rule force her to leave it slowly. The time can be set between 1 and 600 seconds (10 mins).",
            keywords: ["slowness", "limit", "leaving", "customized", "increase", "higher", "stopping", "exit", "blocking", "room"],
            defaultLimit: ConditionsLimit.limited,
            dataDefinition: {
                leaveTime: {
                    type: "number",
                    default: 10,
                    options: {
                        min: 1,
                        max: 600,
                    },
                    description: "New leave time in seconds:",
                },
            },
            init(state) {
                hookFunction("ChatRoomMenuClick", 2, (args, next) => {
                    if (!state.isEnforced)
                        return next(args);
                    const oldSlowTimer = ChatRoomSlowtimer;
                    next(args);
                    if (state.customData && oldSlowTimer === 0 && ChatRoomSlowtimer > 0) {
                        ChatRoomSlowtimer = CurrentTime + state.customData.leaveTime * 1000;
                    }
                });
            },
        });
        registerRule("alt_control_orgasms", {
            name: "Control ability to orgasm",
            type: 1,
            loggable: false,
            shortDescription: "adjustable: only-edge, only-ruin, no-resist",
            longDescription: "This rule impacts PLAYER_NAME's ability to control their orgasms, independent of items. There are three control options, which are: Never cum (always edge, the bar never reaches 100%), force into ruined orgasm (orgasm screen starts, but doesn't let her actually cum) and prevent resisting orgasm (able to enter orgasm screen, but unable to resist it).",
            keywords: ["deny", "denial", "prevent", "edging", "hypno", "cumming"],
            defaultLimit: ConditionsLimit.limited,
            dataDefinition: {
                orgasmHandling: {
                    type: "listSelect",
                    default: "edge",
                    options: [["edge", "Edge"], ["ruined", "Ruin"], ["noResist", "Prevent resisting"]],
                    description: "Orgasm attempts will be fixed to:",
                },
            },
            load(state) {
                hookFunction("ServerSend", 0, (args, next) => {
                    if (args[0] === "ChatRoomChat" && isObject$1(args[1]) && typeof args[1].Content === "string" && args[1].Type === "Activity" && state.isEnforced) {
                        if (args[1].Content.startsWith("OrgasmFailPassive")) {
                            args[1].Content = "OrgasmFailPassive0";
                        }
                        else if (args[1].Content.startsWith("OrgasmFailTimeout")) {
                            args[1].Content = "OrgasmFailTimeout2";
                        }
                        else if (args[1].Content.startsWith("OrgasmFailResist")) {
                            args[1].Content = "OrgasmFailResist2";
                        }
                        else if (args[1].Content.startsWith("OrgasmFailSurrender")) {
                            args[1].Content = "OrgasmFailSurrender2";
                        }
                    }
                    next(args);
                });
                hookFunction("ActivityOrgasmPrepare", 5, (args, next) => {
                    const C = args[0];
                    if (state.isEnforced && state.customData && C.IsPlayer()) {
                        if (state.customData.orgasmHandling === "edge") {
                            if (C.ArousalSettings) {
                                C.ArousalSettings.Progress = 95;
                            }
                            return;
                        }
                        else if (state.customData.orgasmHandling === "ruined") {
                            const backup = Player.Effect;
                            Player.Effect = backup.concat("DenialMode", "RuinOrgasms");
                            next(args);
                            Player.Effect = backup;
                            return;
                        }
                        else if (state.customData.orgasmHandling === "noResist") {
                            ActivityOrgasmGameResistCount = 496.5;
                        }
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("alt_secret_orgasms", {
            name: "Secret orgasm progress",
            type: 1,
            loggable: false,
            shortDescription: "unable to see the own arousal meter",
            longDescription: "This rule prevents PLAYER_NAME from seeing their own arousal meter, even while it is active and working. This means, that it is a surprise to them, when the orgasm (quick-time event) happens. Does not effect other characters being able to see the meter, if club settings allow that.",
            keywords: ["hide", "hidden", "control", "cumming"],
            defaultLimit: ConditionsLimit.limited,
            load(state) {
                hookFunction("DrawArousalMeter", 5, (args, next) => {
                    const C = args[0];
                    if (C.ID === 0 && state.isEnforced)
                        return;
                    return next(args);
                });
                hookFunction("ChatRoomClickCharacter", 5, (args, next) => {
                    const C = args[0];
                    const CharX = args[1];
                    const CharY = args[2];
                    const Zoom = args[3];
                    if (C.ID === 0 && state.isEnforced && MouseIn(CharX + 60 * Zoom, CharY + 400 * Zoom, 80 * Zoom, 100 * Zoom) && !C.ArousalZoom)
                        return;
                    if (C.ID === 0 && state.isEnforced && MouseIn(CharX + 50 * Zoom, CharY + 200 * Zoom, 100 * Zoom, 500 * Zoom) && C.ArousalZoom)
                        return;
                    return next(args);
                });
            },
        });
        const gaveAdminTo = new Set();
        registerRule("alt_room_admin_transfer", {
            name: "Room admin transfer",
            type: 1,
            loggable: false,
            shortDescription: "give admin to defined roles",
            longDescription: "This rule lets you define a minimum role which PLAYER_NAME will automatically give room admin rights to (if she has admin rights in the room). Also has the option to remove admin rights from PLAYER_NAME afterwards.",
            keywords: ["automatic", "authority", "power", "exchange", "loss", "control"],
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                minimumRole: {
                    type: "roleSelector",
                    default: AccessLevel.owner,
                    description: "Minimum role that gets admin:",
                    Y: 320,
                },
                removeAdminToggle: {
                    type: "toggle",
                    default: false,
                    description: "Player loses admin afterwards",
                    Y: 470,
                },
            },
            load() {
                hookFunction("ChatRoomSyncMemberLeave", 3, (args, next) => {
                    next(args);
                    const R = args[0];
                    if (gaveAdminTo.has(R.SourceMemberNumber)) {
                        gaveAdminTo.delete(R.SourceMemberNumber);
                    }
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomClearAllElements", 3, (args, next) => {
                    gaveAdminTo.clear();
                    next(args);
                }, ModuleCategory.Rules);
            },
            tick(state) {
                var _a;
                let changed = false;
                if (state.isEnforced && state.customData && ChatRoomPlayerIsAdmin() && ServerPlayerIsInChatRoom()) {
                    let hasAdmin = false;
                    for (const character of getAllCharactersInRoom()) {
                        if (!character.isPlayer() && getCharacterAccessLevel(character) <= state.customData.minimumRole) {
                            if ((_a = ChatRoomData === null || ChatRoomData === void 0 ? void 0 : ChatRoomData.Admin) === null || _a === void 0 ? void 0 : _a.includes(character.MemberNumber)) {
                                hasAdmin = true;
                            }
                            else if (!gaveAdminTo.has(character.MemberNumber)) {
                                ServerSend("ChatRoomAdmin", { MemberNumber: character.MemberNumber, Action: "Promote" });
                                changed = true;
                                gaveAdminTo.add(character.MemberNumber);
                            }
                        }
                    }
                    if (CurrentModule === "Online" && CurrentScreen === "ChatRoom" && !changed && hasAdmin && ChatRoomData && state.customData.removeAdminToggle) {
                        const UpdatedRoom = {
                            Name: ChatRoomData.Name,
                            Description: ChatRoomData.Description,
                            Background: ChatRoomData.Background,
                            Limit: ChatRoomData.Limit.toString(),
                            Admin: ChatRoomData.Admin.filter((i) => i !== Player.MemberNumber),
                            Ban: ChatRoomData.Ban,
                            BlockCategory: ChatRoomData.BlockCategory.slice(),
                            Game: ChatRoomGame,
                            Private: ChatRoomData.Private,
                            Locked: ChatRoomData.Locked,
                        };
                        ServerSend("ChatRoomAdmin", { MemberNumber: Player.ID, Room: UpdatedRoom, Action: "Update" });
                        changed = true;
                    }
                }
                return changed;
            },
        });
        registerRule("alt_room_admin_limit", {
            name: "Limit bound admin power",
            type: 1,
            loggable: false,
            shortDescription: "restrict room admin powers while restrained",
            longDescription: "This rule forbids PLAYER_NAME to do any room admin actions (except for kick/ban), when she is restrained. Note: This rule does not affect an admin's ability to bypass locked rooms, if restraints allow it. Tip: This rule can be combined with the rule 'Force ´Return to chatrooms on relog´' to trap PLAYER_NAME in it.",
            keywords: ["restraints", "authority", "suppressing", "bindings", "helpless"],
            defaultLimit: ConditionsLimit.limited,
            triggerTexts: {
                attempt_infoBeep: "You are forbidden from changing room settings while restrained",
            },
            load(state) {
                hookFunction("ChatAdminLoad", 0, (args, next) => {
                    var _a, _b, _c, _d;
                    next(args);
                    if (state.isEnforced && ChatRoomPlayerIsAdmin() && Player.IsRestrained()) {
                        (_a = document.getElementById("InputName")) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "disabled");
                        (_b = document.getElementById("InputDescription")) === null || _b === void 0 ? void 0 : _b.setAttribute("disabled", "disabled");
                        (_c = document.getElementById("InputSize")) === null || _c === void 0 ? void 0 : _c.setAttribute("disabled", "disabled");
                        (_d = document.getElementById("InputAdminList")) === null || _d === void 0 ? void 0 : _d.setAttribute("disabled", "disabled");
                    }
                });
                hookFunction("ChatAdminRun", 0, (args, next) => {
                    next(args);
                    if (state.isEnforced && ChatRoomPlayerIsAdmin() && Player.IsRestrained()) {
                        DrawButton(505, 172, 300, 60, TextGet("Language" + ChatAdminLanguage), "#ebebe4", "", "", true);
                        DrawButton(125, 770, 250, 65, TextGet("AddOwnerAdminList"), "#ebebe4", "", "", true);
                        DrawButton(390, 770, 250, 65, TextGet("AddLoverAdminList"), "#ebebe4", "", "", true);
                        DrawBackNextButton(1300, 450, 500, 60, DialogFindPlayer(ChatAdminBackgroundSelect), "#ebebe4", "", () => DialogFindPlayer((ChatAdminBackgroundIndex === 0) ? ChatCreateBackgroundList[ChatCreateBackgroundList.length - 1] : ChatCreateBackgroundList[ChatAdminBackgroundIndex - 1]), () => DialogFindPlayer((ChatAdminBackgroundIndex >= ChatCreateBackgroundList.length - 1) ? ChatCreateBackgroundList[0] : ChatCreateBackgroundList[ChatAdminBackgroundIndex + 1]), true);
                        DrawButton(1840, 450, 60, 60, "", "#ebebe4", "Icons/Small/Preference.png", "", true);
                        DrawBackNextButton(1625, 575, 275, 60, TextGet("Game" + ChatAdminGame), "#ebebe4", "", () => "", () => "", true);
                        DrawButton(1486, 708, 64, 64, "", "#ebebe4", ChatAdminPrivate ? "Icons/Checked.png" : "", "", true);
                        DrawButton(1786, 708, 64, 64, "", "#ebebe4", ChatAdminLocked ? "Icons/Checked.png" : "", "", true);
                        MainCanvas.fillStyle = "#ffff88";
                        MainCanvas.fillRect(100, 850, 1125, 70);
                        MainCanvas.strokeStyle = "Black";
                        MainCanvas.strokeRect(100, 850, 1125, 70);
                        DrawText("Some settings are not available due to a BCX rule.", 650, 885, "Black", "Gray");
                    }
                });
                hookFunction("ChatAdminClick", 5, (args, next) => {
                    if (state.isEnforced && ChatRoomPlayerIsAdmin() && Player.IsRestrained() && (MouseIn(505, 172, 300, 60) ||
                        MouseIn(1300, 75, 600, 350) ||
                        MouseIn(1840, 450, 60, 60) ||
                        MouseIn(1300, 450, 500, 60) ||
                        MouseIn(1625, 575, 275, 60) ||
                        MouseIn(1486, 708, 64, 64) ||
                        MouseIn(1786, 708, 64, 64) ||
                        MouseIn(125, 770, 250, 65) ||
                        MouseIn(390, 770, 250, 65)))
                        return;
                    return next(args);
                });
                hookFunction("CommonSetScreen", 5, (args, next) => {
                    if (state.isEnforced && args[0] === "Online" && args[1] === "ChatBlockItem" && ChatRoomPlayerIsAdmin() && Player.IsRestrained()) {
                        ChatBlockItemEditable = false;
                    }
                    return next(args);
                });
                hookFunction("ChatRoomAdminAction", 5, (args, next) => {
                    const ActionType = args[1];
                    if (state.isEnforced && Player.IsRestrained() &&
                        ActionType !== "Kick" && ActionType !== "Ban") {
                        InfoBeep(`BCX: You are not allowed to use this while restrained.`, 7000);
                        DialogLeave();
                        return;
                    }
                    return next(args);
                });
            },
        });
        registerRule("alt_set_profile_description", {
            name: "Control profile online description",
            type: 1,
            loggable: false,
            shortDescription: "directly sets PLAYER_NAME's description",
            longDescription: "This rule sets PLAYER_NAME's online description (in her profile) to any text entered in the rule config, blocking changes to it. Warning: This rule is editing the actual profile text. This means that after saving a changed text, the original text is lost!",
            keywords: ["edit", "change", "force", "biography", "information", "story", "control"],
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                playersProfileDescription: {
                    type: "textArea",
                    default: () => (Player.Description || ""),
                    description: "Edit this player's profile description:",
                },
            },
            tick(state) {
                if (state.isEnforced && state.customData) {
                    if (Player.Description !== state.customData.playersProfileDescription) {
                        let Description = Player.Description = state.customData.playersProfileDescription;
                        const CompressedDescription = "╬" + LZString.compressToUTF16(Description);
                        if (CompressedDescription.length < Description.length || Description.startsWith("╬")) {
                            Description = CompressedDescription;
                        }
                        ServerAccountUpdate.QueueData({ Description });
                        state.trigger();
                        return true;
                    }
                }
                return false;
            },
        });
        function getValidNickname() {
            return (Player.Nickname && isValidNickname(Player.Nickname)) ? Player.Nickname :
                isValidNickname(Player.Name) ? Player.Name :
                    "";
        }
        registerRule("alt_set_nickname", {
            name: "Control nickname",
            type: 1,
            loggable: false,
            shortDescription: "directly sets PLAYER_NAME's nickname",
            longDescription: "This rule sets PLAYER_NAME's nickname (replacing her name in most cases) to any text entered in the rule config, blocking changes to it from BC's nickname menu. You can optionally choose whether the previous BC nickname will be restored while the rule is not in effect.",
            keywords: ["edit", "change", "force", "petname", "naming", "alias"],
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                nickname: {
                    type: "string",
                    default: getValidNickname,
                    description: "Set this player's nickname:",
                    options: /^[\p{L}0-9\p{Z}'-]{0,20}$/u,
                },
                restore: {
                    type: "toggle",
                    description: "Restore the previous nickname at rule end",
                    default: true,
                    Y: 470,
                },
            },
            internalDataValidate: (data) => typeof data === "string",
            internalDataDefault: getValidNickname,
            stateChange(state, newState) {
                var _a;
                if (newState) {
                    const current = getValidNickname();
                    if (current !== undefined) {
                        state.internalData = current;
                    }
                }
                else if ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.restore) {
                    let old = state.internalData;
                    if (old !== undefined) {
                        if (old === Player.Name) {
                            old = "";
                        }
                        if (Player.Nickname !== old) {
                            Player.Nickname = old;
                            ServerAccountUpdate.QueueData({ Nickname: old }, true);
                        }
                    }
                }
            },
            tick(state) {
                if (state.isEnforced && state.customData) {
                    let nick = state.customData.nickname.trim();
                    if (nick === Player.Name) {
                        nick = "";
                    }
                    if (Player.Nickname !== nick) {
                        Player.Nickname = nick;
                        ServerAccountUpdate.QueueData({ Nickname: nick }, true);
                        state.trigger();
                        return true;
                    }
                }
                return false;
            },
        });
        registerRule("alt_force_suitcase_game", {
            name: "Always carry a suitcase",
            type: 1,
            loggable: false,
            shortDescription: "from the kidnappers league multiplayer game",
            longDescription: "This rule forces PLAYER_NAME to constantly participate in the kidnappers league's suitcase delivery task, by automatically giving her a new suitcase, whenever the suitcase item slot is empty.",
            keywords: ["permanent", "money", "tasks"],
            defaultLimit: ConditionsLimit.normal,
            tick(state) {
                const misc = InventoryGet(Player, "ItemMisc");
                if (state.isEnforced && ReputationGet("Kidnap") > 0 && Player.CanTalk() && !misc) {
                    KidnapLeagueOnlineBountyStart();
                    return true;
                }
                return false;
            },
        });
        registerRule("alt_restrict_leashability", {
            name: "Restrict being leashed by others",
            type: 1,
            loggable: false,
            longDescription: "This rule only allows selected roles to leash PLAYER_NAME, responding with a message about unsuccessful leashing to others when they attempt to do so.",
            keywords: ["limit", "prevent", "leashing", "room"],
            defaultLimit: ConditionsLimit.limited,
            dataDefinition: {
                minimumRole: {
                    type: "roleSelector",
                    default: AccessLevel.owner,
                    description: "Minimum role that is allowed to leash:",
                    Y: 320,
                },
            },
            load(state) {
                hookFunction("ChatRoomCanBeLeashedBy", 4, (args, next) => {
                    const sourceMemberNumber = args[0];
                    if (sourceMemberNumber !== 0 &&
                        sourceMemberNumber !== Player.MemberNumber &&
                        state.isEnforced &&
                        state.customData &&
                        getCharacterAccessLevel(sourceMemberNumber) > state.customData.minimumRole) {
                        const character = getChatroomCharacter(sourceMemberNumber);
                        ChatRoomActionMessage(`SourceCharacter's leash seems to be cursed and slips out of TargetCharacterName's hand.`, null, [
                            { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                            { Tag: "TargetCharacterName", MemberNumber: sourceMemberNumber, Text: character ? CharacterNickname(character.Character) : getCharacterName(sourceMemberNumber, "[unknown]") },
                        ]);
                        return false;
                    }
                    return next(args);
                });
            },
        });
        registerRule("alt_hide_friends", {
            name: "Hide online friends if blind",
            type: 1,
            loggable: false,
            shortDescription: "also preventing beeps from the friendlist - exceptions settable",
            longDescription: "This rule hides persons on PLAYER_NAME's friend list when she is fully blinded, which also makes sending beeps impossible. Received beeps can still be answered. The rule allows to manage a list of members who can be seen normally.",
            keywords: ["blindfold", "control"],
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                allowedMembers: {
                    type: "memberNumberList",
                    default: [],
                    description: "Members numbers that can always be seen:",
                },
            },
            load(state) {
                patchFunction("FriendListLoadFriendList", {
                    "data.forEach(friend => {": 'data.forEach(friend => { if (typeof friend.MemberNumber !== "number") return;',
                });
                patchFunction("FriendListLoadFriendList", {
                    "FriendListContent += `<div class='FriendListLinkColumn' onClick='FriendListBeep(${friend.MemberNumber})'> ${BeepCaption} </div>`;": "if (typeof friend.MemberNumber === 'number') FriendListContent += `<div class='FriendListLinkColumn' onClick='FriendListBeep(${friend.MemberNumber})'> ${BeepCaption} </div>`;",
                });
                hookFunction("FriendListLoadFriendList", 1, (args, next) => {
                    var _a;
                    const data = args[0];
                    const allowList = (_a = state.customData) === null || _a === void 0 ? void 0 : _a.allowedMembers;
                    if (state.isEnforced && allowList && Player.GetBlindLevel() >= 3) {
                        data.forEach((friend) => {
                            if (!allowList.includes(friend.MemberNumber)) {
                                friend.MemberName = "Someone";
                                friend.MemberNumber = "######";
                            }
                        });
                    }
                    return next(args);
                });
            },
        });
        registerRule("alt_forced_summoning", {
            name: "Ready to be summoned",
            type: 1,
            loggable: false,
            shortDescription: "leash PLAYER_NAME from anywhere using a beep with message",
            longDescription: "This rule forces PLAYER_NAME to switch rooms from anywhere in the club to the chat room of the summoner after 15 seconds. It works by sending a beep message with the set text or simply the word 'summon' to PLAYER_NAME. Members who are allowed to summon PLAYER_NAME can be set. NOTES: PLAYER_NAME can always be summoned no matter if she has a leash or is prevented from leaving the room (ignoring restraints or locked rooms). However, if the target room is full or locked, she will end up in the lobby. Summoning will not work if the room name is not included with the beep message!",
            keywords: ["leashing", "room", "calling", "ordering", "move", "moving", "movement", "warping", "beaming", "transporting"],
            triggerTexts: {
                infoBeep: "You are summoned by TARGET_PLAYER!",
            },
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                allowedMembers: {
                    type: "memberNumberList",
                    default: [],
                    description: "Members numbers allowed to summon:",
                    Y: 325,
                    options: {
                        pageSize: 1,
                    },
                },
                summoningText: {
                    type: "string",
                    default: "Come to my room immediately",
                    description: "The text used for summoning:",
                    Y: 705,
                },
                summonTime: {
                    type: "number",
                    default: 15,
                    description: "Time in seconds before enforcing summon:",
                    Y: 550,
                },
            },
            load(state) {
                let beep = false;
                hookFunction("ServerAccountBeep", 7, (args, next) => {
                    const data = args[0];
                    if (isObject$1(data) &&
                        !data.BeepType &&
                        typeof data.MemberNumber === "number" &&
                        state.isEnforced &&
                        state.customData &&
                        state.customData.allowedMembers.includes(data.MemberNumber) &&
                        typeof data.Message === "string" &&
                        (data.Message.toLocaleLowerCase().startsWith(state.customData.summoningText.trim().toLocaleLowerCase()) || data.Message.trim().toLocaleLowerCase() === "summon") &&
                        data.ChatRoomName &&
                        ChatSelectGendersAllowed(data.ChatRoomSpace, Player.GetGenders())) {
                        ChatRoomActionMessage(`SourceCharacter received a summon: "${state.customData.summoningText}".`, null, [
                            { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                        ]);
                        beep = true;
                        BCX_setTimeout(() => {
                            if (!state.isEnforced || (ServerPlayerIsInChatRoom() && (ChatRoomData === null || ChatRoomData === void 0 ? void 0 : ChatRoomData.Name) === data.ChatRoomName))
                                return;
                            ChatRoomActionMessage(`The demand for SourceCharacter's presence is now enforced.`, null, [
                                { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                            ]);
                            DialogLentLockpicks = false;
                            ChatRoomClearAllElements();
                            ServerSend("ChatRoomLeave", "");
                            ChatRoomSetLastChatRoom("");
                            ChatRoomLeashPlayer = null;
                            ChatRoomStart(data.ChatRoomSpace, "", "", "", "Introduction", BackgroundsTagList);
                            CharacterDeleteAllOnline();
                            ChatRoomPlayerCanJoin = true;
                            ServerSend("ChatRoomJoin", { Name: data.ChatRoomName });
                        }, state.customData.summonTime * 1000);
                    }
                    next(args);
                    if (beep)
                        state.triggerAttempt(data.MemberNumber);
                    beep = false;
                }, ModuleCategory.Rules);
            },
        });
        registerRule("alt_allow_changing_appearance", {
            name: "Allow changing the whole appearance",
            type: 1,
            loggable: false,
            shortDescription: "of PLAYER_NAME - for the defined roles",
            keywords: ["force", "setting", "wardrobe", "body", "modifications"],
            longDescription: "This rule lets you define a minimum role which (and all higher roles) has permission to fully change the whole appearance of PLAYER_NAME (body and cosplay items), ignoring the settings of the BC online preferences 'Allow others to alter your whole appearance' and 'Prevent others from changing cosplay items'. So this rule can define a group of people which is allowed, while everyone else is not. IMPORTANT: Only other BCX users will be able to change PLAYER_NAME's appearance if this rule allows them to, while the BC settings would forbid them to.",
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                minimumRole: {
                    type: "roleSelector",
                    default: AccessLevel.owner,
                    description: "Minimum role that is allowed:",
                },
            },
            init(state) {
                queryHandlers.rule_alt_allow_changing_appearance = (sender) => {
                    return state.inEffect && !!state.customData && getCharacterAccessLevel(sender) <= state.customData.minimumRole;
                };
                let appearanceCharacterAllowed = null;
                hookFunction("CharacterAppearanceLoadCharacter", 0, (args, next) => {
                    appearanceCharacterAllowed = null;
                    const C = args[0];
                    const char = C.MemberNumber && getChatroomCharacter(C.MemberNumber);
                    if (!C.IsPlayer() && char && char.BCXVersion) {
                        sendQuery("rule_alt_allow_changing_appearance", undefined, char.MemberNumber).then(res => {
                            if (res) {
                                appearanceCharacterAllowed = char.MemberNumber;
                            }
                        });
                    }
                    return next(args);
                }, null);
                hookFunction("WardrobeGroupAccessible", 4, (args, next) => {
                    const C = args[0];
                    if (!C.IsPlayer() && C.MemberNumber && C.MemberNumber === appearanceCharacterAllowed && C.OnlineSharedSettings) {
                        const AllowFullWardrobeAccess = C.OnlineSharedSettings.AllowFullWardrobeAccess;
                        const BlockBodyCosplay = C.OnlineSharedSettings.BlockBodyCosplay;
                        try {
                            C.OnlineSharedSettings.AllowFullWardrobeAccess = true;
                            C.OnlineSharedSettings.BlockBodyCosplay = false;
                            return next(args);
                        }
                        finally {
                            C.OnlineSharedSettings.AllowFullWardrobeAccess = AllowFullWardrobeAccess;
                            C.OnlineSharedSettings.BlockBodyCosplay = BlockBodyCosplay;
                        }
                    }
                    return next(args);
                }, null);
            },
            load(state) {
                const allow = (memberNumber) => {
                    return state.inEffect && !!state.customData && getCharacterAccessLevel(memberNumber) <= state.customData.minimumRole;
                };
                hookFunction("ValidationCanAddOrRemoveItem", 4, (args, next) => {
                    const params = args[1];
                    if (allow(params.sourceMemberNumber) && params.C.IsPlayer() && params.C.OnlineSharedSettings) {
                        const AllowFullWardrobeAccess = params.C.OnlineSharedSettings.AllowFullWardrobeAccess;
                        const BlockBodyCosplay = params.C.OnlineSharedSettings.BlockBodyCosplay;
                        try {
                            params.C.OnlineSharedSettings.AllowFullWardrobeAccess = true;
                            params.C.OnlineSharedSettings.BlockBodyCosplay = false;
                            return next(args);
                        }
                        finally {
                            params.C.OnlineSharedSettings.AllowFullWardrobeAccess = AllowFullWardrobeAccess;
                            params.C.OnlineSharedSettings.BlockBodyCosplay = BlockBodyCosplay;
                        }
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
    }

    const cheatChangeHooks = {};
    function cheatIsEnabled(cheat) {
        return Array.isArray(modStorage.cheats) && modStorage.cheats.includes(cheat);
    }
    function cheatSetEnabled(cheat, enabled) {
        if (!Array.isArray(modStorage.cheats)) {
            console.error(`BCX: Attempt to set cheat, while not initalized`);
            return;
        }
        if (enabled) {
            if (!modStorage.cheats.includes(cheat)) {
                modStorage.cheats.push(cheat);
            }
        }
        else {
            modStorage.cheats = modStorage.cheats.filter(c => c !== cheat);
        }
        if (cheatChangeHooks[cheat]) {
            cheatChangeHooks[cheat](enabled);
        }
        modStorageSync();
    }
    function cheatToggle(cheat) {
        cheatSetEnabled(cheat, !cheatIsEnabled(cheat));
    }
    const MISTRESS_CHEAT_ONLY_ITEMS = ["MistressPadlock", "MistressPadlockKey", "MistressTimerPadlock"];
    const PANDORA_CHEAT_ONLY_ITEMS = ["PandoraPadlock", "PandoraPadlockKey"];
    const PlayerDialogOverrides = new Map();
    function OverridePlayerDialog(keyword, value) {
        PlayerDialogOverrides.set(keyword, value);
    }
    const GetImageRedirects = new Map();
    function RedirectGetImage(original, redirect) {
        GetImageRedirects.set(original, redirect);
    }
    const DialogMenuButtonClickHooks = new Map();
    function HookDialogMenuButtonClick(button, fn) {
        let arr = DialogMenuButtonClickHooks.get(button);
        if (!arr) {
            arr = [];
            DialogMenuButtonClickHooks.set(button, arr);
        }
        if (!arr.includes(fn)) {
            arr.push(fn);
        }
    }
    class ModuleMiscPatches extends BaseModule {
        load() {
            if (!Array.isArray(modStorage.cheats)) {
                modStorage.cheats = [];
            }
            else {
                modStorage.cheats = modStorage.cheats.filter(c => MiscCheat[c] !== undefined);
            }
            hookFunction("DialogFindPlayer", 10, (args, next) => {
                const override = PlayerDialogOverrides.get(args[0]);
                if (override !== undefined)
                    return override;
                return next(args);
            });
            hookFunction("DrawGetImage", 10, (args, next) => {
                const redirect = GetImageRedirects.get(args[0]);
                if (redirect !== undefined) {
                    args[0] = redirect;
                }
                return next(args);
            });
            hookFunction("DialogMenuButtonClick", 5, (args, next) => {
                const C = CharacterGetCurrent();
                for (let I = 0; I < DialogMenuButton.length; I++) {
                    if ((MouseX >= 1885 - I * 110) && (MouseX <= 1975 - I * 110) && C) {
                        const hooks = DialogMenuButtonClickHooks.get(DialogMenuButton[I]);
                        if (hooks === null || hooks === void 0 ? void 0 : hooks.some(hook => hook(C)))
                            return;
                    }
                }
                return next(args);
            });
            hookFunction("AsylumEntranceCanWander", 0, () => true);
            hookFunction("CheatFactor", 1, (args, next) => {
                const [CheatName, Factor] = args;
                if (CheatName === "CantLoseMistress" && cheatIsEnabled(MiscCheat.CantLoseMistress)) {
                    return Factor;
                }
                else if (CheatName === "BlockRandomKidnap" && cheatIsEnabled(MiscCheat.BlockRandomEvents)) {
                    return Factor;
                }
                return next(args);
            });
            hookFunction("PrivateRansomStart", 0, (args, next) => {
                if (cheatIsEnabled(MiscCheat.BlockRandomEvents))
                    return false;
                return next(args);
            });
            hookFunction("MainHallWalk", 0, (args, next) => {
                if (cheatIsEnabled(MiscCheat.BlockRandomEvents)) {
                    MainHallRandomEventOdds = 0;
                }
                return next(args);
            });
            const NMod = isNModClient();
            if (!NMod) {
                patchFunction("LoginMistressItems", { 'LogQuery("ClubMistress", "Management")': "true" });
                hookFunction("LoginMistressItems", 0, (args, next) => {
                    next(args);
                    if (!cheatIsEnabled(MiscCheat.GiveMistressKey) && !LogQuery("ClubMistress", "Management")) {
                        for (const item of MISTRESS_CHEAT_ONLY_ITEMS) {
                            InventoryDelete(Player, item, "ItemMisc", false);
                        }
                    }
                });
                cheatChangeHooks[MiscCheat.GiveMistressKey] = () => {
                    LoginMistressItems();
                    ServerPlayerInventorySync();
                };
                patchFunction("LoginStableItems", { 'LogQuery("JoinedStable", "PonyExam") || LogQuery("JoinedStable", "TrainerExam")': "true" });
            }
            cheatChangeHooks[MiscCheat.GivePandoraKey] = enabled => {
                for (const item of PANDORA_CHEAT_ONLY_ITEMS) {
                    if (enabled) {
                        InventoryAdd(Player, item, "ItemMisc", false);
                    }
                    else {
                        InventoryDelete(Player, item, "ItemMisc", false);
                    }
                }
                ServerPlayerInventorySync();
            };
            hookFunction("InfiltrationStealItems", 0, (args, next) => {
                next(args);
                if (cheatIsEnabled(MiscCheat.GivePandoraKey)) {
                    cheatChangeHooks[MiscCheat.GivePandoraKey](true);
                }
            });
            hookFunction("Player.CanChangeClothesOn", 1, (args, next) => (allowMode && args[0].IsPlayer()) || next(args));
            hookFunction("ChatRoomCanLeave", 0, (args, next) => allowMode || next(args));
            hookFunction("DrawCharacter", 100, (args, next) => {
                if (args[0] != null)
                    return next(args);
            });
            patchFunction("DrawGetImage", {
                "Img.src = Source;": 'Img.crossOrigin = "Anonymous";\n\t\tImg.src = Source;',
            });
            hookFunction("ServerPlayerIsInChatRoom", 0, (args, next) => {
                return next(args) || CurrentScreen === "GetUp";
            });
            patchFunction("CharacterNickname", {
                "/^[a-zA-Z\\s]*$/": "/^[\\p{L}0-9\\p{Z}'-]+$/u",
            });
            ServerCharacterNicknameRegex = NICKNAME_REGEX;
        }
        run() {
            LoginMistressItems();
            LoginStableItems();
            if (cheatIsEnabled(MiscCheat.GivePandoraKey)) {
                cheatChangeHooks[MiscCheat.GivePandoraKey](true);
            }
            ServerPlayerInventorySync();
        }
    }

    function initRules_bc_blocks() {
        const NMod = isNModClient();
        registerRule("block_remoteuse_self", {
            name: "Forbid using remotes on self",
            type: 0,
            shortDescription: "PLAYER_NAME using one on PLAYER_NAME",
            longDescription: "This rule forbids PLAYER_NAME to use or trigger a vibrator or similar remote controlled item on her own body. (Others still can use remotes on her)",
            keywords: ["controling", "preventing", "limiting", "vibrating", "vibrations"],
            triggerTexts: {
                infoBeep: "You are not allowed to use a remote control for items on your body!",
                attempt_log: "PLAYER_NAME tried to use a remote control on her own body, which was forbidden",
                log: "PLAYER_NAME used a remote control on her own body, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                OverridePlayerDialog("BCX_RemoteDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_Remote.png", "Icons/Remote.png");
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    const C = args[0];
                    if (C.ID === 0 && state.isEnforced) {
                        const index = DialogMenuButton.indexOf("Remote");
                        if (index >= 0) {
                            DialogMenuButton[index] = "BCX_RemoteDisabled";
                        }
                    }
                }, ModuleCategory.Rules);
                HookDialogMenuButtonClick("Remote", (C) => {
                    if (C.ID === 0 && state.inEffect) {
                        state.trigger();
                    }
                    return false;
                });
                HookDialogMenuButtonClick("BCX_RemoteDisabled", (C) => {
                    if (C.ID === 0 && state.inEffect) {
                        state.triggerAttempt();
                    }
                    return false;
                });
                hookFunction("DialogItemClick", 3, (args, next) => {
                    const C = (Player.FocusGroup != null) ? Player : CurrentCharacter;
                    if (C && C.ID === 0 && state.isEnforced && args[0].Asset.Name === "VibratorRemote") {
                        state.triggerAttempt();
                        return;
                    }
                    if (C && C.ID === 0 && state.isLogged && args[0].Asset.Name === "VibratorRemote") {
                        state.trigger();
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_remoteuse_others", {
            name: "Forbid using remotes on others",
            type: 0,
            longDescription: "This rule forbids PLAYER_NAME to use or trigger a vibrator or similar remote controlled item on other club members.",
            keywords: ["controling", "preventing", "limiting", "vibrating", "vibrations"],
            triggerTexts: {
                infoBeep: "You are not allowed to use a remote control on other's items!",
                attempt_log: "PLAYER_NAME tried to use a remote control on TARGET_PLAYER's body, which was forbidden",
                log: "PLAYER_NAME used a remote control on TARGET_PLAYER's body, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                OverridePlayerDialog("BCX_RemoteDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_Remote.png", "Icons/Remote.png");
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    const C = args[0];
                    if (C.ID !== 0 && state.isEnforced) {
                        const index = DialogMenuButton.indexOf("Remote");
                        if (index >= 0) {
                            DialogMenuButton[index] = "BCX_RemoteDisabled";
                        }
                    }
                }, ModuleCategory.Rules);
                HookDialogMenuButtonClick("Remote", (C) => {
                    if (C.ID !== 0 && state.inEffect) {
                        state.trigger(C.MemberNumber);
                    }
                    return false;
                });
                HookDialogMenuButtonClick("BCX_RemoteDisabled", (C) => {
                    if (C.ID !== 0 && state.inEffect) {
                        state.triggerAttempt(C.MemberNumber);
                    }
                    return false;
                });
                hookFunction("DialogItemClick", 3, (args, next) => {
                    const C = (Player.FocusGroup != null) ? Player : CurrentCharacter;
                    if (C && C.ID !== 0 && state.isEnforced && args[0].Asset.Name === "VibratorRemote") {
                        state.triggerAttempt(C.MemberNumber);
                        return;
                    }
                    if (C && C.ID !== 0 && state.isLogged && args[0].Asset.Name === "VibratorRemote") {
                        state.trigger(C.MemberNumber);
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_keyuse_self", {
            name: "Forbid using keys on self",
            type: 0,
            shortDescription: "PLAYER_NAME using one on PLAYER_NAME",
            longDescription: "This rule forbids PLAYER_NAME to unlock any locked item on her own body. Note: Despite the name, this rule also blocks unlocking locks that don't require a key (e.g. exclusive lock). However, locks that can be unlocked in other ways (timer locks by removing time, code/password locks by entering correct code) can still be unlocked by PLAYER_NAME. Others can still unlock her items on her normally.",
            keywords: ["controling", "taking", "away", "limiting", "confiscate", "locks"],
            triggerTexts: {
                infoBeep: "You are not allowed to use a key on items on your body!",
                attempt_log: "PLAYER_NAME tried to use a key on a worn item, which was forbidden",
                log: "PLAYER_NAME used a key on a worn item, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                OverridePlayerDialog("BCX_UnlockDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_Unlock.png", "Icons/Unlock.png");
                hookFunction("DialogCanUnlock", 0, (args, next) => {
                    const C = args[0];
                    if (C.ID === 0 && state.isEnforced)
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    const C = args[0];
                    if (C.ID === 0 && state.isEnforced && DialogMenuButton.includes("InspectLock")) {
                        DialogMenuButton.splice(-1, 0, "BCX_UnlockDisabled");
                    }
                }, ModuleCategory.Rules);
                HookDialogMenuButtonClick("Unlock", (C) => {
                    if (C.ID === 0 && state.inEffect) {
                        state.trigger();
                    }
                    return false;
                });
                HookDialogMenuButtonClick("BCX_UnlockDisabled", (C) => {
                    if (C.ID === 0 && state.inEffect) {
                        state.triggerAttempt();
                    }
                    return false;
                });
            },
        });
        registerRule("block_keyuse_others", {
            name: "Forbid using keys on others",
            type: 0,
            longDescription: "This rule forbids PLAYER_NAME to unlock any locked item on other club members, with options to still allow unlocking of owner and/or lover locks and items. Note: Despite the name, this rule also blocks unlocking locks that don't require a key (e.g. exclusive lock). However, locks that can be unlocked in other ways (timer locks by removing time, code/password locks by entering correct code) can still be unlocked by PLAYER_NAME.",
            keywords: ["controling", "taking", "away", "limiting", "confiscate", "locks"],
            triggerTexts: {
                infoBeep: "You are not allowed to use a key on other's items!",
                attempt_log: "PLAYER_NAME tried to use a key to unlock TARGET_PLAYER's item, which was forbidden",
                log: "PLAYER_NAME used a key to unlock TARGET_PLAYER's item, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                allowOwnerLocks: {
                    type: "toggle",
                    default: false,
                    description: "Still allow unlocking owner locks or items",
                },
                allowLoverLocks: {
                    type: "toggle",
                    default: false,
                    description: "Still allow unlocking lover locks or items",
                    Y: 530,
                },
            },
            load(state) {
                let ignore = false;
                OverridePlayerDialog("BCX_UnlockDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_Unlock.png", "Icons/Unlock.png");
                hookFunction("DialogCanUnlock", 0, (args, next) => {
                    const C = args[0];
                    const Item = args[1];
                    const lock = InventoryGetLock(Item);
                    if (state.customData &&
                        C.ID !== 0 &&
                        Item != null &&
                        Item.Asset != null &&
                        ((state.customData.allowOwnerLocks && (Item.Asset.OwnerOnly || (lock === null || lock === void 0 ? void 0 : lock.Asset.OwnerOnly)) && C.IsOwnedByPlayer()) ||
                            (state.customData.allowLoverLocks && (Item.Asset.LoverOnly || (lock === null || lock === void 0 ? void 0 : lock.Asset.LoverOnly)) && C.IsLoverOfPlayer()))) {
                        ignore = true;
                        return next(args);
                    }
                    ignore = false;
                    if (C.ID !== 0 && state.isEnforced)
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    if (!ignore) {
                        const C = args[0];
                        if (C.ID !== 0 && state.isEnforced && DialogMenuButton.includes("InspectLock")) {
                            DialogMenuButton.splice(-1, 0, "BCX_UnlockDisabled");
                        }
                    }
                }, ModuleCategory.Rules);
                HookDialogMenuButtonClick("Unlock", (C) => {
                    if (!ignore && C.ID !== 0 && state.inEffect) {
                        state.trigger(C.MemberNumber);
                    }
                    return false;
                });
                HookDialogMenuButtonClick("BCX_UnlockDisabled", (C) => {
                    if (!ignore && C.ID !== 0 && state.inEffect) {
                        state.triggerAttempt(C.MemberNumber);
                    }
                    return false;
                });
            },
        });
        registerRule("block_lockpicking_self", {
            name: "Forbid picking locks on self",
            type: 0,
            shortDescription: "PLAYER_NAME picking one on PLAYER_NAME",
            longDescription: "This rule forbids PLAYER_NAME to lockpick any locked items on her own body. (Others still can pick locks on her normally)",
            keywords: ["controling", "limiting", "secure", "security"],
            triggerTexts: {
                infoBeep: "You are not allowed to lockpick worn items on your body!",
                attempt_log: "PLAYER_NAME tried to lockpick a worn item, which was forbidden",
                log: "PLAYER_NAME lockpicked a worn item, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                OverridePlayerDialog("BCX_PickLockDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_PickLock.png", "Icons/PickLock.png");
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    const C = args[0];
                    if (C.ID === 0 && state.isEnforced) {
                        const index = DialogMenuButton.indexOf("PickLock");
                        if (index >= 0) {
                            DialogMenuButton[index] = "BCX_PickLockDisabled";
                        }
                    }
                }, ModuleCategory.Rules);
                HookDialogMenuButtonClick("PickLock", (C) => {
                    if (C.ID === 0 && state.inEffect) {
                        state.trigger();
                    }
                    return false;
                });
                HookDialogMenuButtonClick("BCX_PickLockDisabled", (C) => {
                    if (C.ID === 0 && state.inEffect) {
                        state.triggerAttempt();
                    }
                    return false;
                });
            },
        });
        registerRule("block_lockpicking_others", {
            name: "Forbid picking locks on others",
            type: 0,
            longDescription: "This rule forbids PLAYER_NAME to lockpick any locked items on other club members.",
            keywords: ["controling", "limiting", "secure", "security"],
            triggerTexts: {
                infoBeep: "You are not allowed to lockpick items on others!",
                attempt_log: "PLAYER_NAME tried to lockpick an item on TARGET_PLAYER, which was forbidden",
                log: "PLAYER_NAME lockpicked an item on TARGET_PLAYER, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                OverridePlayerDialog("BCX_PickLockDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_PickLock.png", "Icons/PickLock.png");
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    const C = args[0];
                    if (C.ID !== 0 && state.isEnforced) {
                        const index = DialogMenuButton.indexOf("PickLock");
                        if (index >= 0) {
                            DialogMenuButton[index] = "BCX_PickLockDisabled";
                        }
                    }
                }, ModuleCategory.Rules);
                HookDialogMenuButtonClick("PickLock", (C) => {
                    if (C.ID !== 0 && state.inEffect) {
                        state.trigger(C.MemberNumber);
                    }
                    return false;
                });
                HookDialogMenuButtonClick("BCX_PickLockDisabled", (C) => {
                    if (C.ID !== 0 && state.inEffect) {
                        state.triggerAttempt(C.MemberNumber);
                    }
                    return false;
                });
            },
        });
        registerRule("block_lockuse_self", {
            name: "Forbid using locks on self",
            type: 0,
            shortDescription: "PLAYER_NAME using one on PLAYER_NAME",
            longDescription: "This rule forbids PLAYER_NAME to use any kind of lock on her own body. (Others still can add locks on her items normally)",
            keywords: ["controling", "limiting", "locking", "preventing"],
            triggerTexts: {
                infoBeep: "You are not allowed to lock items on your body!",
                attempt_log: "PLAYER_NAME tried to lock a worn item, which was forbidden",
                log: "PLAYER_NAME locked a worn item, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                OverridePlayerDialog("BCX_LockDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_Lock.png", "Icons/Lock.png");
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    const C = args[0];
                    if (C.ID === 0 && state.isEnforced) {
                        const index = DialogMenuButton.indexOf("Lock");
                        if (index >= 0) {
                            DialogMenuButton[index] = "BCX_LockDisabled";
                        }
                    }
                }, ModuleCategory.Rules);
                HookDialogMenuButtonClick("Lock", (C) => {
                    if (C.ID === 0 && state.inEffect) {
                        state.trigger();
                    }
                    return false;
                });
                HookDialogMenuButtonClick("BCX_LockDisabled", (C) => {
                    if (C.ID === 0 && state.inEffect) {
                        state.triggerAttempt();
                    }
                    return false;
                });
            },
        });
        registerRule("block_lockuse_others", {
            name: "Forbid using locks on others",
            type: 0,
            longDescription: "This rule forbids PLAYER_NAME to use any kind of lock on other club members.",
            keywords: ["controling", "limiting", "locking", "preventing"],
            triggerTexts: {
                infoBeep: "You are not allowed to lock other's items!",
                attempt_log: "PLAYER_NAME tried to lock TARGET_PLAYER's item, which was forbidden",
                log: "PLAYER_NAME locked TARGET_PLAYER's item, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                OverridePlayerDialog("BCX_LockDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_Lock.png", "Icons/Lock.png");
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    const C = args[0];
                    if (C.ID !== 0 && state.isEnforced) {
                        const index = DialogMenuButton.indexOf("Lock");
                        if (index >= 0) {
                            DialogMenuButton[index] = "BCX_LockDisabled";
                        }
                    }
                }, ModuleCategory.Rules);
                HookDialogMenuButtonClick("Lock", (C) => {
                    if (C.ID !== 0 && state.inEffect) {
                        state.trigger(C.MemberNumber);
                    }
                    return false;
                });
                HookDialogMenuButtonClick("BCX_LockDisabled", (C) => {
                    if (C.ID !== 0 && state.inEffect) {
                        state.triggerAttempt(C.MemberNumber);
                    }
                    return false;
                });
            },
        });
        registerRule("block_wardrobe_access_self", {
            name: "Forbid wardrobe use on self",
            type: 0,
            shortDescription: "PLAYER_NAME using PLAYER_NAME's wardrobe",
            longDescription: "This rule forbids PLAYER_NAME to access her own wardrobe. (Others still can change her clothes normally)",
            keywords: ["controling", "limiting", "clothings", "preventing", "changing"],
            triggerTexts: {
                infoBeep: "You are not allowed to change what you are wearing!",
                attempt_log: "PLAYER_NAME tried to use their wardrobe, which was forbidden",
                log: "PLAYER_NAME used their wardrobe, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                hookFunction("Player.CanChangeClothesOn", 2, (args, next) => {
                    const C = args[0];
                    if (C.IsPlayer() && state.isEnforced) {
                        return false;
                    }
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("CharacterAppearanceLoadCharacter", 0, (args, next) => {
                    const C = args[0];
                    if (C.ID === 0 && state.inEffect) {
                        state.trigger();
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_wardrobe_access_others", {
            name: "Forbid wardrobe use on others",
            type: 0,
            longDescription: "This rule forbids PLAYER_NAME to use the wardrobe of other club members.",
            keywords: ["controling", "limiting", "clothings", "preventing", "changing"],
            triggerTexts: {
                infoBeep: "You are not allowed to change what others wear!",
                attempt_log: "PLAYER_NAME tried to use TARGET_PLAYER's wardrobe, which was forbidden",
                log: "PLAYER_NAME used TARGET_PLAYER's wardrobe, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                hookFunction("Player.CanChangeClothesOn", 2, (args, next) => {
                    const C = args[0];
                    if (!C.IsPlayer() && state.isEnforced) {
                        return false;
                    }
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("CharacterAppearanceLoadCharacter", 0, (args, next) => {
                    const C = args[0];
                    if (C.ID !== 0 && state.inEffect) {
                        state.trigger();
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_restrict_allowed_poses", {
            name: "Restrict allowed body poses",
            type: 0,
            loggable: false,
            longDescription: "Allows to restrict the body poses PLAYER_NAME is able to get into by herself.",
            keywords: ["controling", "limiting", "preventing", "changing"],
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                poseButtons: {
                    type: "poseSelect",
                    default: [],
                    description: "Mark poses as being allowed or forbidden:",
                },
            },
            load(state) {
                let bypassPoseChange = false;
                hookFunction("CharacterCanChangeToPose", 3, (args, next) => {
                    var _a;
                    if (!bypassPoseChange && state.isEnforced && ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.poseButtons.includes(args[1])))
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomCanAttemptStand", 3, (args, next) => {
                    var _a;
                    if (state.isEnforced && ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.poseButtons.includes("BaseLower")))
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomCanAttemptKneel", 3, (args, next) => {
                    var _a;
                    if (state.isEnforced && ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.poseButtons.includes("Kneel")))
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("CharacterCanKneel", 3, (args, next) => {
                    var _a, _b;
                    if (state.isEnforced && ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.poseButtons.includes("Kneel")) && !Player.IsKneeling())
                        return false;
                    if (state.isEnforced && ((_b = state.customData) === null || _b === void 0 ? void 0 : _b.poseButtons.includes("BaseLower")) && Player.IsKneeling())
                        return false;
                    bypassPoseChange = true;
                    const res = next(args);
                    bypassPoseChange = false;
                    return res;
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_creating_rooms", {
            name: "Forbid creating new rooms",
            type: 0,
            longDescription: "This rule forbids PLAYER_NAME to create new rooms.",
            keywords: ["controling", "limiting", "preventing"],
            triggerTexts: {
                infoBeep: "You are not allowed to create a new room!",
                attempt_log: "PLAYER_NAME tried to create a chatroom, which was forbidden",
                log: "PLAYER_NAME created a chatroom, which was forbidden",
                announce: "",
                attempt_announce: "",
            },
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                if (!NMod) {
                    hookFunction("ChatSearchRun", 0, (args, next) => {
                        next(args);
                        if (state.isEnforced && ChatSearchMode === "") {
                            DrawButton(1685, 885, 90, 90, "", "Gray", "Icons/Plus.png", TextGet("CreateRoom") + "(Blocked by BCX)", true);
                        }
                    }, ModuleCategory.Rules);
                }
                hookFunction("CommonSetScreen", 5, (args, next) => {
                    if (args[0] === "Online" && args[1] === "ChatCreate") {
                        if (state.isEnforced) {
                            state.triggerAttempt();
                            return;
                        }
                        else if (state.inEffect) {
                            state.trigger();
                        }
                    }
                    next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_entering_rooms", {
            name: "Restrict entering rooms",
            type: 0,
            shortDescription: "only allow entering specific ones",
            longDescription: "This rule forbids PLAYER_NAME to enter all rooms, that are not on an editable whitelist of still allowed ones. NOTE: As safety measure this rule is not in effect while the list is empty. TIP: This rule can be combined with the rule \"Forbid creating new rooms\".",
            keywords: ["controling", "limiting", "preventing", "entry"],
            triggerTexts: {
                infoBeep: "You are not allowed to enter this room!",
                attempt_log: "PLAYER_NAME tried to enter a forbidden room",
                log: "PLAYER_NAME entered a forbidden room",
                attempt_announce: "",
                announce: "PLAYER_NAME violated a rule to not enter this room",
            },
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                roomList: {
                    type: "stringList",
                    default: [],
                    description: "Only joining rooms with these names is allowed:",
                },
            },
            load(state) {
                if (!NMod) {
                    hookFunction("ChatSearchJoin", 5, (args, next) => {
                        if (state.inEffect && state.customData && state.customData.roomList.length > 0) {
                            let X = 25;
                            let Y = 25;
                            for (let C = ChatSearchResultOffset; C < ChatSearchResult.length && C < (ChatSearchResultOffset + 24); C++) {
                                if (MouseIn(X, Y, 630, 85)) {
                                    if (!state.customData.roomList.some(name => name.toLocaleLowerCase() === ChatSearchResult[C].Name.toLocaleLowerCase())) {
                                        if (state.isEnforced) {
                                            state.triggerAttempt();
                                            return;
                                        }
                                        else {
                                            state.trigger();
                                        }
                                    }
                                }
                                X += 660;
                                if (X > 1500) {
                                    X = 25;
                                    Y += 109;
                                }
                            }
                        }
                        next(args);
                    }, ModuleCategory.Rules);
                    hookFunction("ChatSearchNormalDraw", 5, (args, next) => {
                        next(args);
                        if (state.isEnforced && state.customData && state.customData.roomList.length > 0) {
                            let X = 25;
                            let Y = 25;
                            for (let C = ChatSearchResultOffset; C < ChatSearchResult.length && C < (ChatSearchResultOffset + 24); C++) {
                                if (!state.customData.roomList.some(name => name.toLocaleLowerCase() === ChatSearchResult[C].Name.toLocaleLowerCase())) {
                                    DrawButton(X, Y, 630, 85, "", "#88c", undefined, "Blocked by BCX", true);
                                    DrawTextFit((ChatSearchResult[C].Friends != null && ChatSearchResult[C].Friends.length > 0 ? "(" + ChatSearchResult[C].Friends.length + ") " : "") + ChatSearchMuffle(ChatSearchResult[C].Name) + " - " + ChatSearchMuffle(ChatSearchResult[C].Creator) + " " + ChatSearchResult[C].MemberCount + "/" + ChatSearchResult[C].MemberLimit + "", X + 315, Y + 25, 620, "black");
                                    DrawTextFit(ChatSearchMuffle(ChatSearchResult[C].Description), X + 315, Y + 62, 620, "black");
                                }
                                X += 660;
                                if (X > 1500) {
                                    X = 25;
                                    Y += 109;
                                }
                            }
                        }
                    }, ModuleCategory.Rules);
                }
            },
        });
        registerRule("block_leaving_room", {
            name: "Prevent leaving the room",
            type: 0,
            loggable: false,
            shortDescription: "while defined roles are inside",
            longDescription: "This rule prevents PLAYER_NAME from leaving the room they are currently inside while at least one character with the set minimum role or a higher one is present inside. NOTE: Careful when setting the minimum role too low. If it is set to public for instance, it would mean that PLAYER_NAME can only leave the room when they are alone in it.",
            keywords: ["controling", "limiting", "stopping", "exiting"],
            triggerTexts: {
                infoBeep: "Someone's presence does not allowed you to leave!",
                attempt_announce: "PLAYER_NAME violated a rule by trying to leave this room",
            },
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                minimumRole: {
                    type: "roleSelector",
                    default: AccessLevel.mistress,
                    description: "Minimum role preventing room leaving:",
                    Y: 320,
                },
            },
            load(state) {
                const active = () => state.isEnforced &&
                    !!state.customData &&
                    getAllCharactersInRoom()
                        .some(c => !c.isPlayer() && getCharacterAccessLevel(c) <= state.customData.minimumRole);
                hookFunction("ChatRoomCanLeave", 6, (args, next) => {
                    if (active())
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomMenuClick", 6, (args, next) => {
                    const Space = 870 / (ChatRoomMenuButtons.length - 1);
                    for (let B = 0; B < ChatRoomMenuButtons.length; B++) {
                        if (MouseXIn(1005 + Space * B, 120) && ChatRoomMenuButtons[B] === "Exit" && active()) {
                            state.triggerAttempt();
                        }
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_freeing_self", {
            name: "Forbid freeing self",
            type: 0,
            shortDescription: "PLAYER_NAME removing any items from PLAYER_NAME's body",
            longDescription: "This rule forbids PLAYER_NAME to remove any items from her own body. Other people can still remove them. The rule has a toggle to optionally still allow to remove items which were given a low difficulty score by the original asset maker, such as hand-held items, plushies, etc. This means that custom crafted properties given to an item such as 'decoy' are not factored in.",
            keywords: ["limiting", "untying", "unbinding", "bondage"],
            triggerTexts: {
                infoBeep: "You are not allowed to remove an item from your body!",
                attempt_log: "PLAYER_NAME tried to remove a worn item, which was forbidden",
                log: "PLAYER_NAME removed a worn item, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                allowEasyItemsToggle: {
                    type: "toggle",
                    default: false,
                    description: "Still allow removing low difficulty items",
                },
            },
            load(state) {
                let score = 999;
                OverridePlayerDialog("BCX_RemoveDisabled", "Usage blocked by BCX");
                OverridePlayerDialog("BCX_StruggleDisabled", "Usage blocked by BCX");
                OverridePlayerDialog("BCX_DismountDisabled", "Usage blocked by BCX");
                OverridePlayerDialog("BCX_EscapeDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_Remove.png", "Icons/Remove.png");
                RedirectGetImage("Icons/BCX_Struggle.png", "Icons/Struggle.png");
                RedirectGetImage("Icons/BCX_Dismount.png", "Icons/Dismount.png");
                RedirectGetImage("Icons/BCX_Escape.png", "Icons/Escape.png");
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    var _a, _b, _c;
                    next(args);
                    const C = args[0];
                    if (C.ID === 0 && C.FocusGroup && state.isEnforced) {
                        const Item = InventoryGet(C, C.FocusGroup.Name);
                        if (Item && ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.allowEasyItemsToggle)) {
                            score = ((_b = Item.Asset.Difficulty) !== null && _b !== void 0 ? _b : 0) + (typeof ((_c = Item.Property) === null || _c === void 0 ? void 0 : _c.Difficulty) === "number" ? Item.Property.Difficulty : 0);
                            if (score <= 1) {
                                return;
                            }
                        }
                        const index_remove = DialogMenuButton.indexOf("Remove");
                        const index_struggle = DialogMenuButton.indexOf("Struggle");
                        const index_dismount = DialogMenuButton.indexOf("Dismount");
                        const index_escape = DialogMenuButton.indexOf("Escape");
                        if (index_remove >= 0) {
                            DialogMenuButton[index_remove] = "BCX_RemoveDisabled";
                        }
                        if (index_struggle >= 0) {
                            DialogMenuButton[index_struggle] = "BCX_StruggleDisabled";
                        }
                        if (index_dismount >= 0) {
                            DialogMenuButton[index_dismount] = "BCX_DismountDisabled";
                        }
                        if (index_escape >= 0) {
                            DialogMenuButton[index_escape] = "BCX_EscapeDisabled";
                        }
                    }
                }, ModuleCategory.Rules);
                const trigger = (C) => {
                    if (C.ID === 0 && state.inEffect && score > 1) {
                        state.trigger();
                    }
                    return false;
                };
                const attempt = (C) => {
                    if (C.ID === 0 && state.inEffect && score > 1) {
                        state.triggerAttempt();
                    }
                    return false;
                };
                HookDialogMenuButtonClick("Remove", trigger);
                HookDialogMenuButtonClick("BCX_RemoveDisabled", attempt);
                HookDialogMenuButtonClick("Struggle", trigger);
                HookDialogMenuButtonClick("BCX_StruggleDisabled", attempt);
                HookDialogMenuButtonClick("Dismount", trigger);
                HookDialogMenuButtonClick("BCX_DismountDisabled", attempt);
                HookDialogMenuButtonClick("Escape", trigger);
                HookDialogMenuButtonClick("BCX_EscapeDisabled", attempt);
            },
        });
        registerRule("block_tying_others", {
            name: "Forbid tying up others",
            type: 0,
            shortDescription: "either everybody or only more dominant characters",
            longDescription: "This rule forbids PLAYER_NAME to use any items on other characters. Can be set to only affect using items on characters with a higher dominant / lower submissive score than PLAYER_NAME has.",
            keywords: ["limiting", "prevent", "restraints", "bondage"],
            triggerTexts: {
                infoBeep: "You are not allowed to use an item on TARGET_PLAYER!",
                attempt_log: "PLAYER_NAME tried to use an item on TARGET_PLAYER, which was forbidden",
                log: "PLAYER_NAME used an item on TARGET_PLAYER, which was forbidden",
            },
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                onlyMoreDominantsToggle: {
                    type: "toggle",
                    default: true,
                    description: "Only forbid tying people with higher dominance",
                },
            },
            load(state) {
                hookFunction("DialogItemClick", 5, (args, next) => {
                    if (state.inEffect && state.customData) {
                        const toggleOn = state.customData.onlyMoreDominantsToggle;
                        const C = (Player.FocusGroup != null) ? Player : CurrentCharacter;
                        if (C && C.ID !== 0 && (toggleOn ? ReputationCharacterGet(Player, "Dominant") < ReputationCharacterGet(C, "Dominant") : true)) {
                            if (state.isEnforced) {
                                state.triggerAttempt(C.MemberNumber);
                                return;
                            }
                            else {
                                state.trigger(C.MemberNumber);
                            }
                        }
                    }
                    next(args);
                }, ModuleCategory.Rules);
                hookFunction("AppearanceGetPreviewImageColor", 5, (args, next) => {
                    var _a;
                    const toggleOn = (_a = state.customData) === null || _a === void 0 ? void 0 : _a.onlyMoreDominantsToggle;
                    const C = args[0];
                    if (C && C.ID !== 0 && state.isEnforced && (toggleOn ? ReputationCharacterGet(Player, "Dominant") < ReputationCharacterGet(C, "Dominant") : true)) {
                        return "grey";
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_blacklisting", {
            name: "Prevent blacklisting",
            type: 0,
            loggable: false,
            shortDescription: "and ghosting of the defined roles",
            longDescription: "This rule prevents PLAYER_NAME from adding characters with the set minimum role or a higher one to their bondage club blacklist and ghostlist.",
            keywords: ["limiting"],
            triggerTexts: {
                infoBeep: "You are not allowed to blacklist/ghost this person!",
                attempt_announce: "PLAYER_NAME violated a rule by trying to blacklist TARGET_PLAYER",
            },
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                minimumRole: {
                    type: "roleSelector",
                    default: AccessLevel.mistress,
                    description: "Minimum role forbidden to blacklist:",
                    Y: 320,
                },
            },
            load(state) {
                if (!NMod) {
                    hookFunction("ChatRoomListUpdate", 6, (args, next) => {
                        const CN = parseInt(args[2], 10);
                        if (state.isEnforced &&
                            state.customData &&
                            (args[0] === Player.BlackList || args[0] === Player.GhostList) &&
                            args[1] &&
                            typeof CN === "number" &&
                            getCharacterAccessLevel(CN) <= state.customData.minimumRole) {
                            state.triggerAttempt(CN);
                            return;
                        }
                        return next(args);
                    }, ModuleCategory.Rules);
                }
            },
        });
        registerRule("block_whitelisting", {
            name: "Prevent whitelisting",
            type: 0,
            loggable: false,
            shortDescription: "of roles 'friend' or 'public'",
            longDescription: "This rule prevents PLAYER_NAME from adding characters with a role lower than a BCX Mistress to their bondage club whitelist.",
            keywords: ["limiting"],
            triggerTexts: {
                infoBeep: "You are not allowed to whitelist this person!",
                attempt_announce: "PLAYER_NAME violated a rule by trying to whitelist TARGET_PLAYER",
            },
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                if (!NMod) {
                    hookFunction("ChatRoomListUpdate", 6, (args, next) => {
                        const CN = parseInt(args[2], 10);
                        if (state.isEnforced &&
                            args[0] === Player.WhiteList &&
                            args[1] &&
                            typeof CN === "number" &&
                            getCharacterAccessLevel(CN) > AccessLevel.mistress) {
                            state.triggerAttempt(CN);
                            return;
                        }
                        return next(args);
                    }, ModuleCategory.Rules);
                }
            },
        });
        registerRule("block_antiblind", {
            name: "Forbid the antiblind command",
            type: 0,
            shortDescription: "BCX's .antiblind command",
            longDescription: "This rule forbids PLAYER_NAME to use the antiblind command. Antiblind is a BCX feature that enables a BCX user to see the whole chat room and all other characters at all times, even when wearing a blinding item. If PLAYER_NAME should be forbidden to use the command, this rule should be used.",
            keywords: ["limiting", "preventing", "controling"],
            triggerTexts: {
                infoBeep: "You are not allowed to use the antiblind command!",
                attempt_log: "PLAYER_NAME tried to use the antiblind command",
                log: "PLAYER_NAME used the antiblind command",
            },
            defaultLimit: ConditionsLimit.normal,
        });
        registerRule("block_difficulty_change", {
            name: "Forbid changing difficulty",
            type: 0,
            shortDescription: "multiplayer difficulty preference",
            longDescription: "This rule forbids PLAYER_NAME to change her Bondage Club multiplayer difficulty, regardless of the current value.",
            keywords: ["limiting", "preventing", "controling"],
            triggerTexts: {
                infoBeep: "You are not allowed to change your difficulty!",
                attempt_log: "PLAYER_NAME tried to change her multiplayer difficulty",
                log: "PLAYER_NAME changed her multiplayer difficulty",
            },
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                hookFunction("PreferenceSubscreenDifficultyRun", 5, (args, next) => {
                    var _a;
                    next(args);
                    const LastChange = typeof ((_a = Player === null || Player === void 0 ? void 0 : Player.Difficulty) === null || _a === void 0 ? void 0 : _a.LastChange) !== "number" ? Player.Creation : Player.Difficulty.LastChange;
                    if (state.isEnforced &&
                        PreferenceDifficultyLevel != null &&
                        PreferenceDifficultyLevel !== Player.GetDifficulty() &&
                        (PreferenceDifficultyLevel <= 1 || LastChange + 604800000 < CurrentTime) &&
                        PreferenceDifficultyAccept) {
                        DrawButton(500, 825, 300, 64, TextGet("DifficultyChangeMode") + " " + TextGet(`DifficultyLevel${PreferenceDifficultyLevel}`), "#88c", undefined, "Blocked by BCX", true);
                    }
                });
                hookFunction("PreferenceSubscreenDifficultyClick", 5, (args, next) => {
                    var _a;
                    const LastChange = typeof ((_a = Player === null || Player === void 0 ? void 0 : Player.Difficulty) === null || _a === void 0 ? void 0 : _a.LastChange) !== "number" ? Player.Creation : Player.Difficulty.LastChange;
                    if (state.inEffect &&
                        PreferenceDifficultyLevel != null &&
                        PreferenceDifficultyLevel !== Player.GetDifficulty() &&
                        (PreferenceDifficultyLevel <= 1 || LastChange + 604800000 < CurrentTime) &&
                        PreferenceDifficultyAccept &&
                        MouseIn(500, 825, 300, 64)) {
                        if (state.isEnforced) {
                            state.triggerAttempt();
                            return;
                        }
                        state.trigger();
                    }
                    next(args);
                });
            },
        });
        registerRule("block_activities", {
            name: "Prevent usage of all activities",
            type: 0,
            loggable: false,
            shortDescription: "any action buttons such as kissing or groping",
            longDescription: "This rule forbids PLAYER_NAME to use any (sexual) activities in chat rooms. Other players can still use activities on her, as this rules does not block the arousal & sexual activities system itself, as forcing the according BC setting would.",
            keywords: ["limiting", "forbid", "controling"],
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                OverridePlayerDialog("BCX_ActivityDisabled", "Usage blocked by BCX");
                RedirectGetImage("Icons/BCX_Activity.png", "Icons/Activity.png");
                hookFunction("DialogMenuButtonBuild", 0, (args, next) => {
                    next(args);
                    if (state.isEnforced) {
                        const index = DialogMenuButton.indexOf("Activity");
                        if (index >= 0) {
                            DialogMenuButton[index] = "BCX_ActivityDisabled";
                        }
                    }
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_mainhall_maidrescue", {
            name: "Forbid mainhall maid services",
            loggable: false,
            type: 0,
            shortDescription: "to get out of any restraints",
            longDescription: "This rule forbids PLAYER_NAME to use a maid's help to get out of restraints in the club's main hall. Recommended to combine with the rule: 'Force 'Cannot enter single-player rooms when restrained' (Existing BC setting)' to prevent NPCs in other rooms from helping.",
            keywords: ["limiting", "preventing", "controling"],
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                hookFunction("LogValue", 5, (args, next) => {
                    if (state.isEnforced && args[0] === "MaidsDisabled" && args[1] === "Maid")
                        return CurrentTime + 500000000;
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("MainHallMaidsDisabledBegForMore", 5, (args, next) => {
                    if (state.isEnforced)
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_action", {
            name: "Forbid the action command",
            type: 0,
            shortDescription: "BCX's .action/.a chat command",
            longDescription: "This rule forbids PLAYER_NAME to use the action command. Action is a BCX feature that enables to format a message to look like a BC chat action. If PLAYER_NAME should be forbidden to use the command to communicate, this rule should be used.",
            keywords: ["limiting", "preventing", "controling"],
            triggerTexts: {
                infoBeep: "You are not allowed to use the action command!",
                attempt_log: "PLAYER_NAME tried to use the action command",
                log: "PLAYER_NAME used the action command",
            },
            defaultLimit: ConditionsLimit.blocked,
        });
        registerRule("block_BCX_permissions", {
            name: "Prevent using BCX permissions",
            loggable: false,
            type: 0,
            shortDescription: "PLAYER_NAME using her permissions for her own BCX, with some exceptions",
            longDescription: "This rule forbids PLAYER_NAME access to some parts of their own BCX they have permission to use, making it as if they do not have 'self access' (see BCX tutorial on permission system) while the rule is active. This rule still leaves access for all permissions where the lowest permitted role ('lowest access') is also set to PLAYER_NAME (to prevent getting stuck). This rule does not affect PLAYER_NAME's permissions to use another users's BCX.",
            keywords: ["limiting", "preventing", "controlling", "accessing", "self", "rights"],
            defaultLimit: ConditionsLimit.blocked,
        });
        registerRule("block_room_admin_UI", {
            name: "Forbid looking at room admin UI",
            type: 0,
            loggable: false,
            shortDescription: "while blindfolded",
            longDescription: "This rule forbids PLAYER_NAME from opening the room admin screen while blindfolded, as this discloses the room background and the member numbers of admins, potentially in the room right now. If PLAYER_NAME is a room admin, she can still use chat commands for altering the room or kicking/banning.",
            keywords: ["limiting", "preventing", "controling", "seeing"],
            triggerTexts: {
                infoBeep: "A BCX rule prevents you from using this while unable to see!",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                const active = () => state.isEnforced && Player.IsBlind();
                hookFunction("ChatRoomMenuDraw", 6, (args, next) => {
                    next(args);
                    const Space = 870 / (ChatRoomMenuButtons.length - 1);
                    for (let B = 0; B < ChatRoomMenuButtons.length; B++) {
                        const Button = ChatRoomMenuButtons[B];
                        if (Button === "Admin" && active()) {
                            DrawButton(1005 + Space * B, 2, 120, 60, "", "Pink", "Icons/Rectangle/" + Button + ".png", TextGet("Menu" + Button));
                        }
                    }
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomMenuClick", 6, (args, next) => {
                    const Space = 870 / (ChatRoomMenuButtons.length - 1);
                    for (let B = 0; B < ChatRoomMenuButtons.length; B++) {
                        if (MouseXIn(1005 + Space * B, 120) && ChatRoomMenuButtons[B] === "Admin" && active()) {
                            state.triggerAttempt();
                            return false;
                        }
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_using_ggts", {
            name: "Forbid using GGTS",
            type: 0,
            shortDescription: "training by GGTS is forbidden",
            longDescription: "This rule forbids PLAYER_NAME to revieve training by the base club's GGTS feature. If the rule is enforced while PLAYER_NAME has remaining GGTS training time, it is removed the moment PLAYER_NAME enters the GGTS room.",
            keywords: ["limiting", "preventing", "controling"],
            triggerTexts: {
                infoBeep: "You are not allowed to recieve training by GGTS!",
                attempt_log: "PLAYER_NAME tried to recieve training by GGTS",
                log: "PLAYER_NAME started training by GGTS",
            },
            defaultLimit: ConditionsLimit.limited,
            load(state) {
                hookFunction("AsylumGGTSLoad", 0, (args, next) => {
                    if (state.isEnforced) {
                        const time = LogValue("ForceGGTS", "Asylum");
                        if (time && time > 0) {
                            LogDelete("ForceGGTS", "Asylum", true);
                        }
                        return false;
                    }
                    return next(args);
                }, ModuleCategory.Rules);
                hookFunction("AsylumGGTSClick", 0, (args, next) => {
                    if (state.inEffect && MouseIn(1000, 0, 500, 1000)) {
                        if (state.isEnforced) {
                            state.triggerAttempt();
                            return;
                        }
                        state.trigger();
                    }
                    next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_club_slave_work", {
            name: "Prevent working as club slave",
            type: 0,
            loggable: false,
            shortDescription: "the task from the mistress room",
            longDescription: "This rule prevents PLAYER_NAME to work as a club slave by picking up a club slave collar from the club management room.",
            keywords: ["limiting", "preventing", "controling", "task", "money"],
            defaultLimit: ConditionsLimit.limited,
            load(state) {
                hookFunction("ManagementCanBeClubSlave", 0, (args, next) => {
                    if (state.isEnforced) {
                        return false;
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_using_unowned_items", {
            name: "Prevent using items of others",
            type: 0,
            loggable: false,
            shortDescription: "items not bought",
            longDescription: "This rule prevents PLAYER_NAME to use items she does not own herself, but can use on someone because this person owns them.",
            keywords: ["limiting", "forbid", "controling", "restraints", "gear", "characters"],
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                hookFunction("DialogInventoryBuild", 1, (args, next) => {
                    const C = args[0];
                    const inventoryBackup = C.Inventory;
                    try {
                        if (state.isEnforced && !C.IsPlayer()) {
                            C.Inventory = [];
                        }
                        next(args);
                    }
                    finally {
                        C.Inventory = inventoryBackup;
                    }
                }, ModuleCategory.Rules);
            },
        });
        registerRule("block_changing_emoticon", {
            name: "Prevent changing own emoticon",
            type: 0,
            shortDescription: "for just PLAYER_NAME",
            longDescription: "This rule prevents PLAYER_NAME from showing, removing or changing an emoticon (afk, zZZ, etc.) over her head. It also blocks her from using the emoticon command on herself.",
            triggerTexts: {
                infoBeep: "You are not allowed to change the emoticon!",
                attempt_log: "PLAYER_NAME tried to use the emoticon command",
                log: "PLAYER_NAME used the emoticon command",
            },
            defaultLimit: ConditionsLimit.normal,
            load(state) {
                hookFunction("DialogClickExpressionMenu", 5, (args, next) => {
                    const I = DialogFacialExpressions.findIndex(a => a.Appearance.Asset.Group.Name === "Emoticon");
                    if (state.inEffect && MouseIn(20, 185 + 100 * I, 90, 90)) {
                        if (state.isEnforced) {
                            state.triggerAttempt();
                            return;
                        }
                        state.trigger();
                    }
                    return next(args);
                });
            },
        });
        let changed = false;
        registerRule("block_ui_icons_names", {
            name: "Force-hide UI elements",
            type: 0,
            loggable: false,
            shortDescription: "e.g., icons, bars, or names",
            longDescription: "This rule enforces hiding of certain UI elements for PLAYER_NAME over all characters inside the room. Different levels of the effect can be set which follow exactly the behavior of the 'eye'-toggle in the button row above the chat. There is also an option to hide emoticon bubbles over all characters' heads.",
            keywords: ["seeing", "room", "viewing", "looking", "eye", "emoticons"],
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                hidingStrength: {
                    type: "listSelect",
                    default: "icons",
                    options: [["icons", "Icons"], ["arousal", "Icons/Bar"], ["names", "Icons/Bar/Names"]],
                    description: "Select what shall be hidden:",
                },
                alsoHideEmoticons: {
                    type: "toggle",
                    default: false,
                    description: "Also hide emoticons during the effect",
                    Y: 440,
                },
            },
            load(state) {
                hookFunction("ChatRoomDrawCharacter", 1, (args, next) => {
                    const ChatRoomHideIconStateBackup = ChatRoomHideIconState;
                    if (state.isEnforced && state.customData) {
                        if (state.customData.hidingStrength === "icons") {
                            ChatRoomHideIconState = 1;
                        }
                        else if (state.customData.hidingStrength === "arousal") {
                            ChatRoomHideIconState = 2;
                        }
                        else if (state.customData.hidingStrength === "names") {
                            ChatRoomHideIconState = 3;
                        }
                        else {
                            console.error(`Rule block_ui_icons_names state.customData.hidingStrength has illegal value: ${state.customData.hidingStrength}`);
                        }
                    }
                    next(args);
                    ChatRoomHideIconState = ChatRoomHideIconStateBackup;
                });
                hookFunction("CharacterLoadCanvas", 2, (args, next) => {
                    const Emoticon = InventoryGet(args[0], "Emoticon");
                    if (!Emoticon || !Emoticon.Property || Emoticon.Property.Expression === undefined)
                        return next(args);
                    const EmoticonStateBackup = Emoticon.Property.Expression;
                    if (state.isEnforced && state.customData && state.customData.alsoHideEmoticons) {
                        Emoticon.Property.Expression = null;
                    }
                    next(args);
                    Emoticon.Property.Expression = EmoticonStateBackup;
                });
            },
            tick(state) {
                if (state.customData && state.customData.alsoHideEmoticons !== changed) {
                    changed = state.customData.alsoHideEmoticons;
                    for (const c of ChatRoomCharacter) {
                        CharacterLoadCanvas(c);
                    }
                }
                return false;
            },
            stateChange(state, newState) {
                for (const c of ChatRoomCharacter) {
                    CharacterLoadCanvas(c);
                }
            },
        });
    }

    function initRules_bc_settings() {
        function preferenceSync() {
            ServerAccountUpdate.QueueData({
                ArousalSettings: Player.ArousalSettings,
                GameplaySettings: Player.GameplaySettings,
                ImmersionSettings: Player.ImmersionSettings,
                OnlineSettings: Player.OnlineSettings,
                OnlineSharedSettings: Player.OnlineSharedSettings,
                GraphicsSettings: Player.GraphicsSettings,
                ItemPermission: Player.ItemPermission,
            });
        }
        function settingHelper(setting, defaultLimit, shortDescription = "Existing BC setting") {
            return {
                name: `Force '${setting}'`,
                type: 2,
                loggable: false,
                shortDescription,
                keywords: ["control", "settings", "configure", "change"],
                defaultLimit,
                longDescription: `This rule forces PLAYER_NAME's base game setting '${setting}' to configurable value and prevents her from changing it.`,
                triggerTexts: {
                    infoBeep: `Rule changed your '${setting}' setting`,
                },
            };
        }
        function toggleSettingHelper({ id, setting, shortDescription, defaultValue, defaultLimit, get, set, }) {
            return registerRule(id, {
                ...settingHelper(setting, defaultLimit, shortDescription),
                longDescription: `This rule forces PLAYER_NAME's base game or BCX setting '${setting}' to the configured value and prevents her from changing it. ` +
                    `There is also an option to restore the setting to the state it was in before the rule changed it. The restoration happens either when the rule becomes ` +
                    `inactive (for instance through toggle or unfulfilled trigger conditions) or when it is removed.`,
                dataDefinition: {
                    value: {
                        type: "toggle",
                        description: setting,
                        default: defaultValue,
                    },
                    restore: {
                        type: "toggle",
                        description: "Restore previous value when rule ends",
                        default: true,
                        Y: 420,
                    },
                },
                internalDataValidate: (data) => typeof data === "boolean",
                internalDataDefault: () => { var _a; return (_a = get()) !== null && _a !== void 0 ? _a : false; },
                stateChange(state, newState) {
                    var _a;
                    if (newState) {
                        const current = get();
                        if (current !== undefined) {
                            state.internalData = current;
                        }
                    }
                    else if ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.restore) {
                        const old = state.internalData;
                        if (old !== undefined) {
                            set(old);
                            preferenceSync();
                        }
                    }
                },
                tick(state) {
                    if (state.isEnforced && state.customData) {
                        const current = get();
                        if (current == null) {
                            console.error(`BCX: Undfined value while forcing setting ${setting}`);
                            return false;
                        }
                        if (current !== state.customData.value) {
                            set(state.customData.value);
                            state.trigger();
                            preferenceSync();
                            return true;
                        }
                    }
                    return false;
                },
            });
        }
        registerRule("setting_item_permission", {
            ...settingHelper("Item permission", ConditionsLimit.limited),
            dataDefinition: {
                value: {
                    type: "listSelect",
                    options: [
                        ["everyone", "Everyone, no exceptions"],
                        ["everyoneBlacklist", "Everyone, except blacklist"],
                        ["dominants", "Owner, Lovers, whitelist & Dominants"],
                        ["whitelist", "Owner, Lovers and whitelist only"],
                    ],
                    default: "everyone",
                    description: "Item permission",
                },
            },
            tick(state) {
                var _a;
                if (state.isEnforced && state.customData) {
                    const VALUE_CONVERSIONS = {
                        everyone: 0,
                        everyoneBlacklist: 1,
                        dominants: 2,
                        whitelist: 3,
                    };
                    const wanted = (_a = VALUE_CONVERSIONS[state.customData.value]) !== null && _a !== void 0 ? _a : 0;
                    if (Player.ItemPermission !== wanted) {
                        Player.ItemPermission = wanted;
                        state.trigger();
                        preferenceSync();
                        return true;
                    }
                }
                return false;
            },
        });
        toggleSettingHelper({
            id: "setting_forbid_lockpicking",
            setting: "Locks on you can't be picked",
            defaultValue: true,
            defaultLimit: ConditionsLimit.limited,
            get: () => { var _a; return (_a = Player.OnlineSharedSettings) === null || _a === void 0 ? void 0 : _a.DisablePickingLocksOnSelf; },
            set: value => Player.OnlineSharedSettings.DisablePickingLocksOnSelf = value,
        });
        toggleSettingHelper({
            id: "setting_forbid_SP_rooms",
            setting: "Cannot enter single-player rooms when restrained",
            defaultValue: true,
            defaultLimit: ConditionsLimit.limited,
            get: () => { var _a; return (_a = Player.GameplaySettings) === null || _a === void 0 ? void 0 : _a.OfflineLockedRestrained; },
            set: value => Player.GameplaySettings.OfflineLockedRestrained = value,
        });
        toggleSettingHelper({
            id: "setting_forbid_safeword",
            setting: "Allow safeword use",
            defaultValue: false,
            defaultLimit: ConditionsLimit.limited,
            get: () => { var _a; return (_a = Player.GameplaySettings) === null || _a === void 0 ? void 0 : _a.EnableSafeword; },
            set: value => Player.GameplaySettings.EnableSafeword = value,
        });
        registerRule("setting_arousal_meter", {
            ...settingHelper("Arousal meter", ConditionsLimit.limited),
            dataDefinition: {
                active: {
                    type: "listSelect",
                    options: [
                        ["Inactive", "Disable sexual activities"],
                        ["NoMeter", "Allow without a meter"],
                        ["Manual", "Allow with a manual meter"],
                        ["Hybrid", "Allow with a hybrid meter"],
                        ["Automatic", "Allow with a locked meter"],
                    ],
                    default: "Hybrid",
                    description: "Sexual activities - Activation",
                },
                visible: {
                    type: "listSelect",
                    options: [
                        ["All", "Show arousal to everyone"],
                        ["Access", "Show if they have access"],
                        ["Self", "Show to yourself only"],
                    ],
                    default: "All",
                    description: "Meter visibility",
                    Y: 480,
                },
            },
            tick(state) {
                let change = false;
                if (state.isEnforced && state.customData && Player.ArousalSettings) {
                    if (Player.ArousalSettings.Active !== state.customData.active) {
                        Player.ArousalSettings.Active = state.customData.active;
                        change = true;
                    }
                    if (Player.ArousalSettings.Visible !== state.customData.visible) {
                        Player.ArousalSettings.Visible = state.customData.visible;
                        change = true;
                    }
                    if (change) {
                        state.trigger();
                        preferenceSync();
                    }
                }
                return change;
            },
        });
        toggleSettingHelper({
            id: "setting_block_vibe_modes",
            setting: "Block advanced vibrator modes",
            defaultValue: false,
            defaultLimit: ConditionsLimit.limited,
            get: () => { var _a; return (_a = Player.ArousalSettings) === null || _a === void 0 ? void 0 : _a.DisableAdvancedVibes; },
            set: value => Player.ArousalSettings.DisableAdvancedVibes = value,
        });
        registerRule("setting_arousal_stutter", {
            ...settingHelper("Arousal speech stuttering", ConditionsLimit.limited),
            dataDefinition: {
                value: {
                    type: "listSelect",
                    options: [
                        ["None", "Never stutter"],
                        ["Arousal", "When you're aroused"],
                        ["Vibration", "When you're vibrated"],
                        ["All", "Aroused & vibrated"],
                    ],
                    default: "All",
                    description: "Speech stuttering",
                },
            },
            tick(state) {
                if (state.isEnforced && state.customData && Player.ArousalSettings) {
                    if (Player.ArousalSettings.AffectStutter !== state.customData.value) {
                        Player.ArousalSettings.AffectStutter = state.customData.value;
                        state.trigger();
                        preferenceSync();
                        return true;
                    }
                }
                return false;
            },
        });
        toggleSettingHelper({
            id: "setting_show_afk",
            setting: "Show AFK bubble",
            defaultValue: true,
            defaultLimit: ConditionsLimit.blocked,
            get: () => { var _a; return (_a = Player.OnlineSettings) === null || _a === void 0 ? void 0 : _a.EnableAfkTimer; },
            set: value => Player.OnlineSettings.EnableAfkTimer = value,
        });
        toggleSettingHelper({
            id: "setting_allow_body_mod",
            setting: "Allow others to alter your whole appearance",
            defaultValue: true,
            defaultLimit: ConditionsLimit.blocked,
            get: () => { var _a; return (_a = Player.OnlineSharedSettings) === null || _a === void 0 ? void 0 : _a.AllowFullWardrobeAccess; },
            set: value => Player.OnlineSharedSettings.AllowFullWardrobeAccess = value,
        });
        toggleSettingHelper({
            id: "setting_forbid_cosplay_change",
            setting: "Prevent others from changing cosplay items",
            defaultValue: false,
            defaultLimit: ConditionsLimit.blocked,
            get: () => { var _a; return (_a = Player.OnlineSharedSettings) === null || _a === void 0 ? void 0 : _a.BlockBodyCosplay; },
            set: value => Player.OnlineSharedSettings.BlockBodyCosplay = value,
        });
        registerRule("setting_sensdep", {
            ...settingHelper("Sensory deprivation setting", ConditionsLimit.blocked),
            dataDefinition: {
                value: {
                    type: "listSelect",
                    options: [
                        ["SensDepLight", "Light"],
                        ["Normal", "Normal"],
                        ["SensDepNames", "Hide names"],
                        ["SensDepTotal", "Heavy"],
                        ["SensDepExtreme", "Total"],
                    ],
                    default: "Normal",
                    description: "Sensory deprivation setting",
                },
                disableExamine: {
                    type: "toggle",
                    default: false,
                    description: "Disable examining when blind",
                    Y: 480,
                },
                hideMessages: {
                    type: "toggle",
                    default: false,
                    description: "Hide others' messages",
                    Y: 580,
                },
            },
            tick(state) {
                let changed = false;
                if (state.isEnforced && state.customData && Player.GameplaySettings && Player.ImmersionSettings) {
                    if (Player.GameplaySettings.SensDepChatLog !== state.customData.value) {
                        Player.GameplaySettings.SensDepChatLog = state.customData.value;
                        changed = true;
                    }
                    const bdeForceOff = state.customData.value === "SensDepLight";
                    const bdeForceOn = state.customData.value === "SensDepExtreme";
                    const bdeTarget = (state.customData.disableExamine && !bdeForceOff) || bdeForceOn;
                    if (Player.GameplaySettings.BlindDisableExamine !== bdeTarget) {
                        Player.GameplaySettings.BlindDisableExamine = bdeTarget;
                        changed = true;
                    }
                    const canHideMessages = state.customData.value !== "SensDepLight";
                    const hideMessagesTarget = canHideMessages && state.customData.hideMessages;
                    if (Player.ImmersionSettings.SenseDepMessages !== hideMessagesTarget) {
                        Player.ImmersionSettings.SenseDepMessages = hideMessagesTarget;
                        changed = true;
                    }
                    if (changed) {
                        state.trigger();
                        preferenceSync();
                    }
                }
                return changed;
            },
        });
        toggleSettingHelper({
            id: "setting_hide_non_adjecent",
            setting: "Hide non-adjacent players while partially blind",
            defaultValue: true,
            defaultLimit: ConditionsLimit.blocked,
            get: () => { var _a; return (_a = Player.ImmersionSettings) === null || _a === void 0 ? void 0 : _a.BlindAdjacent; },
            set: value => Player.ImmersionSettings.BlindAdjacent = value,
        });
        toggleSettingHelper({
            id: "setting_blind_room_garbling",
            setting: "Garble chatroom names and descriptions while blind",
            defaultValue: true,
            defaultLimit: ConditionsLimit.blocked,
            get: () => { var _a; return (_a = Player.ImmersionSettings) === null || _a === void 0 ? void 0 : _a.ChatRoomMuffle; },
            set: value => Player.ImmersionSettings.ChatRoomMuffle = value,
        });
        toggleSettingHelper({
            id: "setting_relog_keeps_restraints",
            setting: "Keep all restraints when relogging",
            defaultValue: true,
            defaultLimit: ConditionsLimit.limited,
            get: () => { var _a; return (_a = Player.GameplaySettings) === null || _a === void 0 ? void 0 : _a.DisableAutoRemoveLogin; },
            set: value => Player.GameplaySettings.DisableAutoRemoveLogin = value,
        });
        toggleSettingHelper({
            id: "setting_leashed_roomchange",
            setting: "Players can drag you to rooms when leashed",
            defaultValue: true,
            defaultLimit: ConditionsLimit.blocked,
            get: () => { var _a; return (_a = Player.OnlineSharedSettings) === null || _a === void 0 ? void 0 : _a.AllowPlayerLeashing; },
            set: value => Player.OnlineSharedSettings.AllowPlayerLeashing = value,
        });
        registerRule("setting_room_rejoin", {
            ...settingHelper("Return to chatrooms on relog", ConditionsLimit.limited),
            dataDefinition: {
                value: {
                    type: "toggle",
                    default: true,
                    description: "Return to chatrooms on relog",
                },
                remakeRooms: {
                    type: "toggle",
                    default: false,
                    description: "Auto-remake rooms",
                    Y: 425,
                },
            },
            tick(state) {
                let changed = false;
                if (state.isEnforced && state.customData && Player.ImmersionSettings) {
                    if (Player.ImmersionSettings.ReturnToChatRoom !== state.customData.value) {
                        Player.ImmersionSettings.ReturnToChatRoom = state.customData.value;
                        changed = true;
                    }
                    const returnToRoomEnabled = state.customData.value;
                    const remakeRoomTarget = returnToRoomEnabled && state.customData.remakeRooms;
                    if (Player.ImmersionSettings.ReturnToChatRoomAdmin !== remakeRoomTarget) {
                        Player.ImmersionSettings.ReturnToChatRoomAdmin = remakeRoomTarget;
                        changed = true;
                    }
                    if (changed) {
                        state.trigger();
                        preferenceSync();
                    }
                }
                return changed;
            },
        });
        toggleSettingHelper({
            id: "setting_plug_vibe_events",
            setting: "Events while plugged or vibed",
            defaultValue: true,
            defaultLimit: ConditionsLimit.normal,
            get: () => { var _a; return (_a = Player.ImmersionSettings) === null || _a === void 0 ? void 0 : _a.StimulationEvents; },
            set: value => Player.ImmersionSettings.StimulationEvents = value,
        });
        toggleSettingHelper({
            id: "setting_allow_tint_effects",
            setting: "Allow item tint effects",
            defaultValue: true,
            defaultLimit: ConditionsLimit.limited,
            get: () => { var _a; return (_a = Player.ImmersionSettings) === null || _a === void 0 ? void 0 : _a.AllowTints; },
            set: value => Player.ImmersionSettings.AllowTints = value,
        });
        toggleSettingHelper({
            id: "setting_allow_blur_effects",
            setting: "Allow item blur effects",
            defaultValue: true,
            defaultLimit: ConditionsLimit.blocked,
            get: () => { var _a; return (_a = Player.GraphicsSettings) === null || _a === void 0 ? void 0 : _a.AllowBlur; },
            set: value => Player.GraphicsSettings.AllowBlur = value,
        });
        toggleSettingHelper({
            id: "setting_upsidedown_view",
            setting: "Flip room vertically when upside-down",
            defaultValue: true,
            defaultLimit: ConditionsLimit.blocked,
            get: () => { var _a; return (_a = Player.GraphicsSettings) === null || _a === void 0 ? void 0 : _a.InvertRoom; },
            set: value => Player.GraphicsSettings.InvertRoom = value,
        });
        toggleSettingHelper({
            id: "setting_random_npc_events",
            setting: "Prevent random NPC events",
            shortDescription: "from BCX's Misc module",
            defaultValue: true,
            defaultLimit: ConditionsLimit.normal,
            get: () => cheatIsEnabled(MiscCheat.BlockRandomEvents),
            set: value => cheatSetEnabled(MiscCheat.BlockRandomEvents, value),
        });
    }

    function initRules_bc_relation_control() {
        registerRule("rc_club_owner", {
            name: "Forbid club owner changes",
            type: 3,
            shortDescription: "getting or leaving owner",
            longDescription: "This rule forbids PLAYER_NAME to leave their current club owner or get a new one. Advancing ownership from trial to full ownership is unaffected. Doesn't prevent the club owner from releasing her.",
            keywords: ["prevent", "ownership", "collaring", "break"],
            loggable: false,
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                hookFunction("ChatRoomOwnershipOptionIs", 5, (args, next) => {
                    const Option = args[0];
                    if (state.isEnforced && Option === "CanStartTrial")
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
                for (const fun of [
                    "ManagementCanBeReleasedOnline",
                    "ManagementCanBreakTrialOnline",
                    "ManagementCannotBeReleasedOnline",
                    "ManagementCanBeReleased",
                    "ManagementCannotBeReleased",
                ]) {
                    hookFunction(fun, 5, (args, next) => {
                        return !state.isEnforced && next(args);
                    }, ModuleCategory.Rules);
                }
                hookFunction("ManagementCannotBeReleasedExtreme", 5, (args, next) => {
                    return state.isEnforced || next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("rc_lover_new", {
            name: "Forbid getting new lovers",
            type: 3,
            longDescription: "This rule forbids PLAYER_NAME to get a new lover. Advancing lovership from dating to engagement or from engagement to marriage is unaffected.",
            keywords: ["prevent", "lovership", "dating"],
            loggable: false,
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                hookFunction("ChatRoomLovershipOptionIs", 5, (args, next) => {
                    const Option = args[0];
                    if (state.isEnforced && (Option === "CanOfferBeginDating" || Option === "CanBeginDating"))
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("rc_lover_leave", {
            name: "Forbid breaking up with lovers",
            type: 3,
            longDescription: "This rule forbids PLAYER_NAME to leave any of their lovers, independent of lovership stage (leaving dating, engaged and married characters is forbidden). Doesn't prevent her lovers from breaking up with her.",
            keywords: ["prevent", "lovership", "dating", "leave", "leaving"],
            loggable: false,
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                for (const fun of [
                    "ManagementCanBreakDatingLoverOnline",
                    "ManagementCanBreakUpLoverOnline",
                ]) {
                    hookFunction(fun, 5, (args, next) => {
                        return !state.isEnforced && next(args);
                    }, ModuleCategory.Rules);
                }
            },
        });
        registerRule("rc_sub_new", {
            name: "Forbid taking new submissives",
            type: 3,
            shortDescription: "by offering them an ownership trial",
            longDescription: "This rule forbids PLAYER_NAME to start a trial with new submissive. Advancing ownership from trial to full ownership is unaffected.",
            keywords: ["prevent", "subbies", "collaring"],
            loggable: false,
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                hookFunction("ChatRoomOwnershipOptionIs", 5, (args, next) => {
                    const Option = args[0];
                    if (state.isEnforced && Option === "Propose")
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("rc_sub_leave", {
            name: "Forbid disowning submissives",
            type: 3,
            longDescription: "This rule forbids PLAYER_NAME to let go of any of their subs. (affects both trial and full ownerships). Doesn't prevent her submissives from breaking the bond.",
            keywords: ["prevent", "subbies", "collar", "freeing", "releasing", "release"],
            loggable: false,
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                hookFunction("ChatRoomIsOwnedByPlayer", 5, (args, next) => {
                    return !state.isEnforced && next(args);
                }, ModuleCategory.Rules);
            },
        });
    }

    function checkMessageForSounds(sounds, message, allowPartialMatch = true) {
        for (let sound of sounds) {
            sound = sound.toLocaleLowerCase();
            let ok = true;
            let i = 0;
            let fullMatch = allowPartialMatch;
            for (const c of message) {
                if (/\p{L}/igu.test(c)) {
                    const nx = sound[(i + 1) % sound.length];
                    if (c === nx) {
                        i = (i + 1) % sound.length;
                        if (i === sound.length - 1) {
                            fullMatch = true;
                        }
                    }
                    else if (c !== sound[i]) {
                        ok = false;
                        break;
                    }
                }
            }
            if (ok && fullMatch)
                return true;
        }
        return false;
    }
    function initRules_bc_speech_control() {
        registerRule("speech_specific_sound", {
            name: "Allow specific sounds only",
            type: 4,
            shortDescription: "such as an animal sound",
            longDescription: "This rule allows PLAYER_NAME to only communicate using a list of specific sound patterns in chat messages and whispers. These patterns cannot be mixed in the same message, though. Only one sound from the list per message is valid. That said, any variation of a sound in the list is allowed as long as the letters are in order. (Example: if the set sound is 'Meow', then this is a valid message: 'Me..ow? meeeow! mmeooowwwwwww?! meow. me.. oo..w ~')",
            keywords: ["filter", "speech", "talking", "letters"],
            triggerTexts: {
                infoBeep: "You are allowed to speak only using one of the defined sounds!",
                attempt_log: "PLAYER_NAME tried to break a rule to only speak using specific sound patterns",
                log: "PLAYER_NAME broke a rule to only speak using specific sound patterns",
            },
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                soundWhitelist: {
                    type: "stringList",
                    default: [],
                    description: "Set the allowed sounds:",
                    options: {
                        validate: /^\p{L}*$/iu,
                    },
                },
            },
            init(state) {
                const check = (msg) => {
                    var _a, _b;
                    const sounds = (_a = state.customData) === null || _a === void 0 ? void 0 : _a.soundWhitelist;
                    if (sounds && sounds.length > 0 && (msg.type === "Chat" || msg.type === "Whisper")) {
                        const message = ((_b = msg.noOOCMessage) !== null && _b !== void 0 ? _b : msg.originalMessage).toLocaleLowerCase();
                        return checkMessageForSounds(sounds, message);
                    }
                    return true;
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg)) {
                            state.triggerAttempt();
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg)) {
                            state.trigger();
                        }
                    },
                });
            },
        });
        registerRule("speech_garble_whispers", {
            name: "Garble whispers while gagged",
            type: 4,
            loggable: false,
            shortDescription: "same as normal messages",
            longDescription: "This rule alters PLAYER_NAME's outgoing whisper messages while gagged to be garbled the same way normal chat messages are. This means, that strength of the effect depends on the type of gag and (OOC text) is not affected. Note: While the rule is in effect, the BC immersion preference 'Prevent OOC & whispers while gagged' is altered, to allow gagged whispers, since those are now garbled by the rule. OOC prevention is not changed.",
            keywords: ["garbling", "whispering"],
            defaultLimit: ConditionsLimit.limited,
            init(state) {
                registerSpeechHook({
                    modify: (info, message) => state.isEnforced && info.type === "Whisper" ? callOriginal("SpeechGarble", [Player, message, true]) : message,
                });
            },
            load(state) {
                hookFunction("ChatRoomShouldBlockGaggedOOCMessage", 2, (args, next) => {
                    if (state.isEnforced && ChatRoomTargetMemberNumber !== null && !args[0].includes("("))
                        return false;
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("speech_block_gagged_ooc", {
            name: "Block OOC chat while gagged",
            type: 4,
            shortDescription: "no more misuse of OOC for normal chatting while gagged",
            longDescription: "This rule forbids PLAYER_NAME to use OOC (messages between round brackets) in chat or OOC whisper messages while she is gagged.",
            keywords: ["parentheses", "prevent", "forbid"],
            triggerTexts: {
                infoBeep: "You are not allowed to use OOC in messages while gagged.",
                attempt_log: "PLAYER_NAME tried to use OOC in a message while gagged",
                log: "PLAYER_NAME used OOC in a message while gagged",
            },
            defaultLimit: ConditionsLimit.blocked,
            init(state) {
                const check = (msg) => !msg.hasOOC || Player.CanTalk() || msg.type !== "Chat" && msg.type !== "Whisper";
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg)) {
                            state.triggerAttempt();
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg)) {
                            state.trigger();
                        }
                    },
                });
            },
        });
        registerRule("speech_block_ooc", {
            name: "Block OOC chat",
            type: 4,
            shortDescription: "blocks use of OOC in messages",
            longDescription: "This rule forbids PLAYER_NAME to use OOC (messages between round brackets) in chat or OOC whisper messages at any moment. This is a very extreme rule and should be used with great caution!",
            keywords: ["parentheses", "prevent", "forbid"],
            triggerTexts: {
                infoBeep: "You are not allowed to use OOC in messages!",
                attempt_log: "PLAYER_NAME tried to use OOC in a message",
                log: "PLAYER_NAME used OOC in a message",
            },
            defaultLimit: ConditionsLimit.blocked,
            init(state) {
                const check = (msg) => !msg.hasOOC || msg.type !== "Chat" && msg.type !== "Whisper";
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg)) {
                            state.triggerAttempt();
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg)) {
                            state.trigger();
                        }
                    },
                });
            },
        });
        registerRule("speech_doll_talk", {
            name: "Doll talk",
            type: 4,
            shortDescription: "allows only short sentences with simple words",
            longDescription: "This rule forbids PLAYER_NAME to use any words longer than set limit and limits number of words too. Both limits are configurable independently. Doesn't affect OOC text, but does affect whispers. Note: Setting '0' means this part is not limited (∞), as there is another rule to forbid open talking completely.",
            keywords: ["limit", "restrict", "length", "count"],
            triggerTexts: {
                infoBeep: "You broke the doll talk rule!",
                attempt_log: "PLAYER_NAME tried to break the doll talk rule",
                log: "PLAYER_NAME broke the doll talk rule",
            },
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                maxWordLength: {
                    type: "number",
                    default: 6,
                    description: "Max. character length of any word:",
                    Y: 420,
                },
                maxNumberOfWords: {
                    type: "number",
                    default: 5,
                    description: "Max. number of words per message:",
                    Y: 570,
                },
            },
            init(state) {
                const check = (msg) => {
                    var _a;
                    if ((msg.type !== "Chat" && msg.type !== "Whisper") || state.customData == null)
                        return true;
                    const words = Array.from(((_a = msg.noOOCMessage) !== null && _a !== void 0 ? _a : msg.originalMessage).matchAll(/[^\t\p{Z}\v.:!?~,;^]+/gmu)).map(i => i[0]);
                    if (state.customData.maxNumberOfWords && words.length > state.customData.maxNumberOfWords)
                        return false;
                    if (state.customData.maxWordLength && words.some(word => word.length > state.customData.maxWordLength))
                        return false;
                    return true;
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg)) {
                            state.triggerAttempt();
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg)) {
                            state.trigger();
                        }
                    },
                });
            },
        });
        registerRule("speech_ban_words", {
            name: "Forbid saying certain words in chat",
            type: 4,
            shortDescription: "based on a configurable blacklist",
            longDescription: "This rule forbids PLAYER_NAME to use certain words in the chat. The list of banned words can be configured. Checks are not case sensitive (forbidding 'no' also forbids 'NO' and 'No'). Doesn't affect emotes and OOC text, but does affect whispers.",
            keywords: ["limit", "restrict", "blacklist", "blocklist", "forbidden"],
            triggerTexts: {
                infoBeep: "You are not allowed to use the word 'USED_WORD'!",
                attempt_log: "PLAYER_NAME tried to use the banned word 'USED_WORD'",
                log: "PLAYER_NAME used the banned word 'USED_WORD'",
            },
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                bannedWords: {
                    type: "stringList",
                    default: [],
                    description: "All forbidden words:",
                    options: {
                        validate: /^[\p{L} ]*$/iu,
                    },
                },
            },
            init(state) {
                let transgression;
                const check = (msg) => {
                    var _a, _b;
                    if ((msg.type !== "Chat" && msg.type !== "Whisper") || !((_a = state.customData) === null || _a === void 0 ? void 0 : _a.bannedWords))
                        return true;
                    transgression = (_b = state.customData) === null || _b === void 0 ? void 0 : _b.bannedWords.find(i => {
                        var _a;
                        return ((_a = msg.noOOCMessage) !== null && _a !== void 0 ? _a : msg.originalMessage).toLocaleLowerCase().match(new RegExp(`([^\\p{L}]|^)${escapeRegExp$1(i.trim())}([^\\p{L}]|$)`, "iu"));
                    });
                    return transgression === undefined;
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg) && transgression !== undefined) {
                            state.triggerAttempt(null, { USED_WORD: transgression });
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg) && transgression !== undefined) {
                            state.trigger(null, { USED_WORD: transgression });
                        }
                    },
                });
            },
        });
        registerRule("speech_ban_words_in_emotes", {
            name: "Forbid saying certain words in emotes",
            type: 4,
            shortDescription: "based on a configurable blacklist",
            longDescription: "This rule forbids PLAYER_NAME to use certain words as part of any emote messages. The list of banned words can be configured. Checks are not case sensitive (forbidding 'no' also forbids 'NO' and 'No').",
            keywords: ["limit", "restrict", "blacklist", "blocklist", "forbidden"],
            triggerTexts: {
                infoBeep: "You are not allowed to use the word 'USED_WORD'!",
                attempt_log: "PLAYER_NAME tried to use the banned word 'USED_WORD'",
                log: "PLAYER_NAME used the banned word 'USED_WORD'",
            },
            defaultLimit: ConditionsLimit.limited,
            dataDefinition: {
                bannedWords: {
                    type: "stringList",
                    default: [],
                    description: "All forbidden words:",
                    options: {
                        validate: /^[\p{L} ]*$/iu,
                    },
                },
            },
            init(state) {
                let transgression;
                const check = (msg) => {
                    var _a, _b;
                    if (msg.type !== "Emote" || !((_a = state.customData) === null || _a === void 0 ? void 0 : _a.bannedWords))
                        return true;
                    transgression = (_b = state.customData) === null || _b === void 0 ? void 0 : _b.bannedWords.find(i => {
                        var _a;
                        return ((_a = msg.noOOCMessage) !== null && _a !== void 0 ? _a : msg.originalMessage).toLocaleLowerCase().match(new RegExp(`([^\\p{L}]|^)${escapeRegExp$1(i.trim())}([^\\p{L}]|$)`, "iu"));
                    });
                    return transgression === undefined;
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg) && transgression !== undefined) {
                            state.triggerAttempt(null, { USED_WORD: transgression });
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg) && transgression !== undefined) {
                            state.trigger(null, { USED_WORD: transgression });
                        }
                    },
                });
            },
        });
        registerRule("speech_forbid_open_talking", {
            name: "Forbid talking openly",
            type: 4,
            shortDescription: "in a chat room",
            longDescription: "This rule forbids PLAYER_NAME to send a message to all people inside a chat room. Does not affect whispers or emotes, but does affect OOC.",
            keywords: ["limit", "restrict", "loud", "saying", "speaking", "chatting"],
            triggerTexts: {
                infoBeep: "You are not allowed to talk openly in chatrooms!",
                attempt_log: "PLAYER_NAME tried to openly speak in a room",
                log: "PLAYER_NAME spoke openly in a room",
            },
            defaultLimit: ConditionsLimit.blocked,
            init(state) {
                const check = (msg) => msg.type !== "Chat";
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg)) {
                            state.triggerAttempt();
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg)) {
                            state.trigger();
                        }
                    },
                });
            },
        });
        registerRule("speech_limit_open_talking", {
            name: "Limit talking openly",
            type: 4,
            loggable: false,
            shortDescription: "only allow a set number of chat messages per minute",
            longDescription: "This rule limits PLAYER_NAME's ability to send a message to all people inside a chat room to only the set number per minute. Does not affect whispers or emotes, but does affect OOC. Note: Setting '0' will have no effect, as there is another rule to forbid open talking completely.",
            keywords: ["limit", "restrict", "loud", "saying", "speaking", "chatting", "slow", "fast"],
            triggerTexts: {
                infoBeep: "You exceeded the number of allowed chat messages per minute!",
            },
            dataDefinition: {
                maxNumberOfMsg: {
                    type: "number",
                    default: 42,
                    description: "Maximum allowed number of chat messages per minute (> 0):",
                    Y: 380,
                },
            },
            defaultLimit: ConditionsLimit.blocked,
            init(state) {
                let currentCount = 0;
                const check = (msg) => msg.type !== "Chat";
                registerSpeechHook({
                    allowSend: (msg) => {
                        var _a;
                        if (((_a = state.customData) === null || _a === void 0 ? void 0 : _a.maxNumberOfMsg) && state.customData.maxNumberOfMsg !== 0 && state.isEnforced && !check(msg)) {
                            if (currentCount >= state.customData.maxNumberOfMsg) {
                                state.triggerAttempt();
                                return 1;
                            }
                            BCX_setTimeout(() => {
                                if (currentCount > 0) {
                                    currentCount--;
                                }
                            }, 60000);
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        var _a;
                        if (((_a = state.customData) === null || _a === void 0 ? void 0 : _a.maxNumberOfMsg) && state.customData.maxNumberOfMsg !== 0 && state.isEnforced && !check(msg)) {
                            currentCount++;
                        }
                    },
                });
            },
        });
        registerRule("speech_forbid_emotes", {
            name: "Forbid using emotes",
            type: 4,
            shortDescription: "in a chat room",
            longDescription: "This rule forbids PLAYER_NAME to send an emote (with * or /me) to all people inside a chat room.",
            keywords: ["limit", "restrict", "emoting", "acting"],
            triggerTexts: {
                infoBeep: "You are not allowed to use emotes in chatrooms!",
                attempt_log: "PLAYER_NAME tried to use an emote in a room",
                log: "PLAYER_NAME used an emote in a room",
            },
            defaultLimit: ConditionsLimit.blocked,
            init(state) {
                const check = (msg) => msg.type !== "Emote";
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg)) {
                            state.triggerAttempt();
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg)) {
                            state.trigger();
                        }
                    },
                });
            },
        });
        registerRule("speech_limit_emotes", {
            name: "Limit using emotes",
            type: 4,
            loggable: false,
            shortDescription: "only allow a set number of emotes per minute",
            longDescription: "This rule forbids PLAYER_NAME to send an emote (with * or /me) to all people inside a chat room to only the set number per minute. Note: Setting '0' will have no effect, as there is another rule to forbid using emotes completely.",
            keywords: ["restrict", "emoting", "acting", "slow", "fast"],
            triggerTexts: {
                infoBeep: "You exceeded the number of allowed emotes per minute!",
            },
            dataDefinition: {
                maxNumberOfEmotes: {
                    type: "number",
                    default: 42,
                    description: "Maximum allowed number of emotes per minute (> 0):",
                    Y: 380,
                },
            },
            defaultLimit: ConditionsLimit.blocked,
            init(state) {
                let currentCount = 0;
                const check = (msg) => msg.type !== "Emote";
                registerSpeechHook({
                    allowSend: (msg) => {
                        var _a;
                        if (((_a = state.customData) === null || _a === void 0 ? void 0 : _a.maxNumberOfEmotes) && state.customData.maxNumberOfEmotes !== 0 && state.isEnforced && !check(msg)) {
                            if (currentCount >= state.customData.maxNumberOfEmotes) {
                                state.triggerAttempt();
                                return 1;
                            }
                            currentCount++;
                            BCX_setTimeout(() => {
                                if (currentCount > 0) {
                                    currentCount--;
                                }
                            }, 60000);
                        }
                        return 0;
                    },
                });
            },
        });
        registerRule("speech_restrict_whisper_send", {
            name: "Restrict sending whispers",
            type: 4,
            shortDescription: "except to defined roles",
            longDescription: "This rule forbids PLAYER_NAME to whisper anything to most people inside a chat room, except to the defined roles. Also affects whispered OOC messages.",
            keywords: ["limit", "forbid", "whispering", "allowlist", "block", "whitelist"],
            triggerTexts: {
                infoBeep: "You are not allowed to whisper to TARGET_PLAYER!",
                attempt_log: "PLAYER_NAME tried to whisper to TARGET_PLAYER",
                log: "PLAYER_NAME whispered to TARGET_PLAYER",
            },
            defaultLimit: ConditionsLimit.limited,
            dataDefinition: {
                minimumPermittedRole: {
                    type: "roleSelector",
                    default: AccessLevel.mistress,
                    description: "Minimum role whispering is still allowed to:",
                },
            },
            init(state) {
                const check = (msg) => {
                    var _a;
                    const target = msg.target != null && getChatroomCharacter(msg.target);
                    return msg.type !== "Whisper" || !target || !((_a = state.customData) === null || _a === void 0 ? void 0 : _a.minimumPermittedRole) || getCharacterAccessLevel(target) <= state.customData.minimumPermittedRole;
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg) && msg.target != null) {
                            state.triggerAttempt(msg.target);
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg) && msg.target != null) {
                            state.trigger(msg.target);
                        }
                    },
                });
            },
        });
        registerRule("speech_restrict_whisper_receive", {
            name: "Restrict receiving whispers",
            type: 4,
            loggable: false,
            shortDescription: "except from defined roles",
            longDescription: "This rule prevents PLAYER_NAME from receiving any whispers, except from the defined roles. If someone tries to send PLAYER_NAME a whisper message while this rule blocks them from doing so, they get an auto reply whisper, if the rule has an auto reply set (text field is not empty). PLAYER_NAME won't get any indication that she would have received a whisper unless the rule is not enforced, in which case she will see both the whisper and the auto reply. This rule can also be used (by dommes) to prevent getting unwanted whispers from strangers in public.",
            keywords: ["limit", "forbid", "prevent", "whispering", "hearing", "listening", "allowlist", "block", "whitelist"],
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                minimumPermittedRole: {
                    type: "roleSelector",
                    default: AccessLevel.whitelist,
                    description: "Minimum role still allowed to send whisper:",
                    Y: 480,
                },
                autoreplyText: {
                    type: "string",
                    default: "PLAYER_NAME is currently forbidden to receive whispers.",
                    description: "Auto replies blocked sender with this:",
                    Y: 320,
                    options: /^([^/.*].*)?$/,
                },
            },
            load(state) {
                hookFunction("ChatRoomMessage", 5, (args, next) => {
                    var _a;
                    const data = args[0];
                    if (isObject$1(data) &&
                        typeof data.Content === "string" &&
                        data.Content !== "" &&
                        data.Type === "Whisper" &&
                        typeof data.Sender === "number" &&
                        state.inEffect &&
                        state.customData) {
                        const character = getChatroomCharacter(data.Sender);
                        if (character && getCharacterAccessLevel(character) >= state.customData.minimumPermittedRole) {
                            if (state.customData.autoreplyText && !((_a = data.Content) === null || _a === void 0 ? void 0 : _a.startsWith("[Automatic reply by BCX]\n"))) {
                                const msg = `[Automatic reply by BCX]\n${dictionaryProcess(state.customData.autoreplyText, {})}`;
                                ServerSend("ChatRoomChat", {
                                    Content: msg,
                                    Type: "Whisper",
                                    Target: data.Sender,
                                });
                                if (!state.isEnforced) {
                                    ChatRoomSendLocal(msg);
                                }
                            }
                            if (state.isEnforced)
                                return;
                        }
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("speech_restrict_beep_send", {
            name: "Restrict sending beep messages",
            type: 4,
            shortDescription: "except to selected members",
            longDescription: "This rule forbids PLAYER_NAME to send any beeps with message, except to the defined list of member numbers. Sending beeps without a message is not affected. Optionally, it can be set that PLAYER_NAME is only forbidden to send beeps while she is unable to use her hands (e.g. fixed to a cross).",
            triggerTexts: {
                infoBeep: "You broke the rule that forbids sending a beep message to TARGET_PLAYER!",
                attempt_log: "PLAYER_NAME broke a rule by trying to send a beep message to TARGET_PLAYER",
                log: "PLAYER_NAME broke a rule by sending a beep message to TARGET_PLAYER",
            },
            keywords: ["limit", "forbid", "prevent", "whitelist", "allowlist"],
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                whitelistedMemberNumbers: {
                    type: "memberNumberList",
                    default: [],
                    description: "Member numbers still allowed to be beeped:",
                    options: {
                        pageSize: 2,
                    },
                },
                onlyWhenBound: {
                    type: "toggle",
                    default: false,
                    description: "Only in effect when unable to use hands",
                    Y: 700,
                },
            },
            load(state) {
                hookFunction("FriendListBeepMenuSend", 5, (args, next) => {
                    var _a;
                    if (state.inEffect &&
                        state.customData &&
                        ((_a = document.getElementById("FriendListBeepTextArea")) === null || _a === void 0 ? void 0 : _a.value) &&
                        FriendListBeepTarget != null &&
                        !state.customData.whitelistedMemberNumbers.includes(FriendListBeepTarget) &&
                        (!Player.CanInteract() || !state.customData.onlyWhenBound)) {
                        if (state.isEnforced) {
                            state.triggerAttempt(FriendListBeepTarget);
                            return;
                        }
                        state.trigger(FriendListBeepTarget);
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("speech_restrict_beep_receive", {
            name: "Restrict receiving beeps",
            type: 4,
            loggable: false,
            shortDescription: "and beep messages, except from selected members",
            longDescription: "This rule prevents PLAYER_NAME from receiving any beep (regardless if the beep carries a message or not), except for beeps from the defined list of member numbers. If someone tries to send PLAYER_NAME a beep message while this rule blocks them from doing so, they get an auto reply beep, if the rule has an auto reply set. PLAYER_NAME won't get any indication that she would have received a beep unless the rule is not enforced, in which case she will see both the beep and the auto reply. Optionally, the rule can be set to only activate while PLAYER_NAME is unable to use her hands (e.g. fixed to a cross).",
            keywords: ["limit", "forbid", "prevent", "reading", "whitelist", "allowlist"],
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                whitelistedMemberNumbers: {
                    type: "memberNumberList",
                    default: [],
                    description: "Member numbers still allowed to send beeps:",
                    Y: 470,
                    options: {
                        pageSize: 2,
                    },
                },
                autoreplyText: {
                    type: "string",
                    default: "PLAYER_NAME is currently forbidden to receive beeps.",
                    description: "Auto replies blocked sender with this:",
                    Y: 300,
                },
                onlyWhenBound: {
                    type: "toggle",
                    default: false,
                    description: "Only in effect when unable to use hands",
                    Y: 740,
                },
            },
            load(state) {
                hookFunction("ServerAccountBeep", 5, (args, next) => {
                    var _a;
                    const data = args[0];
                    if (isObject$1(data) &&
                        !data.BeepType &&
                        typeof data.MemberNumber === "number" &&
                        state.inEffect &&
                        state.customData &&
                        !state.customData.whitelistedMemberNumbers.includes(data.MemberNumber) &&
                        (!Player.CanInteract() || !state.customData.onlyWhenBound)) {
                        if (state.customData.autoreplyText && (data.Message == null || (typeof data.Message === "string" && !data.Message.startsWith("[Automatic reply by BCX]\n")))) {
                            const msg = `[Automatic reply by BCX]\n${dictionaryProcess(state.customData.autoreplyText, {})}`;
                            ServerSend("AccountBeep", {
                                MemberNumber: data.MemberNumber,
                                BeepType: "",
                                Message: msg,
                                IsSecret: true,
                            });
                            if (!state.isEnforced) {
                                ChatRoomSendLocal(msg);
                                FriendListBeepLog.push({
                                    MemberNumber: data.MemberNumber,
                                    MemberName: ((_a = Player.FriendNames) === null || _a === void 0 ? void 0 : _a.get(data.MemberNumber)) || "Unknown",
                                    ChatRoomName: undefined,
                                    Sent: true,
                                    Private: false,
                                    Time: new Date(),
                                    Message: msg,
                                });
                            }
                        }
                        if (state.isEnforced)
                            return;
                    }
                    return next(args);
                }, ModuleCategory.Rules);
            },
        });
        registerRule("speech_greet_order", {
            name: "Order to greet club",
            type: 4,
            loggable: false,
            shortDescription: "when entering it through the login portal",
            longDescription: "PLAYER_NAME will automatically send all defined member numbers (if they are currently online and friends with PLAYER_NAME) a beep the moment PLAYER_NAME joins the club or the moment she start BCX to make her presence known. Disconnects don't count as coming into the club again, as far as detectable. NOTE: Trigger conditions should not be selected when using this rule, as if you for instance select 'when in public room' the rule will only greet when you load BCX in a public room.",
            keywords: ["beep", "loging", "in", "online"],
            triggerTexts: {
                infoBeep: "A BCX rule made you greet one or more people (if currently online) with a beep.",
                attempt_log: "",
                log: "",
            },
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                toGreetMemberNumbers: {
                    type: "memberNumberList",
                    default: [],
                    description: "Member numbers that will be greeted:",
                },
            },
            load(state) {
                if (state.isEnforced && state.customData) {
                    for (const number of state.customData.toGreetMemberNumbers) {
                        ServerSend("AccountBeep", {
                            MemberNumber: number,
                            BeepType: "",
                            IsSecret: true,
                        });
                    }
                    if (state.customData.toGreetMemberNumbers.length > 0) {
                        BCX_setTimeout(() => {
                            state.trigger();
                        }, 5000);
                    }
                }
            },
        });
        registerRule("speech_block_antigarble", {
            name: "Forbid the antigarble option",
            type: 4,
            shortDescription: "BCX's .antigarble command",
            longDescription: "This rule forbids PLAYER_NAME to use the antigarble command. Antigarble is a BCX feature that enables a BCX user to understand muffled voices from other gagged characters or when wearing a deafening item. If PLAYER_NAME should be forbidden to use the command, this rule should be used.",
            keywords: ["limit", "forbid", "prevent", "garbling", "deafness", "gagged", "gagtalk"],
            triggerTexts: {
                infoBeep: "You are not allowed to use the antigarble command!",
                attempt_log: "PLAYER_NAME tried to use the antigarble command",
                log: "PLAYER_NAME used the antigarble command",
            },
            defaultLimit: ConditionsLimit.normal,
        });
        registerRule("speech_force_retype", {
            name: "Force to retype",
            type: 4,
            loggable: false,
            shortDescription: "if sending a message in chat is rejected by BCX due to a rule violation",
            longDescription: "This rule forces PLAYER_NAME to retype any chat/whisper/emote/OOC message as a punishment when they try to send it and another enforced BCX speech rule determines that there is any rule violation in that message.",
            keywords: ["punish", "retry", "clear", "input", "blocked", "forbidden"],
            defaultLimit: ConditionsLimit.limited,
        });
        let alreadyGreeted = false;
        let lastRoomName = "";
        registerRule("greet_room_order", {
            name: "Order to greet room",
            type: 4,
            shortDescription: "with a settable sentence when entering it newly",
            longDescription: "Sets a specific sentence that PLAYER_NAME must say loud after entering a room that is not empty. The sentence is autopopulating the chat window text input. When to say it is left to PLAYER_NAME, but when the rule is enforced, it is the only thing that can be said in this room after joining it. Emotes can still be used, though, unless toggled to be forbidden. Disconnects don't count as coming into a new room again, as far as detectable.",
            keywords: ["say", "present", "introduce"],
            triggerTexts: {
                infoBeep: "You broke the rule to greet this room like taught!",
                attempt_infoBeep: "You need to greet this room like taught!",
                attempt_log: "PLAYER_NAME almost broke a rule by not greeting the room like taught",
                log: "PLAYER_NAME broke a rule by not greeting the room like taught",
            },
            defaultLimit: ConditionsLimit.limited,
            dataDefinition: {
                greetingSentence: {
                    type: "string",
                    default: "",
                    description: "The sentence that has to be used to greet any joined room:",
                    options: /^([^/.*()\s][^()]*)?$/,
                },
                affectEmotes: {
                    type: "toggle",
                    default: false,
                    description: "Also forbid emote messages before greeting",
                    Y: 560,
                },
            },
            load(state) {
                hookFunction("ChatRoomSync", 0, (args, next) => {
                    const data = args[0];
                    if (data.Name !== lastRoomName)
                        alreadyGreeted = false;
                    next(args);
                    const chat = document.getElementById("InputChat");
                    if (chat && state.customData && state.inEffect && !alreadyGreeted && data.Name !== lastRoomName) {
                        chat.value = state.customData.greetingSentence;
                    }
                    else {
                        alreadyGreeted = true;
                    }
                }, ModuleCategory.Rules);
            },
            init(state) {
                const check = (msg) => {
                    var _a, _b;
                    return (((_a = msg.noOOCMessage) !== null && _a !== void 0 ? _a : msg.originalMessage).toLocaleLowerCase() === ((_b = state.customData) === null || _b === void 0 ? void 0 : _b.greetingSentence.trim().toLocaleLowerCase()) &&
                        msg.type === "Chat");
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        var _a, _b;
                        if (state.isEnforced &&
                            ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.greetingSentence.trim()) &&
                            !alreadyGreeted &&
                            (msg.type !== "Emote" || (msg.type === "Emote" && state.customData.affectEmotes))) {
                            if (ChatRoomData === null || ChatRoomData === void 0 ? void 0 : ChatRoomData.Name) {
                                lastRoomName = ChatRoomData.Name;
                            }
                            if (check(msg)) {
                                alreadyGreeted = true;
                                return 2;
                            }
                            else {
                                state.triggerAttempt();
                                ChatRoomSendLocal(`You are expected to greet the room with "${(_b = state.customData) === null || _b === void 0 ? void 0 : _b.greetingSentence}".`);
                                return 1;
                            }
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        var _a;
                        if (msg.type === "Emote") {
                            return;
                        }
                        if (state.inEffect &&
                            ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.greetingSentence.trim()) &&
                            !alreadyGreeted) {
                            if (!check(msg)) {
                                state.trigger();
                            }
                            alreadyGreeted = true;
                        }
                    },
                });
            },
        });
        registerRule("greet_new_guests", {
            name: "Greet new guests",
            type: 4,
            loggable: false,
            shortDescription: "when they join the current room",
            longDescription: "Forces PLAYER_NAME to greet people newly entering the current chat room with the set sentence. NOTE: Only PLAYER_NAME and the new guest can see the message not to make it spammy. After a new person has been greeted, she will not be greeted for 10 minutes after she left (including disconnect) the room PLAYER_NAME is in. Setting an emote as a greeting is also supported by starting the set message with one or two '*' characters.",
            keywords: ["say", "present", "introduce"],
            defaultLimit: ConditionsLimit.limited,
            dataDefinition: {
                greetingSentence: {
                    type: "string",
                    default: "",
                    description: "The sentence that will be used to greet new guests:",
                    options: /^([^/.].*)?$/,
                },
            },
            load(state) {
                const GREET_DELAY = 600000;
                const nextGreet = new Map();
                hookFunction("ChatRoomSyncMemberLeave", 2, (args, next) => {
                    next(args);
                    const R = args[0];
                    if (nextGreet.has(R.SourceMemberNumber)) {
                        nextGreet.set(R.SourceMemberNumber, Date.now() + GREET_DELAY);
                    }
                }, ModuleCategory.Rules);
                hookFunction("ChatRoomAddCharacterToChatRoom", 3, (args, next) => {
                    const size = ChatRoomCharacter.length;
                    next(args);
                    if (state.customData && state.isEnforced && size < ChatRoomCharacter.length) {
                        const C = args[0];
                        if (C.MemberNumber !== undefined &&
                            nextGreet.has(C.MemberNumber) &&
                            nextGreet.get(C.MemberNumber) < Date.now()) {
                            nextGreet.delete(C.MemberNumber);
                        }
                        BCX_setTimeout(() => {
                            if (!state.customData ||
                                !state.isEnforced ||
                                !ChatRoomCharacter.includes(C) ||
                                C.MemberNumber === undefined ||
                                (nextGreet.has(C.MemberNumber) &&
                                    nextGreet.get(C.MemberNumber) >= Date.now()))
                                return;
                            nextGreet.set(C.MemberNumber, 0);
                            if (state.customData.greetingSentence.startsWith("*")) {
                                const message = state.customData.greetingSentence.slice(1);
                                ServerSend("ChatRoomChat", { Content: message, Type: "Emote", Target: C.MemberNumber });
                                ServerSend("ChatRoomChat", { Content: message, Type: "Emote", Target: Player.MemberNumber });
                            }
                            else {
                                ServerSend("ChatRoomChat", { Content: state.customData.greetingSentence, Type: "Chat", Target: C.MemberNumber });
                                ServerSend("ChatRoomChat", { Content: state.customData.greetingSentence, Type: "Chat", Target: Player.MemberNumber });
                            }
                        }, 5000);
                    }
                }, ModuleCategory.Rules);
            },
        });
        registerRule("speech_alter_faltering", {
            name: "Enforce faltering speech",
            type: 4,
            loggable: false,
            shortDescription: "an enhanced studder effect is added to PLAYER_NAME's chat texts",
            longDescription: "Thus rule converts PLAYER_NAME's messages, so she is only able to speak studdering and with random filler sounds, for some [RP] reason (anxiousness, arousal, fear, etc.). Converts the typed chat text automatically. Affects chat messages and whispers, but not OOC.",
            keywords: ["garble", "saying", "talking"],
            defaultLimit: ConditionsLimit.limited,
            init(state) {
                registerSpeechHook({
                    modify: (msg, text) => {
                        if (state.inEffect && (msg.type === "Chat" || msg.type === "Whisper")) {
                            return falteringSpeech(text);
                        }
                        else {
                            return text;
                        }
                    },
                });
            },
        });
        registerRule("speech_mandatory_words", {
            name: "Establish mandatory words",
            type: 4,
            shortDescription: "of which at least one needs to always be included when speaking",
            longDescription: "This rule gives PLAYER_NAME a list of words from which at least one has to always be used in any chat message. The list of mandatory words can be configured. Checks are not case sensitive (adding 'miss' also works for 'MISS' and 'Miss' - Note: 'Miiiiissss' would also match). Doesn't affect whispers, emotes and OOC text. There is a toggle for affecting whispers, too.",
            keywords: ["force", "require", "talking", "saying", "certain", "specific"],
            triggerTexts: {
                infoBeep: "You forgot to include one of the mandatory words!",
                attempt_log: "PLAYER_NAME almost forgot to use a mandatory word while talking",
                log: "PLAYER_NAME did not use a mandatory word while talking",
            },
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                mandatoryWords: {
                    type: "stringList",
                    default: [],
                    description: "At least one of these words always needs to be used:",
                    options: {
                        validate: /^[\p{L} ]*$/iu,
                        pageSize: 3,
                    },
                },
                affectWhispers: {
                    type: "toggle",
                    default: false,
                    description: "Also affect whispered messages",
                    Y: 740,
                },
            },
            init(state) {
                const check = (msg) => {
                    var _a, _b, _c, _d, _e, _f;
                    if ((msg.type !== "Chat" &&
                        !((msg.type === "Whisper" && !(msg.originalMessage.startsWith("!") && !msg.originalMessage.startsWith("!!"))) && ((_a = state.customData) === null || _a === void 0 ? void 0 : _a.affectWhispers))) || !((_c = (_b = state.customData) === null || _b === void 0 ? void 0 : _b.mandatoryWords) === null || _c === void 0 ? void 0 : _c.length))
                        return true;
                    const checkMsg = ((_d = msg.noOOCMessage) !== null && _d !== void 0 ? _d : msg.originalMessage).toLocaleLowerCase();
                    const sounds = (_e = state.customData) === null || _e === void 0 ? void 0 : _e.mandatoryWords.filter(e => /^[\p{L}]*$/iu.test(e));
                    if (checkMsg.trim() === "") {
                        return true;
                    }
                    return ((_f = state.customData) === null || _f === void 0 ? void 0 : _f.mandatoryWords.some(i => checkMsg.match(new RegExp(`([^\\p{L}]|^)${escapeRegExp$1(i.trim())}([^\\p{L}]|$)`, "iu")))) || checkMsg.split(/[^\p{L}]+/u).some(i => checkMessageForSounds(sounds, i, false));
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg)) {
                            state.triggerAttempt();
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg)) {
                            state.trigger();
                        }
                    },
                });
            },
        });
        registerRule("speech_mandatory_words_in_emotes", {
            name: "Establish mandatory words in emotes",
            type: 4,
            shortDescription: "of which at least one needs to always be included",
            longDescription: "This rule gives PLAYER_NAME a list of words from which at least one has to always be used in any emote message. The list of mandatory words can be configured. Checks are not case sensitive (adding 'miss' also works for 'MISS' and 'Miss' - Note: 'Miiiiissss' would also match).",
            keywords: ["force", "require", "talking", "saying", "certain", "specific"],
            triggerTexts: {
                infoBeep: "You forgot to include one of the mandatory words!",
                attempt_log: "PLAYER_NAME almost forgot to use a mandatory word while talking",
                log: "PLAYER_NAME did not use a mandatory word while talking",
            },
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                mandatoryWords: {
                    type: "stringList",
                    default: [],
                    description: "At least one of these words always needs to be used:",
                    options: {
                        validate: /^[\p{L} ]*$/iu,
                    },
                },
            },
            init(state) {
                const check = (msg) => {
                    var _a, _b, _c, _d, _e;
                    if (msg.type !== "Emote" || !((_b = (_a = state.customData) === null || _a === void 0 ? void 0 : _a.mandatoryWords) === null || _b === void 0 ? void 0 : _b.length))
                        return true;
                    const checkMsg = ((_c = msg.noOOCMessage) !== null && _c !== void 0 ? _c : msg.originalMessage).toLocaleLowerCase();
                    const sounds = (_d = state.customData) === null || _d === void 0 ? void 0 : _d.mandatoryWords.filter(e => /^[\p{L}]*$/iu.test(e));
                    if (checkMsg.trim() === "") {
                        return true;
                    }
                    return ((_e = state.customData) === null || _e === void 0 ? void 0 : _e.mandatoryWords.some(i => checkMsg.match(new RegExp(`([^\\p{L}]|^)${escapeRegExp$1(i.trim())}([^\\p{L}]|$)`, "iu")))) || checkMsg.split(/[^\p{L}]+/u).some(i => checkMessageForSounds(sounds, i, false));
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (state.isEnforced && !check(msg)) {
                            state.triggerAttempt();
                            return 1;
                        }
                        return 0;
                    },
                    onSend: (msg) => {
                        if (state.inEffect && !check(msg)) {
                            state.trigger();
                        }
                    },
                });
            },
        });
        registerRule("speech_partial_hearing", {
            name: "Partial hearing",
            type: 4,
            shortDescription: "of muffled speech - random & word list based",
            longDescription: "This rule gives PLAYER_NAME ability to understand parts of a muffled sentence ungarbled, based on a white list of words and/or randomly. On default, applies only to muffled hearing from deafening effects on PLAYER_NAME, but optionally can be enhanced to allow also partially understanding the muffled speech of other persons who are speech impaired. Doesn't affect emotes and OOC text.",
            keywords: ["deafness", "garbling", "antigarble", "understanding", "ungarble", "specific", "words", "whitelist", "allowlist"],
            loggable: false,
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                alwaysUnderstandableWords: {
                    type: "stringList",
                    default: [],
                    description: "Words that can always be understood:",
                    options: {
                        validate: /^[\p{L}]*$/iu,
                        pageSize: 3,
                    },
                },
                randomUnderstanding: {
                    type: "toggle",
                    default: true,
                    description: "Some words are randomly understood",
                    Y: 650,
                },
                affectGaggedMembersToggle: {
                    type: "toggle",
                    default: false,
                    description: "Can also understand gagged persons",
                    Y: 740,
                },
            },
            load(state) {
                hookFunction("SpeechGarble", 2, (args, next) => {
                    const C = args[0];
                    if (!state.isEnforced ||
                        (!C.CanTalk() &&
                            state.customData &&
                            !state.customData.affectGaggedMembersToggle))
                        return next(args);
                    return args[1].replace(/\([^)]+\)?|\p{L}+/gmui, (word) => {
                        var _a, _b;
                        if (word.startsWith("(")) {
                            return word;
                        }
                        if (((_a = state.customData) === null || _a === void 0 ? void 0 : _a.randomUnderstanding) && Math.random() < 0.25) {
                            return word;
                        }
                        else if ((_b = state.customData) === null || _b === void 0 ? void 0 : _b.alwaysUnderstandableWords.some((str) => word.toLocaleLowerCase() === str.toLocaleLowerCase())) {
                            return word;
                        }
                        else {
                            return callOriginal("SpeechGarble", [args[0], word, args[2]]);
                        }
                    });
                }, ModuleCategory.Rules);
            },
        });
        registerRule("speech_garble_while_talking", {
            name: "Force garbled speech",
            type: 4,
            loggable: false,
            shortDescription: "force PLAYER_NAME to talk as if they were gagged",
            longDescription: `This rule forces PLAYER_NAME to talk as if they were gagged, automatically garbling all of their speech. This rule does not affect OOC. This rule only affects whispers if the rule "Garble whispers while gagged" is also in effect.`,
            keywords: ["saying", "talking", "gagtalk", "garbling", "forced"],
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                gagLevel: {
                    type: "number",
                    default: 5,
                    options: {
                        min: 1,
                        max: 25,
                    },
                    description: "The level of forced garbling",
                },
            },
            init(state) {
                registerSpeechHook({
                    modify: (info, message) => state.isEnforced && info.type === "Chat" ? callOriginal("SpeechGarble", [Player, message, true]) : message,
                });
            },
            load(state) {
                hookFunction("SpeechGetTotalGagLevel", 0, (args, next) => {
                    var _a;
                    const gagLevel = next(args);
                    if (!state.isEnforced || !((_a = state.customData) === null || _a === void 0 ? void 0 : _a.gagLevel) || !args[0].IsPlayer()) {
                        return gagLevel;
                    }
                    else {
                        return Math.max(gagLevel, state.customData.gagLevel);
                    }
                }, ModuleCategory.Rules);
            },
        });
    }

    function initRules_other() {
        let lastAction = Date.now();
        let afkDidTrigger = false;
        function afk_reset() {
            lastAction = Date.now();
            afkDidTrigger = false;
        }
        registerRule("other_forbid_afk", {
            name: "Forbid going afk",
            type: 99,
            enforceable: false,
            shortDescription: "logs whenever PLAYER_NAME is inactive",
            longDescription: "This rule forbids PLAYER_NAME to go afk and logs when the allowed inactivity threshold is overstepped.",
            keywords: ["inactivity", "detect", "record"],
            triggerTexts: {
                log: "PLAYER_NAME became inactive, which was forbidden",
                announce: "",
            },
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                minutesBeforeAfk: {
                    type: "number",
                    default: 10,
                    description: "Amount of minutes, before being considered inactive:",
                },
            },
            load() {
                AfkTimerEventsList.forEach(e => document.addEventListener(e, afk_reset, true));
            },
            tick(state) {
                if (!afkDidTrigger && state.inEffect && state.customData &&
                    Date.now() > lastAction + state.customData.minutesBeforeAfk * 60 * 1000) {
                    afkDidTrigger = true;
                    state.trigger();
                    ChatRoomSendLocal("You broke a BCX rule by being inactive for too long. The transgression was logged.");
                    return true;
                }
                return false;
            },
            unload() {
                AfkTimerEventsList.forEach(e => document.removeEventListener(e, afk_reset, true));
            },
        });
        let lastUpdate = 0;
        registerRule("other_track_time", {
            name: "Track rule effect time",
            type: 99,
            enforceable: false,
            loggable: false,
            shortDescription: "counts the time this rule's trigger conditions were fulfilled",
            longDescription: "This rule shows the amount of time that PLAYER_NAME spent (online) in the club, since the rule was added, while all of the rule's trigger conditions were fulfilled. So it can for instance log the time spent in public rooms / in the club in general, or in a specific room or with some person as part of a roleplayed task or order. The currently tracked time can be inquired by whispering '!ruletime' to PLAYER_NAME. To reset the counter, remove and add the rule again.",
            keywords: ["record", "stopwatch", "timer", "online"],
            internalDataValidate: (v) => typeof v === "number",
            internalDataDefault: () => 0,
            defaultLimit: ConditionsLimit.blocked,
            dataDefinition: {
                minimumPermittedRole: {
                    type: "roleSelector",
                    default: AccessLevel.lover,
                    description: "Minimum role able to request counted time:",
                },
            },
            init(state) {
                registerWhisperCommand("hidden", "ruletime", null, (argv, sender, respond) => {
                    if (state.condition && state.customData && state.internalData !== undefined && getCharacterAccessLevel(sender) <= state.customData.minimumPermittedRole) {
                        const fixup = state.inEffect ? (Date.now() - lastUpdate) : 0;
                        const msg = `Since the time tracking rule was added, ${formatTimeInterval(state.internalData + fixup)} were counted, where all trigger conditions were true.`;
                        respond(msg);
                        return true;
                    }
                    return false;
                }, null, false);
            },
            load() {
                lastUpdate = Date.now();
            },
            tick(state) {
                if (state.inEffect && state.internalData !== undefined) {
                    const change = Math.floor(Date.now() - lastUpdate);
                    if (change >= 60000) {
                        state.internalData += change;
                        lastUpdate = Date.now();
                    }
                }
                return false;
            },
            stateChange(state, newState) {
                if (newState) {
                    lastUpdate = Date.now();
                }
                else if (state.internalData !== undefined) {
                    const change = Math.floor(Date.now() - lastUpdate);
                    state.internalData += change;
                    lastUpdate = Date.now();
                }
            },
        });
        let lastReminder = 0;
        registerRule("other_constant_reminder", {
            name: "Listen to my voice",
            type: 99,
            loggable: false,
            enforceable: false,
            shortDescription: "regularly show configurable sentences to PLAYER_NAME",
            longDescription: "This rule reminds or tells PLAYER_NAME one of the recorded sentences at random in a settable interval. Only PLAYER_NAME can see the set message and it is only shown if in a chat room.",
            keywords: ["hear", "voices", "in", "head", "messages", "periodic"],
            defaultLimit: ConditionsLimit.limited,
            dataDefinition: {
                reminderText: {
                    type: "stringList",
                    default: [],
                    description: "The sentences that will be shown at random:",
                    Y: 296,
                },
                reminderFrequency: {
                    type: "number",
                    default: 15,
                    description: "Frequency of a sentence being shown (in minutes):",
                    Y: 715,
                },
            },
            tick(state) {
                if (state.inEffect && state.customData && state.customData.reminderText.length > 0 &&
                    ServerPlayerIsInChatRoom() &&
                    Date.now() > lastReminder + state.customData.reminderFrequency * 60 * 1000) {
                    lastReminder = Date.now();
                    ChatRoomSendLocal("[Voice] " + state.customData.reminderText[Math.floor(Math.random() * state.customData.reminderText.length)]);
                    return true;
                }
                return false;
            },
        });
        registerRule("other_log_money", {
            name: "Log money changes",
            type: 99,
            enforceable: false,
            shortDescription: "spending and/or getting money",
            longDescription: "This rule logs whenever money is used to buy something. It also shows how much money PLAYER_NAME currently has in the log entry. Optionally, earning money can also be logged. Note: Please be aware that this last option can potentially fill the whole behaviour log rapidly.",
            keywords: ["record", "balance", "earnings", "using", "tracking", "logging", "entry", "financial", "findom"],
            triggerTexts: {
                infoBeep: "A BCX rule has logged this financial transaction!",
                log: "PLAYER_NAME TYPE money: AMOUNT $ | new balance: BALANCE $",
                announce: "",
            },
            defaultLimit: ConditionsLimit.normal,
            dataDefinition: {
                logEarnings: {
                    type: "toggle",
                    default: false,
                    description: "Also log getting money",
                },
            },
            internalDataValidate: (data) => typeof data === "number",
            internalDataDefault: () => -1,
            stateChange(state, newState) {
                if (!newState) {
                    state.internalData = -1;
                }
            },
            tick(state) {
                if (!state.internalData || !Number.isFinite(Player.Money))
                    return false;
                let returnValue = false;
                if (state.inEffect) {
                    if (state.internalData < 0) {
                        state.internalData = Player.Money;
                    }
                    if (state.internalData > Player.Money) {
                        state.trigger(null, { TYPE: "spent", AMOUNT: `${state.internalData - Player.Money}`, BALANCE: `${Player.Money}` });
                        returnValue = true;
                    }
                    else if (state.internalData < Player.Money && state.customData && state.customData.logEarnings) {
                        state.trigger(null, { TYPE: "earned", AMOUNT: `${Player.Money - state.internalData}`, BALANCE: `${Player.Money}` });
                        returnValue = true;
                    }
                    if (state.internalData !== Player.Money) {
                        state.internalData = Player.Money;
                    }
                }
                return returnValue;
            },
        });
        const removeTrackingEntry = (hiddenItems) => {
            for (;;) {
                const index = hiddenItems.findIndex(a => isObject$1(a) && typeof a.Name === "string" && a.Name.startsWith("GoodGirl") && a.Group === "BCX");
                if (index < 0)
                    break;
                hiddenItems.splice(index, 1);
            }
        };
        const hasTrackingEntry = (hiddenItems, token) => {
            return hiddenItems.some(a => isObject$1(a) && a.Name === `GoodGirl${token}` && a.Group === "BCX");
        };
        const addTrackingEntry = (hiddenItems, token) => {
            removeTrackingEntry(hiddenItems);
            hiddenItems.push({ Name: `GoodGirl${token}`, Group: "BCX" });
        };
        registerRule("other_track_BCX_activation", {
            name: "Track BCX activation",
            type: 99,
            enforceable: false,
            shortDescription: "logs if PLAYER_NAME enters the club without BCX",
            longDescription: "This rule observes PLAYER_NAME, logging it as a rule violation if the club was previously entered at least once without BCX active.",
            keywords: ["record", "online", "force", "useage", "using", "login"],
            triggerTexts: {
                infoBeep: "You logged in without starting BCX beforehand!",
                log: "PLAYER_NAME logged in without starting BCX beforehand at least once",
                announce: "",
            },
            internalDataValidate: (v) => typeof v === "number",
            internalDataDefault: () => Math.floor(Math.random() * 1000000),
            defaultLimit: ConditionsLimit.blocked,
            load(state) {
                if (state.inEffect && state.internalData !== undefined) {
                    if (!BCXLoadedBeforeLogin ||
                        !Array.isArray(BCXLoginTimedata.HiddenItems) ||
                        !hasTrackingEntry(BCXLoginTimedata.HiddenItems, state.internalData)) {
                        BCX_setTimeout(() => {
                            state.trigger();
                            state.internalData = Math.floor(Math.random() * 1000000);
                            addTrackingEntry(Player.HiddenItems, state.internalData);
                            ServerPlayerBlockItemsSync();
                        }, 3500);
                    }
                    else {
                        state.internalData = Math.floor(Math.random() * 1000000);
                        addTrackingEntry(Player.HiddenItems, state.internalData);
                        ServerPlayerBlockItemsSync();
                    }
                }
            },
            stateChange(state, newState) {
                if (newState) {
                    state.internalData = Math.floor(Math.random() * 1000000);
                    addTrackingEntry(Player.HiddenItems, state.internalData);
                    ServerPlayerBlockItemsSync();
                }
                else {
                    removeTrackingEntry(Player.HiddenItems);
                    ServerPlayerBlockItemsSync();
                }
            },
            tick(state) {
                if (state.inEffect && state.internalData !== undefined) {
                    if (!hasTrackingEntry(Player.HiddenItems, state.internalData) || Math.random() < 0.01) {
                        state.internalData = Math.floor(Math.random() * 1000000);
                        addTrackingEntry(Player.HiddenItems, state.internalData);
                        ServerPlayerBlockItemsSync();
                    }
                }
                return false;
            },
        });
    }

    const RULES_ANTILOOP_RESET_INTERVAL = 60000;
    const RULES_ANTILOOP_THRESHOLD = 10;
    const RULES_ANTILOOP_SUSPEND_TIME = 600000;
    const STRING_LIST_MAX_LENGTH = 128;
    const RULE_ICONS = {
        [0]: icon_restrictions,
        [1]: "Icons/Swap.png",
        [2]: "Icons/Preference.png",
        [3]: icon_OwnerList,
        [4]: "Icons/Chat.png",
        [99]: "Icons/Chest.png",
    };
    function guard_BCX_Rule(name) {
        return typeof name === "string" && rules.has(name);
    }
    function guard_RuleCustomData(rule, data) {
        const descriptor = rules.get(rule);
        if (!descriptor)
            return false;
        if (descriptor.dataDefinition) {
            if (!isObject$1(data))
                return false;
            for (const k of Object.keys(data)) {
                if (!descriptor.dataDefinition[k])
                    return false;
            }
            for (const [k, def] of Object.entries(descriptor.dataDefinition)) {
                const handler = ruleCustomDataHandlers[def.type];
                if (!handler || !handler.validate(data[k], def))
                    return false;
            }
        }
        else if (data !== undefined) {
            return false;
        }
        return true;
    }
    const rules = new Map();
    const rulesList = [];
    function registerRule(name, data) {
        var _a;
        if (moduleInitPhase !== ModuleInitPhase.init) {
            throw new Error("Rules can be registered only during init");
        }
        if (rules.has(name)) {
            throw new Error(`Rule "${name}" already defined!`);
        }
        if (data.dataDefinition) {
            for (const [k, v] of Object.entries(data.dataDefinition)) {
                const handler = ruleCustomDataHandlers[v.type];
                if (!handler) {
                    throw new Error(`Unknown handler for ${name}:${k} (${v.type})`);
                }
                if (handler.validateOptions && !handler.validateOptions(v.options)) {
                    throw new Error(`Bad options for ${name}:${k} (${v.type})`);
                }
                const defaultValue = typeof v.default === "function" ? v.default() : v.default;
                if (!handler.validate(defaultValue, v)) {
                    throw new Error(`Default doesn't validate for ${name}:${k} (${v.type})`);
                }
            }
        }
        if (data.internalDataValidate) {
            if (!data.internalDataValidate((_a = data.internalDataDefault) === null || _a === void 0 ? void 0 : _a.call(data))) {
                throw new Error(`Default internal data doesn't validate for rule ${name}`);
            }
        }
        else if (data.internalDataDefault !== undefined) {
            throw new Error(`Default internal data for rule ${name} without internal data validation`);
        }
        rules.set(name, {
            ...data,
            state: new RuleState(name, data),
        });
        rulesList.push(name);
    }
    function RulesGetDisplayDefinition(rule) {
        const data = rules.get(rule);
        if (!data) {
            throw new Error(`Attempt to get display definition for unknown rule '${rule}'`);
        }
        return {
            name: data.name,
            type: data.type,
            shortDescription: data.shortDescription,
            keywords: data.keywords,
            longDescription: data.longDescription,
            triggerTexts: data.triggerTexts,
            defaultLimit: data.defaultLimit,
            enforceable: data.enforceable,
            loggable: data.loggable,
            dataDefinition: data.dataDefinition,
        };
    }
    function RulesGetRuleState(rule) {
        const data = rules.get(rule);
        if (!data) {
            throw new Error(`Attempt to get state for unknown rule '${rule}'`);
        }
        return data.state;
    }
    const ruleCustomDataHandlerPage = new Map();
    let memberNumberListAutoFill = null;
    const ruleCustomDataHandlers = {
        listSelect: {
            validateOptions: options => Array.isArray(options) && options.every(i => Array.isArray(i) && i.length === 2 && i.every(j => typeof j === "string")),
            validate: (value, def) => typeof value === "string" && def.options.map(i => i[0]).includes(value),
            run({ def, value, Y, access }) {
                DrawTextFit(def.description, 1050, Y + 0, 900, "Black");
                const index = def.options.findIndex(i => i[0] === value);
                if (index < 0) {
                    throw new Error(`Bad data during listSelect render`);
                }
                const next = clampWrap(index + 1, 0, def.options.length - 1);
                const prev = clampWrap(index - 1, 0, def.options.length - 1);
                MainCanvas.textAlign = "center";
                DrawBackNextButton(1050, Y + 36, 250, 60, def.options[index][1], access ? "White" : "#ddd", "", () => def.options[prev][1], () => def.options[next][1], !access);
                MainCanvas.textAlign = "left";
            },
            click({ def, value, Y, access }) {
                if (!access)
                    return;
                const index = def.options.findIndex(i => i[0] === value);
                if (MouseIn(1050, Y + 36, 125, 60)) {
                    return def.options[clampWrap(index - 1, 0, def.options.length - 1)][0];
                }
                if (MouseIn(1050 + 125, Y + 36, 125, 60)) {
                    return def.options[clampWrap(index + 1, 0, def.options.length - 1)][0];
                }
                return undefined;
            },
        },
        memberNumberList: {
            validateOptions: options => options === undefined || (Number.isInteger(options === null || options === void 0 ? void 0 : options.pageSize)),
            validate: value => Array.isArray(value) && value.every(Number.isInteger),
            onDataChange({ active, key, access }) {
                let input = document.getElementById(`BCX_RCDH_${key}`);
                if (!active) {
                    if (input) {
                        input.remove();
                    }
                    return;
                }
                if (!input) {
                    input = ElementCreateInput(`BCX_RCDH_${key}`, "text", "", "100");
                    input.inputMode = "numeric";
                    input.pattern = "[0-9]+";
                    if (memberNumberListAutoFill !== null) {
                        input.value = `${memberNumberListAutoFill}`;
                        memberNumberListAutoFill = null;
                    }
                }
                input.disabled = !access;
            },
            run({ def, value, Y, key, access }) {
                var _a, _b;
                Y -= 20;
                const PAGE_SIZE = ((_a = def.options) === null || _a === void 0 ? void 0 : _a.pageSize) ? def.options.pageSize : 4;
                const totalPages = Math.max(1, Math.ceil(value.length / PAGE_SIZE));
                const page = clamp$1((_b = ruleCustomDataHandlerPage.get(key)) !== null && _b !== void 0 ? _b : 0, 0, totalPages - 1);
                DrawTextFit(def.description, 1050, Y + 0, 900, "Black");
                for (let i = 0; i < PAGE_SIZE; i++) {
                    const e = page * PAGE_SIZE + i;
                    if (e >= value.length)
                        break;
                    MainCanvas.strokeRect(1050, Y + 26 + i * 70, 766, 64);
                    const msg = `${getCharacterName(value[e], "[unknown]")} (${value[e]})`;
                    DrawTextFit(msg, 1060, Y + 26 + i * 70 + 34, 380, "Black");
                    if (access) {
                        MainCanvas.textAlign = "center";
                        DrawButton(1836, Y + 26 + i * 70, 64, 64, "X", "White");
                        MainCanvas.textAlign = "left";
                    }
                }
                ElementPositionFix(`BCX_RCDH_${key}`, 40, 1050, Y + PAGE_SIZE * 70 + 43, 360, 60);
                MainCanvas.textAlign = "center";
                const input = document.getElementById(`BCX_RCDH_${key}`);
                if (input && document.activeElement === input) {
                    DrawHoverElements.push(() => {
                        const val = input.value && Number.parseInt(input.value, 10);
                        if (!val)
                            return;
                        const Left = 580;
                        const Top = 630;
                        MainCanvas.fillStyle = "#FFFF88";
                        MainCanvas.fillRect(Left, Top, 450, 65);
                        MainCanvas.lineWidth = 2;
                        MainCanvas.strokeStyle = "black";
                        MainCanvas.strokeRect(Left, Top, 450, 65);
                        DrawTextFit(getCharacterName(val, "[unknown]"), Left + 225, Top + 33, 444, "black");
                    });
                }
                DrawButton(1444, Y + PAGE_SIZE * 70 + 43, 64, 64, "", access ? "White" : "#ddd", undefined, undefined, !access);
                DrawImageEx("Icons/Title.png", 1446, Y + PAGE_SIZE * 70 + 43, { Width: 60, Height: 60 });
                DrawButton(1530, Y + PAGE_SIZE * 70 + 43, 100, 64, "Add", access ? "White" : "#ddd", undefined, undefined, !access);
                DrawBackNextButton(1650, Y + PAGE_SIZE * 70 + 43, 250, 64, `Page ${page + 1}/${totalPages}`, "White", undefined, () => "", () => "");
                MainCanvas.textAlign = "left";
            },
            click({ value, Y, key, target, def, access }) {
                var _a, _b;
                Y -= 20;
                const PAGE_SIZE = ((_a = def.options) === null || _a === void 0 ? void 0 : _a.pageSize) ? def.options.pageSize : 4;
                const totalPages = Math.max(1, Math.ceil(value.length / PAGE_SIZE));
                const page = clamp$1((_b = ruleCustomDataHandlerPage.get(key)) !== null && _b !== void 0 ? _b : 0, 0, totalPages - 1);
                for (let i = 0; i < PAGE_SIZE; i++) {
                    const e = page * PAGE_SIZE + i;
                    if (e >= value.length)
                        break;
                    if (access && MouseIn(1836, Y + 26 + i * 70, 64, 64)) {
                        value.splice(e, 1);
                        return value;
                    }
                }
                const input = document.getElementById(`BCX_RCDH_${key}`);
                const screen = getCurrentSubscreen();
                if (access && MouseIn(1444, Y + PAGE_SIZE * 70 + 43, 64, 64) && input && screen) {
                    setSubscreen(new GuiMemberSelect(target, screen, result => {
                        memberNumberListAutoFill = result;
                    }, value.slice()));
                }
                if (access && MouseIn(1530, Y + PAGE_SIZE * 70 + 43, 100, 64) && input && input.value) {
                    const num = Number.parseInt(input.value, 10);
                    if (Number.isInteger(num) && !value.includes(num)) {
                        value.push(num);
                        value.sort((a, b) => a - b);
                        input.value = "";
                        return value;
                    }
                }
                if (MouseIn(1650, Y + PAGE_SIZE * 70 + 43, 125, 64) && page > 0) {
                    ruleCustomDataHandlerPage.set(key, page - 1);
                }
                else if (MouseIn(1650 + 125, Y + PAGE_SIZE * 70 + 43, 125, 64) && page + 1 < totalPages) {
                    ruleCustomDataHandlerPage.set(key, page + 1);
                }
                return undefined;
            },
            unload({ key }) {
                ElementRemove(`BCX_RCDH_${key}`);
                ruleCustomDataHandlerPage.delete(key);
            },
        },
        number: {
            validateOptions: options => options === undefined || (isObject$1(options) &&
                (options.min === undefined || Number.isInteger(options.min)) &&
                (options.max === undefined || Number.isInteger(options.max))),
            validate: (value, def) => {
                var _a, _b;
                return (typeof value === "number" && Number.isInteger(value) &&
                    (((_a = def.options) === null || _a === void 0 ? void 0 : _a.min) === undefined || value >= def.options.min) &&
                    (((_b = def.options) === null || _b === void 0 ? void 0 : _b.max) === undefined || value <= def.options.max));
            },
            onDataChange({ active, key, onInput, value, access }) {
                let input = document.getElementById(`BCX_RCDH_${key}`);
                if (!active) {
                    if (input) {
                        input.remove();
                    }
                    return;
                }
                if (!input) {
                    input = ElementCreateInput(`BCX_RCDH_${key}`, "text", value.toString(10), "50");
                    input.inputMode = "numeric";
                    input.pattern = "[0-9]+";
                    input.oninput = onInput;
                }
                else {
                    input.value = value.toString(10);
                }
                input.onblur = () => {
                    if (input) {
                        input.value = value.toString(10);
                    }
                };
                input.disabled = !access;
            },
            processInput({ key, value, def }) {
                var _a, _b, _c, _d;
                const input = document.getElementById(`BCX_RCDH_${key}`);
                if (input && input.value) {
                    if (/^[0-9]+$/.test(input.value)) {
                        const res = clamp$1(Number.parseInt(input.value, 10), (_b = (_a = def.options) === null || _a === void 0 ? void 0 : _a.min) !== null && _b !== void 0 ? _b : -Infinity, (_d = (_c = def.options) === null || _c === void 0 ? void 0 : _c.max) !== null && _d !== void 0 ? _d : Infinity);
                        input.onblur = () => {
                            input.value = res.toString(10);
                        };
                        return res;
                    }
                    else {
                        input.value = value.toString(10);
                    }
                }
                return undefined;
            },
            run({ def, Y, key }) {
                DrawTextFit(def.description, 1050, Y + 0, 850, "Black");
                ElementPositionFix(`BCX_RCDH_${key}`, 40, 1050, Y + 26, 425, 60);
            },
            unload({ key }) {
                ElementRemove(`BCX_RCDH_${key}`);
            },
        },
        poseSelect: {
            validate: value => Array.isArray(value) && value.every(i => typeof i === "string"),
            run({ def, value, Y, access }) {
                DrawTextFit(def.description, 1050, Y + 0, 900, "Black");
                const poses = PoseFemale3DCG
                    .filter(P => (P.AllowMenu || P.AllowMenuTransient))
                    .map(P => P.Category)
                    .filter((C, I, Categories) => C && Categories.indexOf(C) === I)
                    .map(Category => PoseFemale3DCG.filter(P => (P.AllowMenu || P.AllowMenuTransient) && P.Category === Category));
                for (let I = 0; I < poses.length; I++) {
                    const OffsetY = Y + 60 + 140 * I;
                    const PoseGroup = poses[I];
                    for (let P = 0; P < PoseGroup.length; P++) {
                        const OffsetX = 1070 + 100 * P;
                        const IsDisabled = value.includes(PoseGroup[P].Name);
                        DrawButton(OffsetX, OffsetY, 90, 90, "", IsDisabled ? access ? "Darkred" : "#333" : access ? "White" : "#ddd", "Icons/Poses/" + PoseGroup[P].Name + ".png", "", !access);
                    }
                }
            },
            click({ value, Y, access }) {
                if (!access)
                    return;
                const poses = PoseFemale3DCG
                    .filter(P => (P.AllowMenu || P.AllowMenuTransient))
                    .map(P => P.Category)
                    .filter((C, I, Categories) => C && Categories.indexOf(C) === I)
                    .map(Category => PoseFemale3DCG.filter(P => (P.AllowMenu || P.AllowMenuTransient) && P.Category === Category));
                for (let I = 0; I < poses.length; I++) {
                    const OffsetY = Y + 60 + 140 * I;
                    const PoseGroup = poses[I];
                    for (let P = 0; P < PoseGroup.length; P++) {
                        const OffsetX = 1070 + 100 * P;
                        if (MouseIn(OffsetX, OffsetY, 90, 90)) {
                            if (value.includes(PoseGroup[P].Name)) {
                                value.splice(value.indexOf(PoseGroup[P].Name), 1);
                            }
                            else {
                                value.push(PoseGroup[P].Name);
                            }
                            return value;
                        }
                    }
                }
                return undefined;
            },
        },
        roleSelector: {
            validate: value => typeof value === "number" && AccessLevel[value] !== undefined,
            run({ def, value, Y, access }) {
                DrawTextFit(def.description, 1050, Y + 0, 900, "Black");
                const roleSelectionNext = value < AccessLevel.public ? value + 1 : AccessLevel.clubowner;
                const roleSelectionPrev = value > AccessLevel.clubowner ? value - 1 : AccessLevel.public;
                MainCanvas.textAlign = "center";
                DrawBackNextButton(1050, Y + 46, 250, 60, capitalizeFirstLetter(AccessLevel[value]) + (value !== AccessLevel.clubowner ? " ↑" : ""), access ? "White" : "#ddd", "", () => capitalizeFirstLetter(AccessLevel[roleSelectionPrev]), () => capitalizeFirstLetter(AccessLevel[roleSelectionNext]), !access);
                MainCanvas.textAlign = "left";
            },
            click({ value, Y, access }) {
                if (!access)
                    return;
                if (MouseIn(1050, Y + 46, 125, 60)) {
                    return value > AccessLevel.clubowner ? value - 1 : AccessLevel.public;
                }
                if (MouseIn(1050 + 125, Y + 46, 125, 60)) {
                    return value < AccessLevel.public ? value + 1 : AccessLevel.clubowner;
                }
                return undefined;
            },
        },
        string: {
            validateOptions: options => options === undefined || options instanceof RegExp,
            validate(value, def) {
                return typeof value === "string" &&
                    (!def.options || def.options.test(value));
            },
            onDataChange({ active, key, onInput, value, access, def }) {
                let input = document.getElementById(`BCX_RCDH_${key}`);
                if (!active) {
                    if (input) {
                        input.remove();
                    }
                    return;
                }
                if (!input) {
                    let lastValue = value;
                    const createdInput = ElementCreateInput(`BCX_RCDH_${key}`, "text", lastValue, "160");
                    createdInput.oninput = () => {
                        if (!def.options || def.options.test(createdInput.value)) {
                            lastValue = createdInput.value;
                            onInput();
                        }
                        else {
                            createdInput.value = lastValue;
                        }
                    };
                    input = createdInput;
                }
                else {
                    input.value = value;
                }
                input.disabled = !access;
            },
            processInput({ key, def }) {
                const input = document.getElementById(`BCX_RCDH_${key}`);
                return input && (!def.options || def.options.test(input.value)) ? input.value : undefined;
            },
            run({ def, Y, key }) {
                DrawTextFit(def.description, 1050, Y + 0, 850, "Black");
                ElementPositionFix(`BCX_RCDH_${key}`, 40, 1050, Y + 26, 850, 60);
            },
            unload({ key }) {
                ElementRemove(`BCX_RCDH_${key}`);
            },
        },
        stringList: {
            validateOptions: options => options === undefined || (isObject$1(options) &&
                (options.validate === undefined || options.validate instanceof RegExp)),
            validate(value, def) {
                return Array.isArray(value) &&
                    value.length <= STRING_LIST_MAX_LENGTH &&
                    value.every(i => { var _a; return typeof i === "string" && (!((_a = def.options) === null || _a === void 0 ? void 0 : _a.validate) || def.options.validate.test(i)); });
            },
            onDataChange({ active, key, access, def }) {
                let input = document.getElementById(`BCX_RCDH_${key}`);
                if (!active) {
                    if (input) {
                        input.remove();
                    }
                    return;
                }
                if (!input) {
                    let last = "";
                    const newInput = ElementCreateInput(`BCX_RCDH_${key}`, "text", "", "120");
                    newInput.oninput = () => {
                        var _a;
                        if (((_a = def.options) === null || _a === void 0 ? void 0 : _a.validate) && !def.options.validate.test(newInput.value)) {
                            if (newInput.value.length === 1 && def.options.validate.test("")) {
                                last = "";
                            }
                            newInput.value = last;
                        }
                        else {
                            last = newInput.value;
                        }
                    };
                    input = newInput;
                }
                input.disabled = !access;
            },
            run({ def, value, Y, key, access }) {
                var _a, _b, _c;
                Y -= 20;
                const PAGE_SIZE = (_b = (_a = def.options) === null || _a === void 0 ? void 0 : _a.pageSize) !== null && _b !== void 0 ? _b : 4;
                const totalPages = Math.max(1, Math.ceil(value.length / PAGE_SIZE));
                const page = clamp$1((_c = ruleCustomDataHandlerPage.get(key)) !== null && _c !== void 0 ? _c : 0, 0, totalPages - 1);
                DrawTextFit(def.description, 1050, Y + 0, 900, "Black");
                for (let i = 0; i < PAGE_SIZE; i++) {
                    const e = page * PAGE_SIZE + i;
                    if (e >= value.length)
                        break;
                    const msg = value[e];
                    if (MouseIn(1050, Y + 26 + i * 70, 766, 64)) {
                        DrawHoverElements.push(() => {
                            MainCanvas.save();
                            MainCanvas.fillStyle = "rgba(255, 255, 136, 0.9)";
                            MainCanvas.fillRect(1050, Y + 26, 766, 70 * PAGE_SIZE);
                            MainCanvas.strokeStyle = "Black";
                            MainCanvas.strokeRect(1050, Y + 26, 766, 70 * PAGE_SIZE);
                            MainCanvas.textAlign = "left";
                            DrawTextWrap(msg + "   -   [click to copy into the empty input text field]", 1050 - 746 / 2, Y + 30, 756, 70 * PAGE_SIZE - 10, "black", undefined, 5);
                            MainCanvas.restore();
                        });
                    }
                    MainCanvas.strokeRect(1050, Y + 26 + i * 70, 766, 64);
                    DrawTextFit(msg.length > 61 ? msg.substr(0, 60) + "\u2026" : msg, 1060, Y + 26 + i * 70 + 34, 750, "Black");
                    if (access) {
                        MainCanvas.textAlign = "center";
                        DrawButton(1836, Y + 26 + i * 70, 64, 64, "X", "White");
                        MainCanvas.textAlign = "left";
                    }
                }
                ElementPositionFix(`BCX_RCDH_${key}`, 40, 1050, Y + PAGE_SIZE * 70 + 43, 450, 60);
                MainCanvas.textAlign = "center";
                DrawButton(1530, Y + PAGE_SIZE * 70 + 43, 100, 64, "Add", access ? "White" : "#ddd", undefined, undefined, !access);
                DrawBackNextButton(1650, Y + PAGE_SIZE * 70 + 43, 250, 64, `Page ${page + 1}/${totalPages}`, "White", undefined, () => "", () => "");
                MainCanvas.textAlign = "left";
            },
            click({ value, Y, key, def, access }) {
                var _a, _b, _c, _d;
                Y -= 20;
                const PAGE_SIZE = (_b = (_a = def.options) === null || _a === void 0 ? void 0 : _a.pageSize) !== null && _b !== void 0 ? _b : 4;
                const totalPages = Math.max(1, Math.ceil(value.length / PAGE_SIZE));
                const page = clamp$1((_c = ruleCustomDataHandlerPage.get(key)) !== null && _c !== void 0 ? _c : 0, 0, totalPages - 1);
                const input = document.getElementById(`BCX_RCDH_${key}`);
                for (let i = 0; i < PAGE_SIZE; i++) {
                    const e = page * PAGE_SIZE + i;
                    if (e >= value.length)
                        break;
                    if (access && MouseIn(1050, Y + 26 + i * 70, 766, 64) && input && input.value === "") {
                        input.value = value[e];
                    }
                    if (access && MouseIn(1836, Y + 26 + i * 70, 64, 64)) {
                        value.splice(e, 1);
                        return value;
                    }
                }
                if (access && MouseIn(1530, Y + PAGE_SIZE * 70 + 43, 100, 64) &&
                    input && input.value &&
                    (!((_d = def.options) === null || _d === void 0 ? void 0 : _d.validate) || def.options.validate.test(input.value)) &&
                    !value.includes(input.value)) {
                    if (value.length >= STRING_LIST_MAX_LENGTH) {
                        InfoBeep("Reached the max. number of entries - please delete one first", 10000);
                        return;
                    }
                    value.push(input.value);
                    value.sort();
                    input.value = "";
                    return value;
                }
                if (MouseIn(1650, Y + PAGE_SIZE * 70 + 43, 125, 64) && page > 0) {
                    ruleCustomDataHandlerPage.set(key, page - 1);
                }
                else if (MouseIn(1650 + 125, Y + PAGE_SIZE * 70 + 43, 125, 64) && page + 1 < totalPages) {
                    ruleCustomDataHandlerPage.set(key, page + 1);
                }
                return undefined;
            },
            unload({ key }) {
                ElementRemove(`BCX_RCDH_${key}`);
                ruleCustomDataHandlerPage.delete(key);
            },
        },
        textArea: {
            validate: value => typeof value === "string",
            onDataChange({ active, key, onInput, value, access }) {
                let input = document.getElementById(`BCX_RCDH_${key}`);
                if (!active) {
                    if (input) {
                        input.remove();
                    }
                    return;
                }
                if (!input) {
                    input = document.createElement("textarea");
                    input.id = `BCX_RCDH_${key}`;
                    input.name = `BCX_RCDH_${key}`;
                    input.value = value;
                    input.maxLength = 10000;
                    input.setAttribute("screen-generated", CurrentScreen);
                    input.className = "HideOnPopup";
                    input.oninput = onInput;
                    document.body.appendChild(input);
                }
                else {
                    input.value = value;
                }
                input.disabled = !access;
            },
            processInput({ key }) {
                const input = document.getElementById(`BCX_RCDH_${key}`);
                return input ? input.value : undefined;
            },
            run({ def, Y, key }) {
                DrawTextFit(def.description, 1000, Y + 0, 900, "Black");
                const input = document.getElementById(`BCX_RCDH_${key}`);
                if (input && document.activeElement === input) {
                    ElementPositionFix(`BCX_RCDH_${key}`, 36, 105, 170, 1790, 750);
                }
                else {
                    ElementPositionFix(`BCX_RCDH_${key}`, 28, 1000, Y + 26, 900, 765 - Y);
                }
            },
            unload({ key }) {
                ElementRemove(`BCX_RCDH_${key}`);
            },
        },
        toggle: {
            validate: value => typeof value === "boolean",
            run({ def, value, Y, access }) {
                DrawCheckbox(1050, Y, 64, 64, def.description, value, !access);
            },
            click({ value, Y, access }) {
                if (!access)
                    return;
                if (MouseIn(1050, Y, 64, 64)) {
                    return !value;
                }
                return undefined;
            },
        },
    };
    function parseRuleName(selector, filter) {
        selector = selector.toLocaleLowerCase();
        const rule = Array.from(rules.entries())
            .filter(r => !filter || filter(r[0]))
            .find(([ruleName, data]) => ruleName.toLocaleLowerCase() === selector || data.name.toLocaleLowerCase() === selector);
        return rule ? [true, rule[0]] : [false, `Unknown rule "${selector}".`];
    }
    function autocompleteRuleName(selector, filter) {
        selector = selector.toLocaleLowerCase();
        let options = Array.from(rules.entries())
            .filter(r => r[1].name.toLocaleLowerCase().startsWith(selector) && (!filter || filter(r[0])))
            .map(r => r[1].name);
        if (options.length === 0) {
            options = Array.from(rules.entries())
                .filter(r => r[0].toLocaleLowerCase().startsWith(selector) && (!filter || filter(r[0])))
                .map(r => r[0]);
        }
        return options;
    }
    function RulesGetList() {
        return rulesList.map(rule => [rule, RulesGetDisplayDefinition(rule)]);
    }
    function RulesCreate(rule, character) {
        var _a;
        if (!moduleIsEnabled(ModuleCategory.Rules))
            return false;
        if (character && !ConditionsCheckAccess("rules", rule, character))
            return false;
        const definition = rules.get(rule);
        if (!definition) {
            throw new Error(`Attempt to create unknown rule '${rule}'`);
        }
        if (!ConditionsGetCondition("rules", rule)) {
            const ruleData = {};
            if (definition.dataDefinition) {
                ruleData.customData = {};
                for (const [k, v] of Object.entries(definition.dataDefinition)) {
                    ruleData.customData[k] = cloneDeep(typeof v.default === "function" ? v.default() : v.default);
                }
            }
            if (definition.internalDataDefault) {
                ruleData.internalData = definition.internalDataDefault();
                if (!((_a = definition.internalDataValidate) === null || _a === void 0 ? void 0 : _a.call(definition, ruleData.internalData))) {
                    throw new Error(`Failed to create valid internal data for rule '${rule}'`);
                }
            }
            ConditionsSetCondition("rules", rule, ruleData, character);
            if (character) {
                logMessage("rule_change", LogEntryType.plaintext, `${character} added a new rule: ${definition.name}`);
                if (!character.isPlayer()) {
                    ChatRoomSendLocal(`${character.toNicknamedString()} gave you a new rule: "${definition.name}"`);
                }
            }
        }
        return true;
    }
    function RulesDelete(rule, character) {
        if (!moduleIsEnabled(ModuleCategory.Rules))
            return false;
        if (character && !ConditionsCheckAccess("rules", rule, character))
            return false;
        const display = RulesGetDisplayDefinition(rule);
        if (ConditionsRemoveCondition("rules", rule) && character) {
            logMessage("rule_change", LogEntryType.plaintext, `${character} removed the rule: ${display.name}`);
            if (!character.isPlayer()) {
                ChatRoomSendLocal(`${character.toNicknamedString()} removed your rule "${display.name}"`);
            }
        }
        return true;
    }
    class RuleState {
        get condition() {
            return ConditionsGetCondition("rules", this.rule);
        }
        get inEffect() {
            return ConditionsIsConditionInEffect("rules", this.rule);
        }
        get isEnforced() {
            const data = this.condition;
            if (!data || !this.inEffect)
                return false;
            return data.data.enforce !== false;
        }
        get isLogged() {
            const data = this.condition;
            if (!data || !this.inEffect)
                return false;
            return data.data.log !== false;
        }
        get customData() {
            var _a;
            return (_a = this.condition) === null || _a === void 0 ? void 0 : _a.data.customData;
        }
        get internalData() {
            var _a;
            return cloneDeep((_a = this.condition) === null || _a === void 0 ? void 0 : _a.data.internalData);
        }
        set internalData(data) {
            const condition = this.condition;
            if (condition && !isEqual(condition.data.internalData, data)) {
                condition.data.internalData = data;
                modStorageSync();
            }
        }
        constructor(rule, definition) {
            this.rule = rule;
            this.ruleDefinition = definition;
        }
        trigger(targetCharacter = null, dictionary = {}) {
            var _a, _b, _c;
            const texts = this.ruleDefinition.triggerTexts;
            if (texts) {
                let targetName = CharacterNickname(Player);
                if (targetCharacter != null) {
                    const targetChar = getChatroomCharacter(targetCharacter);
                    targetName = targetChar ? CharacterNickname(targetChar.Character) : getCharacterName(targetCharacter, "[unknown]");
                }
                if (texts.infoBeep) {
                    InfoBeep("BCX: " + dictionaryProcess(texts.infoBeep, {
                        PLAYER_NAME: (_a = RelationshipsGetNickname(Player.MemberNumber)) !== null && _a !== void 0 ? _a : CharacterNickname(Player),
                        TARGET_PLAYER: (_b = RelationshipsGetNickname(targetCharacter !== null && targetCharacter !== void 0 ? targetCharacter : Player.MemberNumber)) !== null && _b !== void 0 ? _b : targetName,
                        ...dictionary,
                    }), 7000);
                }
                if (this.isLogged) {
                    const log = texts.log;
                    if (log) {
                        logMessage("rule_trigger", LogEntryType.ruleTrigger, [this.rule, dictionary]);
                    }
                    const announce = (_c = texts.announce) !== null && _c !== void 0 ? _c : texts.log;
                    if (announce) {
                        ChatRoomActionMessage(`${dictionaryProcess(announce, {
                        PLAYER_NAME: "SourceCharacter",
                        TARGET_PLAYER: `TargetCharacterName (${targetCharacter !== null && targetCharacter !== void 0 ? targetCharacter : Player.MemberNumber})`,
                        ...dictionary,
                    })}.`, null, [
                            { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                            { Tag: "TargetCharacterName", MemberNumber: targetCharacter !== null && targetCharacter !== void 0 ? targetCharacter : Player.MemberNumber, Text: targetName },
                        ]);
                    }
                }
            }
        }
        triggerAttempt(targetCharacter = null, dictionary = {}) {
            var _a, _b, _c, _d;
            const texts = this.ruleDefinition.triggerTexts;
            if (texts) {
                let targetName = CharacterNickname(Player);
                if (targetCharacter != null) {
                    const targetChar = getChatroomCharacter(targetCharacter);
                    targetName = targetChar ? CharacterNickname(targetChar.Character) : getCharacterName(targetCharacter, "[unknown]");
                }
                const infoBeep = (_a = texts.attempt_infoBeep) !== null && _a !== void 0 ? _a : texts.infoBeep;
                if (infoBeep) {
                    InfoBeep("BCX: " + dictionaryProcess(infoBeep, {
                        PLAYER_NAME: (_b = RelationshipsGetNickname(Player.MemberNumber)) !== null && _b !== void 0 ? _b : CharacterNickname(Player),
                        TARGET_PLAYER: (_c = RelationshipsGetNickname(targetCharacter !== null && targetCharacter !== void 0 ? targetCharacter : Player.MemberNumber)) !== null && _c !== void 0 ? _c : targetName,
                        ...dictionary,
                    }), 7000);
                }
                if (this.isLogged) {
                    const log = texts.attempt_log;
                    if (log) {
                        logMessage("rule_trigger", LogEntryType.ruleTriggerAttempt, [this.rule, dictionary]);
                    }
                    const announce = (_d = texts.attempt_announce) !== null && _d !== void 0 ? _d : texts.attempt_log;
                    if (announce) {
                        ChatRoomActionMessage(`${dictionaryProcess(announce, {
                        PLAYER_NAME: "SourceCharacter",
                        TARGET_PLAYER: `TargetCharacterName (${targetCharacter !== null && targetCharacter !== void 0 ? targetCharacter : Player.MemberNumber})`,
                        ...dictionary,
                    })}.`, null, [
                            { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                            { Tag: "TargetCharacterName", MemberNumber: targetCharacter !== null && targetCharacter !== void 0 ? targetCharacter : Player.MemberNumber, Text: targetName },
                        ]);
                    }
                }
            }
        }
    }
    class ModuleRules extends BaseModule {
        constructor() {
            super(...arguments);
            this.resetTimer = null;
            this.triggerCounts = new Map();
            this.suspendedUntil = null;
        }
        init() {
            registerPermission("rules_normal", {
                name: "Allows controlling non-limited rules",
                category: ModuleCategory.Rules,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.lover],
                    [Preset.switch]: [true, AccessLevel.lover],
                    [Preset.submissive]: [false, AccessLevel.mistress],
                    [Preset.slave]: [false, AccessLevel.mistress],
                },
            });
            registerPermission("rules_limited", {
                name: "Allows controlling limited rules",
                category: ModuleCategory.Rules,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.owner],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [false, AccessLevel.lover],
                    [Preset.slave]: [false, AccessLevel.lover],
                },
            });
            registerPermission("rules_global_configuration", {
                name: "Allows editing the global rules configuration",
                category: ModuleCategory.Rules,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.owner],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [false, AccessLevel.lover],
                    [Preset.slave]: [false, AccessLevel.lover],
                },
            });
            registerPermission("rules_change_limits", {
                name: "Allows to limit/block specific rules",
                category: ModuleCategory.Rules,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.self],
                    [Preset.slave]: [false, AccessLevel.owner],
                },
            });
            registerPermission("rules_view_originator", {
                name: "Allow to view who added the rule originally",
                category: ModuleCategory.Rules,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.mistress],
                    [Preset.slave]: [true, AccessLevel.mistress],
                },
            });
            queryHandlers.ruleCreate = (sender, data) => {
                if (guard_BCX_Rule(data)) {
                    return RulesCreate(data, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.ruleDelete = (sender, data) => {
                if (guard_BCX_Rule(data)) {
                    return RulesDelete(data, sender);
                }
                else {
                    return undefined;
                }
            };
            registerWhisperCommand("modules", "rules", "- Manage rules", (argv, sender, respond) => {
                if (!moduleIsEnabled(ModuleCategory.Rules)) {
                    return respond(`Rules module is disabled.`);
                }
                const subcommand = (argv[0] || "").toLocaleLowerCase();
                const rulesInfo = ConditionsGetCategoryPublicData("rules", sender).conditions;
                if (ConditionsSubcommands.includes(subcommand)) {
                    return ConditionsRunSubcommand("rules", argv, sender, respond);
                }
                else if (subcommand === "list") {
                    let result = "Current rules:";
                    for (const [k, v] of Object.entries(rulesInfo)) {
                        const data = RulesGetDisplayDefinition(k);
                        const timerText = `Timer: ${v.timer ? formatTimeInterval(v.timer - Date.now(), "short") : "∞"}`;
                        const resultItem = `\n${data.name} | ${timerText}`;
                        if (result.length + resultItem.length >= 990) {
                            result += "\n...";
                            respond(result);
                            result = "Current rules (continued):";
                        }
                        result += resultItem;
                    }
                    respond(result);
                }
                else if (subcommand === "listall") {
                    let result = "All existing rules:";
                    for (const [k] of RulesGetList()) {
                        const data = RulesGetDisplayDefinition(k);
                        const resultItem = `\n${data.name}`;
                        if (result.length + resultItem.length >= 990) {
                            result += "\n...";
                            respond(result);
                            result = "All rules (continued):";
                        }
                        result += resultItem;
                    }
                    respond(result);
                }
                else if (subcommand === "description") {
                    const result = parseRuleName(argv[1] || "");
                    if (!result[0]) {
                        return respond(result[1]);
                    }
                    const data = RulesGetDisplayDefinition(result[1]);
                    respond(data.longDescription.replaceAll("PLAYER_NAME", Player.Name));
                }
                else if (subcommand === "remove") {
                    const result = parseRuleName(argv[1] || "");
                    if (!result[0]) {
                        return respond(result[1]);
                    }
                    respond(RulesDelete(result[1], sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                }
                else {
                    respond(Command_fixExclamationMark(sender, `!rules usage (page 1):\n` +
                        `!rules list - List the currently added rules\n` +
                        `!rules listall - List all existing rule names in BCX\n` +
                        `!rules description <rule> - Show the rule's description\n` +
                        `!rules remove <rule> - Remove a currently added rule if permitted to\n` +
                        `\nNote: Adding and setting up rules is only supported via using BCX's graphical user interface yourself.`));
                    respond(Command_fixExclamationMark(sender, `!rules usage (page 2):\n` +
                        `!rules setactive <rule> <yes/no> - Switch the rule and its conditions on and off\n` +
                        `!rules triggers <rule> global <yes/no> - Set the trigger condition of this rule to the global configuration\n` +
                        `!rules triggers <rule> help - Set the trigger configuration of a rule\n` +
                        `!rules globaltriggers help - Set global trigger configuration\n` +
                        `!rules timer <rule> help - Set timer options of a rule\n` +
                        `!rules defaulttimer help - Set default timer options used on new rules\n` +
                        `!rules setlimit <rule> <normal/limited/blocked> - Set a limit on certain <rule>\n` +
                        `\nHint: If an argument contains spaces: "put it in quotes"`));
                }
            }, (argv, sender) => {
                if (!moduleIsEnabled(ModuleCategory.Rules)) {
                    return [];
                }
                if (argv.length <= 1) {
                    return Command_pickAutocomplete(argv[0], ["list", "listall", "description", "remove", ...ConditionsSubcommands]);
                }
                const subcommand = argv[0].toLocaleLowerCase();
                if (ConditionsSubcommands.includes(subcommand)) {
                    return ConditionsAutocompleteSubcommand("rules", argv, sender);
                }
                return [];
            });
            ConditionsRegisterCategory("rules", {
                category: ModuleCategory.Rules,
                permission_normal: "rules_normal",
                permission_limited: "rules_limited",
                permission_configure: "rules_global_configuration",
                permission_changeLimits: "rules_change_limits",
                permission_viewOriginator: "rules_view_originator",
                loadValidateConditionKey: rule => guard_BCX_Rule(rule),
                loadValidateCondition: (rule, data) => {
                    const info = data.data;
                    const descriptor = rules.get(rule);
                    if (!descriptor) {
                        console.error(`BCX: Bad data for rule ${rule}: descriptor not found, removing it`);
                        return false;
                    }
                    if (!isObject$1(info) ||
                        (info.enforce !== undefined && info.enforce !== false) ||
                        (info.log !== undefined && info.log !== false)) {
                        console.error(`BCX: Bad data for rule ${rule}, removing it`, info);
                        return false;
                    }
                    if (descriptor.dataDefinition) {
                        if (!isObject$1(info.customData)) {
                            console.warn(`BCX: Missing custom data for rule ${rule}, fixing`);
                            info.customData = {};
                        }
                        for (const k of Object.keys(info.customData)) {
                            if (!descriptor.dataDefinition[k]) {
                                console.warn(`BCX: Unknown custom data attribute '${k}' for rule ${rule}, cleaning up`, info.customData[k]);
                                delete info.customData[k];
                            }
                        }
                        for (const [k, def] of Object.entries(descriptor.dataDefinition)) {
                            const handler = ruleCustomDataHandlers[def.type];
                            if (!handler) {
                                console.error(`BCX: Custom data for rule ${rule} unknown type ${def.type}, removing it`, info);
                                return false;
                            }
                            if (!handler.validate(info.customData[k], def)) {
                                console.warn(`BCX: Bad custom data ${k} for rule ${rule}, expected type ${def.type}, replacing with default`, info.customData[k]);
                                info.customData[k] = (typeof def.default === "function" ? def.default() : def.default);
                            }
                        }
                    }
                    else if (info.customData !== undefined) {
                        console.error(`BCX: Custom data for rule ${rule} without data definition, removing it`, info);
                        return false;
                    }
                    if (descriptor.internalDataValidate) {
                        if (!descriptor.internalDataValidate(info.internalData)) {
                            if (info.internalData === undefined && descriptor.internalDataDefault) {
                                console.warn(`BCX: Missing internal data for rule ${rule}, fixing`);
                                info.internalData = descriptor.internalDataDefault();
                            }
                            else {
                                console.error(`BCX: Bad internal data for rule ${rule}, removing it`, info);
                                return false;
                            }
                        }
                    }
                    else if (info.internalData !== undefined) {
                        console.error(`BCX: Internal data for rule ${rule} without validator, removing it`, info);
                        return false;
                    }
                    return true;
                },
                loadCategorySpecificGlobalData: () => undefined,
                stateChangeHandler: this.ruleStateChange.bind(this),
                tickHandler: this.ruleTick.bind(this),
                makePublicData: (rule, data) => {
                    var _a, _b;
                    return ({
                        enforce: (_a = data.data.enforce) !== null && _a !== void 0 ? _a : true,
                        log: (_b = data.data.log) !== null && _b !== void 0 ? _b : true,
                        customData: cloneDeep(data.data.customData),
                    });
                },
                validateCategorySpecificGlobalData: () => true,
                validatePublicData: (rule, data) => isObject$1(data) &&
                    typeof data.enforce === "boolean" &&
                    typeof data.log === "boolean" &&
                    guard_RuleCustomData(rule, data.customData),
                updateCondition: (condition, data, updateData) => {
                    if (updateData.enforce) {
                        delete data.data.enforce;
                    }
                    else {
                        data.data.enforce = false;
                    }
                    if (updateData.log) {
                        delete data.data.log;
                    }
                    else {
                        data.data.log = false;
                    }
                    if (updateData.customData) {
                        data.data.customData = cloneDeep(updateData.customData);
                    }
                    return true;
                },
                parseConditionName: (selector, onlyExisting) => {
                    return parseRuleName(selector, onlyExisting ? (rule => onlyExisting.includes(rule)) : undefined);
                },
                autocompleteConditionName: (selector, onlyExisting) => {
                    return autocompleteRuleName(selector, onlyExisting ? (rule => onlyExisting.includes(rule)) : undefined);
                },
                logLimitChange: (rule, character, newLimit) => {
                    const definition = RulesGetDisplayDefinition(rule);
                    logMessage("rule_change", LogEntryType.plaintext, `${character} changed ${Player.Name}'s '${definition.name}' rule permission to ${ConditionsLimit[newLimit]}`);
                    if (!character.isPlayer()) {
                        ChatRoomSendLocal(`${character.toNicknamedString()} changed '${definition.name}' rule permission to ${ConditionsLimit[newLimit]}`, undefined, character.MemberNumber);
                    }
                },
                logConditionUpdate: (rule, character, newData, oldData) => {
                    var _a, _b, _c, _d, _e, _f;
                    const definition = RulesGetDisplayDefinition(rule);
                    const visibleName = definition.name;
                    const didActiveChange = newData.active !== oldData.active;
                    const didTimerChange = newData.timer !== oldData.timer || newData.timerRemove !== oldData.timerRemove;
                    const didTriggerChange = !isEqual(newData.requirements, oldData.requirements);
                    const didEnforcementChange = newData.data.enforce !== oldData.data.enforce;
                    const didLoggingChange = newData.data.log !== oldData.data.log;
                    const changeEvents = [];
                    if (didActiveChange)
                        changeEvents.push("active state");
                    if (didTimerChange)
                        changeEvents.push("timer");
                    if (didTriggerChange)
                        changeEvents.push("trigger condition");
                    if (didEnforcementChange)
                        changeEvents.push("enforcement");
                    if (didLoggingChange)
                        changeEvents.push("logging");
                    if (definition.dataDefinition) {
                        for (const [k, def] of Object.entries(definition.dataDefinition)) {
                            if (!isEqual((_a = oldData.data.customData) === null || _a === void 0 ? void 0 : _a[k], (_b = newData.data.customData) === null || _b === void 0 ? void 0 : _b[k])) {
                                let descr = def.description;
                                if (descr.includes(":")) {
                                    descr = descr.slice(0, descr.lastIndexOf(":"));
                                }
                                changeEvents.push(`${changeEvents.length > 0 ? "and " : ""}the value of the setting '${descr}'`);
                            }
                        }
                    }
                    if (changeEvents.length > 0) {
                        logMessage("rule_change", LogEntryType.plaintext, `${character} changed the ${changeEvents.join(", ")} of ${Player.Name}'s '${visibleName}' rule`);
                    }
                    if (!character.isPlayer()) {
                        if (didActiveChange) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} ${newData.active ? "reactivated" : "deactivated"} the '${visibleName}' rule`, undefined, character.MemberNumber);
                        }
                        if (newData.timer !== oldData.timer)
                            if (newData.timer === null) {
                                ChatRoomSendLocal(`${character.toNicknamedString()} disabled the timer of the '${visibleName}' rule`, undefined, character.MemberNumber);
                            }
                            else {
                                ChatRoomSendLocal(`${character.toNicknamedString()} changed the remaining time of the timer of the '${visibleName}' rule to ${formatTimeInterval(newData.timer - Date.now())}`, undefined, character.MemberNumber);
                            }
                        if (newData.timer !== null && newData.timerRemove !== oldData.timerRemove)
                            ChatRoomSendLocal(`${character.toNicknamedString()} changed the timer behavior of the '${visibleName}' rule to ${newData.timerRemove ? "remove" : "disable"} the rule when time runs out`, undefined, character.MemberNumber);
                        if (didTriggerChange)
                            if (newData.requirements === null) {
                                ChatRoomSendLocal(`${character.toNicknamedString()} set the triggers of '${visibleName}' rule to the global rules configuration`, undefined, character.MemberNumber);
                            }
                            else {
                                const triggers = [];
                                const r = newData.requirements;
                                if (r.room) {
                                    triggers.push(`When ${r.room.inverted ? "not in" : "in"} ${r.room.type} room`);
                                }
                                if (r.roomName) {
                                    triggers.push(`When ${r.roomName.inverted ? "not in" : "in"} room named '${r.roomName.name}'`);
                                }
                                if (r.role) {
                                    const role = capitalizeFirstLetter(AccessLevel[r.role.role]) + (r.role.role !== AccessLevel.clubowner ? " ↑" : "");
                                    triggers.push(`When ${r.role.inverted ? "not in" : "in"} room with role '${role}'`);
                                }
                                if (r.player) {
                                    const name = getCharacterName(r.player.memberNumber, null);
                                    triggers.push(`When ${r.player.inverted ? "not in" : "in"} room with member '${r.player.memberNumber}'${name ? ` (${name})` : ""}`);
                                }
                                if (triggers.length > 0) {
                                    ChatRoomSendLocal(`${character.toNicknamedString()} set the '${visibleName}' rule to trigger under following conditions:\n` + triggers.join("\n"), undefined, character.MemberNumber);
                                }
                                else {
                                    ChatRoomSendLocal(`${character.toNicknamedString()} deactivated all trigger conditions of the '${visibleName}' rule. The rule will now always trigger, while it is active`, undefined, character.MemberNumber);
                                }
                            }
                        if (didEnforcementChange) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} ${newData.data.enforce ? "enabled enforcement" : "stopped enforcement"} of the '${visibleName}' rule`, undefined, character.MemberNumber);
                        }
                        if (didLoggingChange) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} ${newData.data.log ? "enabled logging" : "stopped logging"} of the '${visibleName}' rule`, undefined, character.MemberNumber);
                        }
                        if (definition.dataDefinition) {
                            for (const [k, def] of Object.entries(definition.dataDefinition)) {
                                if (!isEqual((_c = oldData.data.customData) === null || _c === void 0 ? void 0 : _c[k], (_d = newData.data.customData) === null || _d === void 0 ? void 0 : _d[k])) {
                                    ChatRoomSendLocal(`${character.toNicknamedString()} changed the '${visibleName}' rule's setting '${def.description}' from '${(_e = oldData.data.customData) === null || _e === void 0 ? void 0 : _e[k]}' to '${(_f = newData.data.customData) === null || _f === void 0 ? void 0 : _f[k]}'`, undefined, character.MemberNumber);
                                }
                            }
                        }
                    }
                },
                logCategoryUpdate: (character, newData, oldData) => {
                    const didTimerChange = newData.timer !== oldData.timer || newData.timerRemove !== oldData.timerRemove;
                    const didTriggerChange = !isEqual(newData.requirements, oldData.requirements);
                    const changeEvents = [];
                    if (didTimerChange)
                        changeEvents.push("default timer");
                    if (didTriggerChange)
                        changeEvents.push("trigger condition");
                    if (changeEvents.length > 0) {
                        logMessage("curse_change", LogEntryType.plaintext, `${character} changed the ${changeEvents.join(", ")} of ${Player.Name}'s global rules config`);
                    }
                    if (!character.isPlayer()) {
                        if (newData.timer !== oldData.timer)
                            if (newData.timer === null) {
                                ChatRoomSendLocal(`${character.toNicknamedString()} removed the default timer of the global rules configuration`, undefined, character.MemberNumber);
                            }
                            else {
                                ChatRoomSendLocal(`${character.toNicknamedString()} changed the default timer of the global rules configuration to ${formatTimeInterval(newData.timer)}`, undefined, character.MemberNumber);
                            }
                        if (newData.timer !== null && newData.timerRemove !== oldData.timerRemove)
                            ChatRoomSendLocal(`${character.toNicknamedString()} changed the default timeout behavior of the global rules configuration to ${newData.timerRemove ? "removal of rules" : "disabling rules"} when time runs out`, undefined, character.MemberNumber);
                        if (didTriggerChange) {
                            const triggers = [];
                            const r = newData.requirements;
                            if (r.room) {
                                triggers.push(`When ${r.room.inverted ? "not in" : "in"} ${r.room.type} room`);
                            }
                            if (r.roomName) {
                                triggers.push(`When ${r.roomName.inverted ? "not in" : "in"} room named '${r.roomName.name}'`);
                            }
                            if (r.role) {
                                const role = capitalizeFirstLetter(AccessLevel[r.role.role]) + (r.role.role !== AccessLevel.clubowner ? " ↑" : "");
                                triggers.push(`When ${r.role.inverted ? "not in" : "in"} room with role '${role}'`);
                            }
                            if (r.player) {
                                const name = getCharacterName(r.player.memberNumber, null);
                                triggers.push(`When ${r.player.inverted ? "not in" : "in"} room with member '${r.player.memberNumber}'${name ? ` (${name})` : ""}`);
                            }
                            if (triggers.length > 0) {
                                ChatRoomSendLocal(`${character.toNicknamedString()} set the global rules configuration to trigger rules under following conditions:\n` + triggers.join("\n"), undefined, character.MemberNumber);
                            }
                            else {
                                ChatRoomSendLocal(`${character.toNicknamedString()} deactivated all trigger conditions for the global rules configuration. Rules set to this default configuration will now always trigger, while active`, undefined, character.MemberNumber);
                            }
                        }
                    }
                },
                getDefaultLimits: () => {
                    const res = {};
                    for (const [k, v] of rules.entries()) {
                        res[k] = v.defaultLimit;
                    }
                    return res;
                },
                commandConditionSelectorHelp: "rule",
                currentExportImport: {
                    export(condition, data) {
                        var _a, _b;
                        return {
                            enforce: (_a = data.enforce) !== null && _a !== void 0 ? _a : true,
                            log: (_b = data.log) !== null && _b !== void 0 ? _b : true,
                            customData: cloneDeep(data.customData),
                        };
                    },
                    import(condition, data, character) {
                        var _a;
                        const validator = z.object({
                            enforce: z.boolean(),
                            log: z.boolean(),
                            customData: z.record(z.any()).optional(),
                        });
                        const validationResult = validator.safeParse(data);
                        if (!validationResult.success) {
                            return [false, JSON.stringify(validationResult.error.format(), undefined, "\t")];
                        }
                        const validatedData = validationResult.data;
                        const definition = rules.get(condition);
                        if (!definition) {
                            return [false, `Unknown rule '${condition}'`];
                        }
                        if (!guard_RuleCustomData(condition, validatedData.customData)) {
                            return [false, `Invalid rule configuration`];
                        }
                        const current = ConditionsGetCondition("rules", condition);
                        const internalData = current ? current.data.internalData :
                            (_a = definition.internalDataDefault) === null || _a === void 0 ? void 0 : _a.call(definition);
                        if (definition.internalDataValidate && !definition.internalDataValidate(internalData)) {
                            return [false, `Failed to validate internal data`];
                        }
                        return [true, {
                                enforce: !validatedData.enforce && definition.enforceable ? false : undefined,
                                log: !validatedData.log && definition.loggable ? false : undefined,
                                customData: validatedData.customData,
                                internalData,
                            }];
                    },
                    importLog(condition, data, character) {
                        const definition = rules.get(condition);
                        if (!character || !definition)
                            return;
                        logMessage("rule_change", LogEntryType.plaintext, `${character} imported rule '${definition.name}'`);
                        if (!character.isPlayer()) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} imported the rule '${definition.name}'`);
                        }
                    },
                    importRemove(condition, character) {
                        if (!RulesDelete(condition, character)) {
                            return "Failed.";
                        }
                        return true;
                    },
                },
            });
            initRules_bc_blocks();
            initRules_bc_alter();
            initRules_bc_settings();
            initRules_bc_relation_control();
            initRules_bc_speech_control();
            initRules_other();
            for (const rule of rules.values()) {
                if (rule.init) {
                    rule.init(rule.state);
                }
            }
        }
        load() {
            if (!moduleIsEnabled(ModuleCategory.Rules)) {
                return;
            }
            for (const rule of rules.values()) {
                if (rule.load) {
                    rule.load(rule.state);
                }
            }
        }
        run() {
            if (!moduleIsEnabled(ModuleCategory.Rules))
                return;
            this.resetTimer = BCX_setInterval(() => {
                this.triggerCounts.clear();
            }, RULES_ANTILOOP_RESET_INTERVAL);
        }
        unload() {
            if (this.resetTimer !== null) {
                clearInterval(this.resetTimer);
                this.resetTimer = null;
            }
            for (const rule of rules.values()) {
                if (rule.unload) {
                    rule.unload();
                }
            }
        }
        reload() {
            this.unload();
            this.load();
            this.run();
        }
        ruleStateChange(rule, condition, newState) {
            var _a;
            const ruleDefinition = rules.get(rule);
            if (!ruleDefinition) {
                throw new Error(`Definition for rule ${rule} not found`);
            }
            (_a = ruleDefinition.stateChange) === null || _a === void 0 ? void 0 : _a.call(ruleDefinition, ruleDefinition.state, newState);
        }
        ruleTick(rule, condition) {
            var _a;
            if (this.suspendedUntil !== null) {
                if (Date.now() >= this.suspendedUntil) {
                    this.suspendedUntil = null;
                    this.triggerCounts.clear();
                    ChatRoomActionMessage(`All of SourceCharacter's temporarily suspended rules are in effect again.`, null, [
                        { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    ]);
                }
                else {
                    return;
                }
            }
            const ruleDefinition = rules.get(rule);
            if (!ruleDefinition) {
                throw new Error(`Definition for rule ${rule} not found`);
            }
            if (ruleDefinition.tick) {
                if (ruleDefinition.tick(ruleDefinition.state)) {
                    const counter = ((_a = this.triggerCounts.get(rule)) !== null && _a !== void 0 ? _a : 0) + 1;
                    this.triggerCounts.set(rule, counter);
                    if (counter >= RULES_ANTILOOP_THRESHOLD) {
                        ChatRoomActionMessage("Protection triggered: The effects of rules have been suspended for 10 minutes. Please refrain from triggering rules so rapidly, as it creates strain on the server and may lead to unwanted side effects! If you believe this message was triggered by a bug, please report it to BCX Discord.");
                        this.suspendedUntil = Date.now() + RULES_ANTILOOP_SUSPEND_TIME;
                    }
                }
            }
        }
    }

    const COMMAND_CATEGORIES_VISIBLE = ["utility", "cheats", "modules", "commands"];
    const COMMAND_GENERIC_ERROR = `The command failed to execute, likely because you are lacking the permission to give it.`;
    const commands$1 = new Map();
    const whisperCommands = new Map();
    let firstTimeHelp = null;
    function CommandsShowFirstTimeHelp() {
        if (!firstTimeHelp && modStorage.chatShouldDisplayFirstTimeHelp) {
            firstTimeHelp = ChatRoomSendLocal(`[ BCX commands tutorial ]\n` +
                `BCX also provides helpful chat commands.\n` +
                `All commands start with a dot ( . )\n` +
                `The commands also support auto-completion: While writing a command, press 'Tab' to try automatically completing the currently typed word.\n` +
                `Other club members can also use commands of your BCX, without needing BCX themselves. They will get a list of all commands they have permission using by whispering '!help' ( ! instead of . ) to you.\n` +
                `Note: Messages colored like this text can only be seen by you and no one else.\n` +
                `\n` +
                `To complete this tutorial, use '.help' command by writing '.he' and pressing 'Tab' to complete it to '.help', it will show you list of available BCX commands.`);
        }
    }
    function CommandsCompleteFirstTimeHelp() {
        if (modStorage.chatShouldDisplayFirstTimeHelp !== undefined) {
            delete modStorage.chatShouldDisplayFirstTimeHelp;
            modStorageSync();
        }
        if (firstTimeHelp) {
            firstTimeHelp.remove();
            firstTimeHelp = null;
        }
    }
    function registerCommand$1(category, name, description, callback, autocomplete = null) {
        name = name.toLocaleLowerCase();
        if (commands$1.has(name)) {
            throw new Error(`Command "${name}" already registered!`);
        }
        commands$1.set(name, {
            parse: false,
            callback,
            autocomplete,
            category,
            description,
        });
    }
    function aliasCommand(originalName, alias) {
        originalName = originalName.toLocaleLowerCase();
        alias = alias.toLocaleLowerCase();
        const original = commands$1.get(originalName);
        if (!original) {
            throw new Error(`Command "${originalName}" to alias not found`);
        }
        if (original.parse) {
            commands$1.set(alias, {
                parse: true,
                category: original.category,
                description: null,
                callback: original.callback,
                autocomplete: original.autocomplete,
            });
        }
        else {
            commands$1.set(alias, {
                parse: false,
                category: original.category,
                description: null,
                callback: original.callback,
                autocomplete: original.autocomplete,
            });
        }
    }
    function registerCommandParsed(category, name, description, callback, autocomplete = null) {
        name = name.toLocaleLowerCase();
        if (commands$1.has(name)) {
            throw new Error(`Command "${name}" already registered!`);
        }
        commands$1.set(name, {
            parse: true,
            callback,
            autocomplete,
            category,
            description,
        });
    }
    function registerWhisperCommand(category, name, description, callback, autocomplete = null, registerNormal = true) {
        name = name.toLocaleLowerCase();
        if (registerNormal) {
            registerCommandParsed(category, name, description, (argv) => {
                callback(argv, getPlayerCharacter(), (msg) => ChatRoomSendLocal(msg));
                return true;
            }, autocomplete ? (argv) => autocomplete(argv, getPlayerCharacter()) : null);
        }
        if (whisperCommands.has(name)) {
            throw new Error(`Command "${name}" already registered!`);
        }
        whisperCommands.set(name, {
            callback,
            autocomplete,
            category,
            description,
        });
    }
    function CommandParse(msg) {
        msg = msg.trimStart();
        const commandMatch = /^(\S+)(?:\s|$)(.*)$/.exec(msg);
        if (!commandMatch) {
            return ["", ""];
        }
        return [(commandMatch[1] || "").toLocaleLowerCase(), commandMatch[2]];
    }
    function CommandParseArguments(args) {
        return [...args.matchAll(/".*?(?:"|$)|'.*?(?:'|$)|[^ ]+/g)]
            .map(a => a[0])
            .map(a => a[0] === '"' || a[0] === "'" ? a.substring(1, a.length > 1 && a[a.length - 1] === a[0] ? a.length - 1 : a.length) : a);
    }
    function CommandHasEmptyArgument(args) {
        const argv = CommandParseArguments(args);
        return argv.length === 0 || !args.endsWith(argv[argv.length - 1]);
    }
    function CommandArgumentNeedsQuotes(arg) {
        return arg.includes(" ") || arg.includes('"') || arg.startsWith(`'`);
    }
    function CommandQuoteArgument(arg, force = false) {
        if (arg.startsWith(`"`)) {
            return `'${arg}'`;
        }
        else if (arg.startsWith(`'`)) {
            return `"${arg}"`;
        }
        else if (arg.includes(" ") || force) {
            return arg.includes('"') ? `'${arg}'` : `"${arg}"`;
        }
        return arg;
    }
    let autocompleteMessage = null;
    let autocompleteLastQuery = null;
    let autocompleteLastTarget = null;
    let autocompleteLastResult = [];
    let autocompleteNextIndex = 0;
    function autocompleteClear() {
        if (autocompleteMessage) {
            autocompleteMessage.remove();
            autocompleteMessage = null;
        }
        autocompleteLastQuery = null;
        autocompleteLastTarget = null;
    }
    function autocompleteShow(header, options, highlight) {
        autocompleteClear();
        if (options.length > 0) {
            const res = document.createElement("div");
            res.innerText += `[${header}]\n`;
            for (let i = 0; i < options.length; i++) {
                const option = document.createElement("div");
                option.innerText = options[i];
                if (i === highlight) {
                    option.style.background = `#7e7eff54`;
                }
                res.appendChild(option);
            }
            autocompleteMessage = ChatRoomSendLocal(res, 10000);
        }
    }
    function RunCommand(msg) {
        autocompleteClear();
        const [command, args] = CommandParse(msg);
        const commandInfo = commands$1.get(command);
        if (!commandInfo) {
            ChatRoomSendLocal(`Unknown command "${command}"\n` +
                `To see list of valid commands use '.help'`, 15000);
            return false;
        }
        if (commandInfo.parse) {
            return commandInfo.callback(CommandParseArguments(args));
        }
        else {
            return commandInfo.callback(args);
        }
    }
    function RunWhisperCommand(msg, sender, respond) {
        const [command, args] = CommandParse(msg);
        const commandInfo = whisperCommands.get(command);
        if (!commandInfo) {
            respond(`Unknown command "${command}"\n` +
                `To see list of valid commands whisper '!help'`);
            return;
        }
        return commandInfo.callback(CommandParseArguments(args), sender, respond);
    }
    function CommandAutocomplete(msg) {
        msg = msg.trimStart();
        const [command, args] = CommandParse(msg);
        if (msg.length === command.length) {
            const prefixes = Array.from(commands$1.entries()).filter(c => c[1].description !== null && c[0].startsWith(command)).map(c => c[0] + " ");
            return prefixes.map(i => [i, i]);
        }
        const commandInfo = commands$1.get(command);
        if (commandInfo && commandInfo.autocomplete) {
            if (commandInfo.parse) {
                const argv = CommandParseArguments(args);
                if (CommandHasEmptyArgument(args)) {
                    argv.push("");
                }
                let lastOptions = commandInfo.autocomplete(argv);
                const fin = lastOptions.length === 1;
                if (lastOptions.length === 0) {
                    lastOptions = [argv[argv.length - 1]];
                }
                argv.pop();
                const needsQuotes = lastOptions.some(CommandArgumentNeedsQuotes);
                return lastOptions.map(i => [
                    `${command} ` +
                        argv
                            .map(a => CommandQuoteArgument(a))
                            .concat(needsQuotes ? CommandQuoteArgument(i, true) : i)
                            .join(" ") +
                        (fin ? " " : ""),
                    i,
                ]);
            }
            else {
                const possibleArgs = commandInfo.autocomplete(args);
                if (possibleArgs.length === 0) {
                    return [];
                }
                return possibleArgs.map(arg => [`${command} ${arg}`, arg]);
            }
        }
        return [];
    }
    function CommandAutocompleteCycle(msg) {
        if (autocompleteLastQuery === msg && autocompleteLastTarget === null && autocompleteNextIndex < autocompleteLastResult.length) {
            autocompleteShow("autocomplete hint", autocompleteLastResult.map(i => i[1]), autocompleteNextIndex);
            const res = autocompleteLastResult[autocompleteNextIndex][0].trim();
            autocompleteNextIndex = (autocompleteNextIndex + 1) % autocompleteLastResult.length;
            autocompleteLastQuery = res;
            return res;
        }
        autocompleteClear();
        autocompleteLastResult = CommandAutocomplete(msg).sort((a, b) => a[1].localeCompare(b[1]));
        if (autocompleteLastResult.length === 0) {
            return msg;
        }
        else if (autocompleteLastResult.length === 1) {
            return autocompleteLastResult[0][0];
        }
        const best = longestCommonPrefix(autocompleteLastResult.map(i => i[0]));
        autocompleteShow("autocomplete hint", autocompleteLastResult.map(i => i[1]));
        autocompleteLastQuery = best;
        autocompleteLastTarget = null;
        autocompleteNextIndex = 0;
        return best;
    }
    function WhisperCommandAutocomplete(msg, sender) {
        msg = msg.trimStart();
        const [command, args] = CommandParse(msg);
        if (msg.length === command.length) {
            const prefixes = Array.from(whisperCommands.entries()).filter(c => c[1].description !== null && c[0].startsWith(command)).map(c => c[0] + " ");
            return prefixes.map(i => [i, i]);
        }
        const commandInfo = whisperCommands.get(command);
        if (commandInfo && commandInfo.autocomplete) {
            const argv = CommandParseArguments(args);
            if (CommandHasEmptyArgument(args)) {
                argv.push("");
            }
            let lastOptions = commandInfo.autocomplete(argv, sender);
            const fin = lastOptions.length === 1;
            if (lastOptions.length === 0) {
                lastOptions = [argv[argv.length - 1]];
            }
            argv.pop();
            const needsQuotes = lastOptions.some(CommandArgumentNeedsQuotes);
            return lastOptions.map(i => [
                `${command} ` +
                    argv
                        .map(a => CommandQuoteArgument(a))
                        .concat(needsQuotes ? CommandQuoteArgument(i, true) : i)
                        .join(" ") +
                    (fin ? " " : ""),
                i,
            ]);
        }
        return [];
    }
    async function WhisperCommandAutocompleteCycle(chat) {
        const currentValue = chat.value;
        const currentTarget = ChatRoomTargetMemberNumber;
        if (currentTarget == null)
            return;
        if (autocompleteLastQuery === currentValue && autocompleteLastTarget === currentTarget && autocompleteNextIndex < autocompleteLastResult.length) {
            autocompleteShow("remote autocomplete hint", autocompleteLastResult.map(i => i[1]), autocompleteNextIndex);
            const res = autocompleteLastResult[autocompleteNextIndex][0].trim();
            autocompleteNextIndex = (autocompleteNextIndex + 1) % autocompleteLastResult.length;
            autocompleteLastQuery = res;
            autocompleteLastTarget = currentTarget;
            chat.value = res;
            return;
        }
        autocompleteClear();
        const queryResult = await sendQuery("commandHint", currentValue, currentTarget);
        if (chat.value !== currentValue || ChatRoomTargetMemberNumber !== currentTarget)
            return;
        if (!Array.isArray(queryResult) || !queryResult
            .every(i => Array.isArray(i) &&
            i.length === 2 &&
            typeof i[0] === "string" &&
            typeof i[1] === "string")) {
            return;
        }
        autocompleteLastResult = queryResult.sort((a, b) => a[1].localeCompare(b[1]));
        if (autocompleteLastResult.length === 0) {
            return;
        }
        else if (autocompleteLastResult.length === 1) {
            chat.value = autocompleteLastResult[0][0];
            return;
        }
        const best = longestCommonPrefix(autocompleteLastResult.map(i => i[0]));
        autocompleteShow("remote autocomplete hint", autocompleteLastResult.map(i => i[1]));
        autocompleteLastQuery = best;
        autocompleteLastTarget = currentTarget;
        autocompleteNextIndex = 0;
        chat.value = best;
    }
    function Command_fixExclamationMark(sender, text) {
        return sender.isPlayer() ? text.replace(/^!/gm, ".") : text;
    }
    function Command_pickAutocomplete(selector, options) {
        selector = selector.toLocaleLowerCase();
        return options.filter(o => o.toLocaleLowerCase().startsWith(selector));
    }
    function Command_selectCharacter(selector) {
        const characters = getAllCharactersInRoom();
        if (/^[0-9]+$/.test(selector)) {
            const MemberNumber = Number.parseInt(selector, 10);
            const target = characters.find(c => c.MemberNumber === MemberNumber);
            if (!target) {
                return `Player #${MemberNumber} not found in the room.`;
            }
            return target;
        }
        let targets = characters.filter(c => c.Name === selector || isValidNickname(c.Nickname) && c.Nickname === selector);
        if (targets.length === 0)
            targets = characters.filter(c => c.Name.toLowerCase() === selector.toLowerCase() || isValidNickname(c.Nickname) && c.Name.toLowerCase() === selector.toLowerCase());
        if (targets.length === 1) {
            return targets[0];
        }
        else if (targets.length === 0) {
            return `Player "${selector}" not found in the room.`;
        }
        else {
            return `Multiple players match "${selector}". Please use Member Number instead.`;
        }
    }
    function Command_selectCharacterMemberNumber(selector, allowNotPresent = true) {
        const character = Command_selectCharacter(selector);
        if (typeof character === "string" && allowNotPresent && /^[0-9]+$/.test(selector)) {
            return Number.parseInt(selector, 10);
        }
        return typeof character === "string" ? character : character.MemberNumber;
    }
    function Command_selectCharacterAutocomplete(selector) {
        const characters = getAllCharactersInRoom();
        if (/^[0-9]+$/.test(selector)) {
            return characters.map(c => { var _a; return (_a = c.MemberNumber) === null || _a === void 0 ? void 0 : _a.toString(10); }).filter(n => n != null && n.startsWith(selector));
        }
        return characters
            .flatMap(c => isValidNickname(c.Nickname) && c.Nickname.toLowerCase() !== c.Name.toLowerCase() ? [c.Nickname, c.Name] : [c.Name])
            .filter(n => n.toLocaleLowerCase().startsWith(selector.toLowerCase()));
    }
    function Command_selectWornItem(character, selector, filter = isBind) {
        const items = character.Character.Appearance.filter((i) => filter(i));
        let targets = items.filter(A => A.Asset.Group.Name.toLocaleLowerCase() === selector.toLocaleLowerCase());
        if (targets.length === 0)
            targets = items.filter(A => getVisibleGroupName(A.Asset.Group).toLocaleLowerCase() === selector.toLocaleLowerCase());
        if (targets.length === 0)
            targets = items.filter(A => A.Asset.Name.toLocaleLowerCase() === selector.toLocaleLowerCase());
        if (targets.length === 0)
            targets = items.filter(A => A.Asset.Description.toLocaleLowerCase() === selector.toLocaleLowerCase());
        if (targets.length === 1) {
            return targets[0];
        }
        else if (targets.length === 0) {
            return `Item "${selector}" not found on character ${character}. If your item(group) consists of more than one word, please put it in quotes, such as "lower leg".`;
        }
        else {
            return `Multiple items match, please use group name instead. (eg. arms)`;
        }
    }
    function Command_selectWornItemAutocomplete(character, selector, filter = isBind) {
        const items = character.Character.Appearance.filter((i) => filter(i));
        let possible = arrayUnique(items.map(A => getVisibleGroupName(A.Asset.Group))
            .concat(items.map(A => A.Asset.Description))).filter(i => i.toLocaleLowerCase().startsWith(selector.toLocaleLowerCase()));
        if (possible.length === 0) {
            possible = arrayUnique(items.map(A => A.Asset.Group.Name)
                .concat(items.map(A => A.Asset.Name))).filter(i => i.toLocaleLowerCase().startsWith(selector.toLocaleLowerCase()));
        }
        return possible;
    }
    function Command_selectGroup(selector, character, filter) {
        let targets = AssetGroup.filter(G => G.Name.toLocaleLowerCase() === selector.toLocaleLowerCase() && G.AllowCustomize && (!filter || filter(G)));
        if (targets.length === 0)
            targets = AssetGroup.filter(G => getVisibleGroupName(G).toLocaleLowerCase() === selector.toLocaleLowerCase() && (!filter || filter(G)));
        if (targets.length > 1) {
            return `Multiple groups match "${selector}", please report this as a bug.`;
        }
        else if (targets.length === 1) {
            return targets[0];
        }
        else if (character) {
            const item = Command_selectWornItem(character, selector, i => (!filter || filter(i.Asset.Group)));
            return typeof item === "string" ? item : item.Asset.Group;
        }
        else {
            return `Unknown group "${selector}".`;
        }
    }
    function Command_selectGroupAutocomplete(selector, character, filter) {
        const items = character ? character.Character.Appearance : [];
        let possible = arrayUnique(AssetGroup
            .filter(G => G.AllowCustomize && (!filter || filter(G)))
            .map(G => getVisibleGroupName(G))
            .concat(items
            .filter(A => !filter || filter(A.Asset.Group))
            .map(A => A.Asset.Description))).filter(i => i.toLocaleLowerCase().startsWith(selector.toLocaleLowerCase()));
        if (possible.length === 0) {
            possible = arrayUnique(AssetGroup
                .filter(G => G.AllowCustomize && (!filter || filter(G)))
                .map(G => G.Name)
                .concat(items
                .filter(A => !filter || filter(A.Asset.Group))
                .map(A => A.Asset.Name))).filter(i => i.toLocaleLowerCase().startsWith(selector.toLocaleLowerCase()));
        }
        return possible;
    }
    function Command_parseTime(selector) {
        const match = /^([0-9]+)([a-z]+)$/.exec(selector.toLocaleLowerCase());
        if (!match) {
            return `Unknown time format "${selector}", please use format 'number+unit' (e.g. 23h 30m)`;
        }
        const num = Number.parseInt(match[1], 10);
        const unit = match[2];
        if (["d", "day", "days"].includes(unit)) {
            return num * 24 * 60 * 60 * 1000;
        }
        else if (["h", "hour", "hours"].includes(unit)) {
            return num * 60 * 60 * 1000;
        }
        else if (["m", "min", "minute", "minutes"].includes(unit)) {
            return num * 60 * 1000;
        }
        else if (["s", "sec", "second", "seconds"].includes(unit)) {
            return num * 1000;
        }
        return `Unknown time unit "${unit}", please use one of:\n` +
            `d (day), h (hour), m (minute), s (second)`;
    }
    class ModuleCommands extends BaseModule {
        load() {
            hookFunction("ChatRoomFirstTimeHelp", 0, (args, next) => {
                next(args);
                CommandsShowFirstTimeHelp();
            });
            hookFunction("ChatRoomClearAllElements", 1, (args, next) => {
                firstTimeHelp = null;
                return next(args);
            });
            hookFunction("ChatRoomSendChat", 10, (args, next) => {
                const chat = document.getElementById("InputChat");
                let substituteBack = null;
                if (chat && !firstTimeInit) {
                    const msg = chat.value.trim();
                    if (/^[.\s]*$/.test(msg)) {
                    }
                    else if (msg.startsWith("..")) {
                        chat.value = substituteBack = msg.substr(1);
                    }
                    else if (msg.startsWith(".")) {
                        if (RunCommand(msg.substr(1))) {
                            ChatRoomLastMessage.push(msg);
                            ChatRoomLastMessageIndex = ChatRoomLastMessage.length;
                            chat.value = "";
                        }
                        return;
                    }
                    autocompleteClear();
                }
                const result = next(args);
                if (ChatRoomLastMessage.length > 0 && ChatRoomLastMessage[ChatRoomLastMessage.length - 1] === substituteBack) {
                    ChatRoomLastMessage[ChatRoomLastMessage.length - 1] = "." + ChatRoomLastMessage[ChatRoomLastMessage.length - 1];
                }
                return result;
            });
            hookFunction("ChatRoomKeyDown", 10, (args, next) => {
                var _a, _b;
                const chat = document.getElementById("InputChat");
                if (KeyPress === 9 &&
                    chat &&
                    chat.value.startsWith(".") &&
                    !chat.value.startsWith("..") &&
                    !firstTimeInit) {
                    const e = (_a = args[0]) !== null && _a !== void 0 ? _a : event;
                    e === null || e === void 0 ? void 0 : e.preventDefault();
                    e === null || e === void 0 ? void 0 : e.stopImmediatePropagation();
                    chat.value = "." + CommandAutocompleteCycle(chat.value.substr(1));
                }
                else if (KeyPress === 9 &&
                    ChatRoomTargetMemberNumber != null &&
                    chat &&
                    chat.value.startsWith("!") &&
                    !chat.value.startsWith("!!") &&
                    !firstTimeInit) {
                    const e = (_b = args[0]) !== null && _b !== void 0 ? _b : event;
                    e === null || e === void 0 ? void 0 : e.preventDefault();
                    e === null || e === void 0 ? void 0 : e.stopImmediatePropagation();
                    WhisperCommandAutocompleteCycle(chat)
                        .catch(() => { });
                }
                else {
                    return next(args);
                }
            });
            hookFunction("ChatRoomMessage", 9, (args, next) => {
                const data = args[0];
                const sender = typeof data.Sender === "number" && getChatroomCharacter(data.Sender);
                if ((data === null || data === void 0 ? void 0 : data.Type) === "Whisper" &&
                    typeof data.Content === "string" &&
                    !firstTimeInit &&
                    sender &&
                    !sender.isPlayer() &&
                    sender.hasAccessToPlayer()) {
                    const orig = Array.isArray(data.Dictionary) && data.Dictionary.find((i) => isObject$1(i) && i.Tag === "BCX_ORIGINAL_MESSAGE" && typeof i.Text === "string");
                    const text = (orig && orig.Text) || data.Content;
                    if (data.Content.startsWith("!") &&
                        !data.Content.startsWith("!!")) {
                        console.debug(`BCX: Console command from ${sender}: ${text}`, data);
                        RunWhisperCommand(text.substring(1), sender, (msg) => {
                            ServerSend("ChatRoomChat", {
                                Content: `[BCX]\n${msg}`,
                                Type: "Whisper",
                                Target: sender.MemberNumber,
                            });
                        });
                        return;
                    }
                }
                return next(args);
            });
            hookFunction("PropertyAutoPunishParseMessage", 6, (args, next) => {
                const msg = args[1];
                if (typeof msg === "string" && msg.startsWith(".") && !msg.startsWith(".."))
                    return false;
                return next(args);
            });
            queryHandlers.commandHint = (sender, data) => {
                if (typeof data !== "string" || !data.startsWith("!") || data.startsWith("!!")) {
                    return undefined;
                }
                return WhisperCommandAutocomplete(data.substring(1), sender)
                    .map(i => ["!" + i[0], i[1]]);
            };
            registerCommand$1("hidden", "help", "- Display this help [alias: . ]", (arg) => {
                CommandsCompleteFirstTimeHelp();
                arg = arg.trim().toLocaleLowerCase();
                if (!arg) {
                    ChatRoomSendLocal(`BCX commands are organized into categories\n` +
                        `To view help texts for all commands in a category, use '.help <category>' (e.g. '.help utility')\n` +
                        `\n` +
                        `List of categories:\n` +
                        COMMAND_CATEGORIES_VISIBLE.join("\n"));
                }
                else {
                    const category = COMMAND_CATEGORIES_VISIBLE.find(c => c.toLocaleLowerCase() === arg);
                    if (category) {
                        ChatRoomSendLocal(`Available commands in category ${category}:\n` +
                            Array.from(commands$1.entries())
                                .filter(c => c[1].description !== null && c[1].category === category)
                                .map(c => `.${c[0]}` + (c[1].description ? ` ${c[1].description}` : ""))
                                .sort()
                                .join("\n"));
                    }
                    else {
                        ChatRoomSendLocal(`Unknown category '${arg}'` +
                            `\n` +
                            `List of available categories:\n` +
                            COMMAND_CATEGORIES_VISIBLE.join("\n"));
                    }
                }
                return true;
            }, (args) => {
                return Command_pickAutocomplete(args.trim(), COMMAND_CATEGORIES_VISIBLE);
            });
            aliasCommand("help", "?");
            registerCommand$1("utility", "action", "- Send custom (action) [alias: .a ]", (msg) => {
                const blockRule = RulesGetRuleState("block_action");
                if (blockRule.isEnforced) {
                    blockRule.triggerAttempt();
                    return false;
                }
                else if (blockRule.inEffect) {
                    blockRule.trigger();
                }
                ChatRoomActionMessage(msg);
                return true;
            });
            aliasCommand("action", "a");
            registerWhisperCommand("hidden", "help", "- Display this help", (argv, sender, respond) => {
                const result = Array.from(whisperCommands.entries())
                    .filter(c => c[1].description !== null)
                    .map(c => `!${c[0]}` + (c[1].description ? ` ${c[1].description}` : ""))
                    .sort();
                let response = `Available commands:`;
                while (result.length > 0) {
                    const concat = response + "\n" + result[0];
                    if (concat.length > 990) {
                        respond(response);
                        response = result[0];
                    }
                    else {
                        response = concat;
                    }
                    result.shift();
                }
                respond(response);
                return true;
            }, null, false);
        }
        unload() {
            commands$1.clear();
        }
    }

    const CONDITIONS_CHECK_INTERVAL = 2000;
    const schema_ConditionsConditionRequirements = z.lazy(() => z.object({
        orLogic: z.literal(true).optional(),
        room: z.object({
            type: z.enum(["public", "private"]),
            inverted: z.literal(true).optional(),
        }).optional(),
        roomName: z.object({
            name: z.string(),
            inverted: z.literal(true).optional(),
        }).optional(),
        role: z.object({
            role: z.nativeEnum(AccessLevel),
            inverted: z.literal(true).optional(),
        }).optional(),
        player: z.object({
            memberNumber: z.number(),
            inverted: z.literal(true).optional(),
        }).optional(),
    }));
    function guard_ConditionsConditionRequirements(data) {
        return isObject$1(data) &&
            (data.orLogic === undefined ||
                data.orLogic === true) &&
            (data.room === undefined ||
                isObject$1(data.room) &&
                    (data.room.inverted === undefined || data.room.inverted === true) &&
                    (data.room.type === "public" || data.room.type === "private")) &&
            (data.roomName === undefined ||
                isObject$1(data.roomName) &&
                    (data.roomName.inverted === undefined || data.roomName.inverted === true) &&
                    typeof data.roomName.name === "string") &&
            (data.role === undefined ||
                isObject$1(data.role) &&
                    (data.role.inverted === undefined || data.role.inverted === true) &&
                    typeof data.role.role === "number" &&
                    AccessLevel[data.role.role] !== undefined) &&
            (data.player === undefined ||
                isObject$1(data.player) &&
                    (data.player.inverted === undefined || data.player.inverted === true) &&
                    typeof data.player.memberNumber === "number");
    }
    function guard_ConditionsConditionPublicData(category, condition, data) {
        const d = data;
        const handler = conditionHandlers.get(category);
        if (!handler)
            return false;
        return handler.loadValidateConditionKey(condition) &&
            isObject$1(d) &&
            typeof d.active === "boolean" &&
            typeof d.favorite === "boolean" &&
            (d.timer === null || typeof d.timer === "number") &&
            typeof d.timerRemove === "boolean" &&
            (d.requirements === null || guard_ConditionsConditionRequirements(d.requirements)) &&
            (d.addedBy === undefined || Number.isInteger(d.addedBy)) &&
            handler.validatePublicData(condition, d.data);
    }
    function guard_ConditionsCategoryPublicData(category, data, allowInvalidConditionRemoval = false) {
        const d = data;
        const handler = conditionHandlers.get(category);
        if (!handler)
            return false;
        return isObject$1(d) &&
            typeof d.access_normal === "boolean" &&
            typeof d.access_limited === "boolean" &&
            typeof d.access_configure === "boolean" &&
            typeof d.access_changeLimits === "boolean" &&
            (d.highestRoleInRoom === null ||
                (typeof d.highestRoleInRoom === "number" &&
                    AccessLevel[d.highestRoleInRoom] !== undefined)) &&
            isObject$1(d.conditions) &&
            Object.entries(d.conditions).every(([condition, conditionData]) => {
                const res = guard_ConditionsConditionPublicData(category, condition, conditionData);
                if (!res && allowInvalidConditionRemoval) {
                    console.warn(`BCX: Removing invalid ${condition}:${category} condition from public data`, conditionData);
                    delete d.conditions[condition];
                    return true;
                }
                return res;
            }) &&
            (d.timer === null || typeof d.timer === "number") &&
            typeof d.timerRemove === "boolean" &&
            handler.validateCategorySpecificGlobalData(d.data) &&
            guard_ConditionsConditionRequirements(d.requirements) &&
            isObject$1(d.limits) &&
            Object.entries(d.limits).every(([condition, limit]) => limit === undefined || typeof limit === "number" && ConditionsLimit[limit] !== undefined);
    }
    const conditionHandlers = new Map();
    function ConditionsRegisterCategory(category, handler) {
        if (moduleInitPhase !== ModuleInitPhase.init) {
            throw new Error("Conditions categories can be registered only during init");
        }
        if (conditionHandlers.has(category)) {
            throw new Error(`Conditions categories "${category}" already defined!`);
        }
        conditionHandlers.set(category, handler);
        if (handler.permission_configure != null && handler.currentExportImport) {
            const currentExportImport = handler.currentExportImport;
            ExportImportRegisterCategory({
                category: `${category}Current`,
                name: `${MODULE_NAMES[handler.category]}`,
                module: handler.category,
                export: () => {
                    const categoryConfig = ConditionsGetCategoryConfigurableData(category);
                    const conditionsData = ConditionsGetCategoryData(category).conditions;
                    const conditions = {};
                    for (const [condition, data] of Object.entries(conditionsData)) {
                        const publicData = ConditionsMakeConditionPublicData(handler, condition, data, null);
                        conditions[condition] = {
                            ...pick(publicData, "active", "timer", "timerRemove", "requirements", "favorite"),
                            data: currentExportImport.export(condition, data.data),
                        };
                    }
                    return {
                        categoryConfig,
                        conditions,
                    };
                },
                import: (data, character) => {
                    let res = "";
                    if (!ConditionsCategoryUpdate(category, data.categoryConfig, character)) {
                        res += `Failed to set global config!\n`;
                    }
                    const conditionsData = ConditionsGetCategoryData(category).conditions;
                    for (const condition of Object.keys(conditionsData)) {
                        if (data.conditions[condition] == null) {
                            const removeResult = currentExportImport.importRemove(condition, character);
                            if (removeResult !== true) {
                                return res
                                    + `Failed to remove ${handler.commandConditionSelectorHelp} "${condition}": ${removeResult}\n`
                                    + `Failed!\n`;
                            }
                        }
                    }
                    for (const [c, conditionData] of Object.entries(data.conditions)) {
                        const condition = c;
                        if (conditionData == null)
                            continue;
                        if (!handler.loadValidateConditionKey(condition)) {
                            res += `Skipped unknown ${handler.commandConditionSelectorHelp}: "${condition}"\n`;
                            continue;
                        }
                        const limit = ConditionsGetConditionLimit(category, condition);
                        if (limit === ConditionsLimit.blocked) {
                            res += `Skipped blocked ${handler.commandConditionSelectorHelp} "${condition}"\n`;
                            continue;
                        }
                        const [result, resultData] = currentExportImport.import(condition, conditionData.data, character);
                        if (!result) {
                            res += `Failed to load ${handler.commandConditionSelectorHelp} "${condition}": ${resultData}\n`;
                            continue;
                        }
                        let oldData = cloneDeep(ConditionsGetCondition(category, condition));
                        if (!oldData || !isEqual(oldData.data, resultData)) {
                            ConditionsSetCondition(category, condition, resultData, character);
                            currentExportImport.importLog(condition, resultData, character);
                            oldData = cloneDeep(ConditionsGetCondition(category, condition));
                        }
                        if (!ConditionsUpdateBase(category, condition, conditionData)) {
                            res += `Failed to load ${handler.commandConditionSelectorHelp} "${condition}": Error updating base data\n`;
                            continue;
                        }
                        const newData = ConditionsGetCondition(category, condition);
                        if (oldData && newData && character) {
                            handler.logConditionUpdate(condition, character, ConditionsMakeConditionPublicData(handler, condition, newData, null), ConditionsMakeConditionPublicData(handler, condition, oldData, null));
                        }
                    }
                    return res + `Done!`;
                },
                importPermissions: [handler.permission_configure, handler.permission_normal, handler.permission_limited],
                importValidator: z.object({
                    categoryConfig: z.object({
                        requirements: schema_ConditionsConditionRequirements,
                        timer: z.number().nullable(),
                        timerRemove: z.boolean(),
                        data: z.custom((data) => handler.validateCategorySpecificGlobalData(data)),
                    }),
                    conditions: z.record(z.object({
                        active: z.boolean(),
                        data: z.unknown().optional(),
                        timer: z.number().nullable(),
                        timerRemove: z.boolean(),
                        requirements: schema_ConditionsConditionRequirements.nullable(),
                        favorite: z.boolean(),
                    })),
                }),
            });
        }
        ExportImportRegisterCategory({
            category: `${category}Limits`,
            name: `${MODULE_NAMES[handler.category]} - Limits`,
            module: handler.category,
            export: () => {
                const data = ConditionsGetCategoryData(category);
                return data.limits;
            },
            import: (data, character) => {
                let res = "";
                for (const [k, v] of Object.entries(data)) {
                    if (v == null)
                        continue;
                    if (!handler.loadValidateConditionKey(k)) {
                        res += `Skipped unknown ${handler.commandConditionSelectorHelp}: "${k}"\n`;
                        continue;
                    }
                    if (!ConditionsSetLimit(category, k, v, character)) {
                        res += `Failed to set limit for "${k}"\n`;
                    }
                }
                return res + `Done!`;
            },
            importPermissions: [handler.permission_changeLimits],
            importValidator: z.record(z.nativeEnum(ConditionsLimit)),
        });
    }
    function ConditionsGetCategoryHandler(category) {
        const handler = conditionHandlers.get(category);
        if (!handler) {
            throw new Error(`No handler for conditions category ${category}`);
        }
        return handler;
    }
    function ConditionsGetCategoryEnabled(category) {
        return moduleIsEnabled(ConditionsGetCategoryHandler(category).category);
    }
    function ConditionsGetCategoryData(category) {
        var _a;
        if (!conditionHandlers.has(category)) {
            throw new Error(`Attempt to get unknown conditions category data ${category}`);
        }
        const data = (_a = modStorage.conditions) === null || _a === void 0 ? void 0 : _a[category];
        if (!data) {
            throw new Error(`Attempt to get data for uninitialized category ${category}`);
        }
        return data;
    }
    function ConditionsMakeConditionPublicData(handler, condition, conditionData, requester) {
        var _a, _b, _c;
        const res = {
            active: conditionData.active,
            data: handler.makePublicData(condition, conditionData),
            timer: (_a = conditionData.timer) !== null && _a !== void 0 ? _a : null,
            timerRemove: (_b = conditionData.timerRemove) !== null && _b !== void 0 ? _b : false,
            requirements: conditionData.requirements ? cloneDeep(conditionData.requirements) : null,
            favorite: (_c = conditionData.favorite) !== null && _c !== void 0 ? _c : false,
        };
        if (requester === null || handler.permission_viewOriginator != null && checkPermissionAccess(handler.permission_viewOriginator, requester)) {
            res.addedBy = conditionData.addedBy;
        }
        return res;
    }
    function ConditionsGetCategoryConfigurableData(category) {
        var _a, _b;
        const data = ConditionsGetCategoryData(category);
        const res = {
            timer: (_a = data.timer) !== null && _a !== void 0 ? _a : null,
            timerRemove: (_b = data.timerRemove) !== null && _b !== void 0 ? _b : false,
            data: cloneDeep(data.data),
            requirements: cloneDeep(data.requirements),
        };
        return res;
    }
    function ConditionsGetCategoryPublicData(category, requester) {
        const handler = ConditionsGetCategoryHandler(category);
        const data = ConditionsGetCategoryData(category);
        const res = {
            access_normal: checkPermissionAccess(handler.permission_normal, requester),
            access_limited: checkPermissionAccess(handler.permission_limited, requester),
            access_configure: handler.permission_configure != null && checkPermissionAccess(handler.permission_configure, requester),
            access_changeLimits: checkPermissionAccess(handler.permission_changeLimits, requester),
            highestRoleInRoom: getHighestRoleInRoom(),
            conditions: {},
            ...ConditionsGetCategoryConfigurableData(category),
            limits: {
                ...handler.getDefaultLimits(),
                ...data.limits,
            },
        };
        for (const [condition, conditionData] of Object.entries(data.conditions)) {
            res.conditions[condition] = ConditionsMakeConditionPublicData(handler, condition, conditionData, requester);
        }
        return res;
    }
    function ConditionsGetCondition(category, condition) {
        if (!ConditionsGetCategoryEnabled(category))
            return undefined;
        return ConditionsGetCategoryData(category).conditions[condition];
    }
    function ConditionsIsConditionInEffect(category, condition) {
        var _a;
        if (!ConditionsGetCategoryEnabled(category))
            return false;
        const categoryData = ConditionsGetCategoryData(category);
        const conditionData = categoryData.conditions[condition];
        if (!conditionData)
            return false;
        if (conditionData.timer !== undefined && conditionData.timer <= Date.now())
            return false;
        if (!conditionData.active)
            return false;
        const requirements = (_a = conditionData.requirements) !== null && _a !== void 0 ? _a : categoryData.requirements;
        if (!ConditionsEvaluateRequirements(requirements))
            return false;
        return true;
    }
    function ConditionsSetCondition(category, condition, data, source) {
        const handler = ConditionsGetCategoryHandler(category);
        if (!moduleIsEnabled(handler.category))
            return;
        const categoryData = ConditionsGetCategoryData(category);
        const existing = categoryData.conditions[condition];
        if (existing) {
            existing.data = data;
        }
        else {
            const res = {
                active: true,
                lastActive: false,
                timer: categoryData.timer !== undefined ? Date.now() + categoryData.timer : undefined,
                timerRemove: categoryData.timerRemove,
                data,
            };
            if (source) {
                res.addedBy = source.MemberNumber;
            }
            categoryData.conditions[condition] = res;
        }
        modStorageSync();
        notifyOfChange();
    }
    function ConditionsGetConditionLimit(category, condition) {
        var _a, _b;
        const handler = ConditionsGetCategoryHandler(category);
        if (!moduleIsEnabled(handler.category))
            return ConditionsLimit.blocked;
        const data = ConditionsGetCategoryData(category);
        return (_b = (_a = data.limits[condition]) !== null && _a !== void 0 ? _a : handler.getDefaultLimits()[condition]) !== null && _b !== void 0 ? _b : ConditionsLimit.normal;
    }
    function ConditionsCheckAccess(category, condition, character) {
        const limit = ConditionsGetConditionLimit(category, condition);
        if (limit === ConditionsLimit.blocked)
            return false;
        const handler = ConditionsGetCategoryHandler(category);
        return checkPermissionAccess(limit === ConditionsLimit.limited ? handler.permission_limited : handler.permission_normal, character);
    }
    function ConditionsRemoveCondition(category, conditions) {
        if (!ConditionsGetCategoryEnabled(category))
            return false;
        if (!Array.isArray(conditions)) {
            conditions = [conditions];
        }
        const categoryData = ConditionsGetCategoryData(category);
        const handler = ConditionsGetCategoryHandler(category);
        let changed = false;
        for (const condition of conditions) {
            if (categoryData.conditions[condition]) {
                handler.stateChangeHandler(condition, categoryData.conditions[condition], false);
                delete categoryData.conditions[condition];
                changed = true;
            }
        }
        if (changed) {
            modStorageSync();
            notifyOfChange();
        }
        return changed;
    }
    function ConditionsSetLimit(category, condition, limit, character) {
        var _a, _b;
        const handler = ConditionsGetCategoryHandler(category);
        if (!moduleIsEnabled(handler.category))
            return false;
        if (!handler.loadValidateConditionKey(condition)) {
            console.warn(`Attempt to set invalid condition limit ${category}:${condition}`);
            return false;
        }
        const data = ConditionsGetCategoryData(category);
        if (character && !checkPermissionAccess(handler.permission_changeLimits, character)) {
            return false;
        }
        const defaultLimit = (_a = handler.getDefaultLimits()[condition]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
        const oldLimit = (_b = data.limits[condition]) !== null && _b !== void 0 ? _b : defaultLimit;
        if (oldLimit === limit)
            return true;
        if (data.conditions[condition] !== undefined)
            return false;
        if (limit === defaultLimit) {
            delete data.limits[condition];
        }
        else {
            data.limits[condition] = limit;
        }
        if (character) {
            handler.logLimitChange(condition, character, limit, oldLimit);
        }
        notifyOfChange();
        modStorageSync();
        return true;
    }
    function ConditionsUpdateBase(category, condition, data) {
        const handler = ConditionsGetCategoryHandler(category);
        if (!moduleIsEnabled(handler.category))
            return false;
        const conditionData = ConditionsGetCondition(category, condition);
        if (!conditionData)
            return false;
        conditionData.active = data.active;
        if (data.favorite) {
            conditionData.favorite = true;
        }
        else {
            delete conditionData.favorite;
        }
        if (data.requirements) {
            conditionData.requirements = data.requirements;
            const requirements = conditionData.requirements;
            const hasAnyRequirement = !!(requirements.room || requirements.roomName || requirements.role || requirements.player);
            if (requirements.orLogic && !hasAnyRequirement) {
                delete requirements.orLogic;
            }
        }
        else {
            delete conditionData.requirements;
        }
        if (data.timer !== null) {
            conditionData.timer = data.timer;
        }
        else {
            delete conditionData.timer;
        }
        if (data.timerRemove && data.active) {
            conditionData.timerRemove = true;
        }
        else {
            delete conditionData.timerRemove;
        }
        notifyOfChange();
        modStorageSync();
        return true;
    }
    function ConditionsUpdate(category, condition, data, character) {
        const handler = ConditionsGetCategoryHandler(category);
        if (!moduleIsEnabled(handler.category))
            return false;
        if (character && !ConditionsCheckAccess(category, condition, character))
            return false;
        const conditionData = ConditionsGetCondition(category, condition);
        if (!conditionData)
            return false;
        const oldData = ConditionsMakeConditionPublicData(handler, condition, conditionData, character);
        if (!handler.updateCondition(condition, conditionData, data.data, character, data))
            return false;
        if (!ConditionsUpdateBase(category, condition, data))
            return false;
        if (character) {
            handler.logConditionUpdate(condition, character, data, oldData);
        }
        notifyOfChange();
        modStorageSync();
        return true;
    }
    function ConditionsUpdateMultiple(category, conditions, data, character) {
        const handler = ConditionsGetCategoryHandler(category);
        if (!moduleIsEnabled(handler.category))
            return false;
        let didChange = false;
        for (const condition of conditions) {
            const conditionData = ConditionsGetCondition(category, condition);
            if (!conditionData)
                continue;
            const mergedData = ConditionsMakeConditionPublicData(handler, condition, conditionData, character);
            let conditionHasChange = false;
            if (data.active !== undefined && data.active !== mergedData.active) {
                mergedData.active = data.active;
                conditionHasChange = true;
            }
            if (data.timer !== undefined && data.timer !== mergedData.timer) {
                mergedData.timer = data.timer;
                conditionHasChange = true;
            }
            if (data.timerRemove !== undefined && data.timerRemove !== mergedData.timerRemove) {
                mergedData.timerRemove = data.timerRemove;
                conditionHasChange = true;
            }
            if (data.requirements !== undefined && data.requirements !== mergedData.requirements) {
                mergedData.requirements = data.requirements;
                conditionHasChange = true;
            }
            if (data.favorite !== undefined && data.favorite !== mergedData.favorite) {
                mergedData.favorite = data.favorite;
                conditionHasChange = true;
            }
            if (conditionHasChange) {
                didChange = ConditionsUpdate(category, condition, mergedData, character) || didChange;
            }
        }
        return didChange;
    }
    function ConditionsCategoryUpdate(category, data, character) {
        const handler = ConditionsGetCategoryHandler(category);
        if (!moduleIsEnabled(handler.category))
            return false;
        if (character && (handler.permission_configure == null || !checkPermissionAccess(handler.permission_configure, character)))
            return false;
        const conditionData = ConditionsGetCategoryData(category);
        if (!conditionData)
            return false;
        const oldData = character && ConditionsGetCategoryPublicData(category, character);
        conditionData.requirements = data.requirements;
        const requirements = conditionData.requirements;
        const hasAnyRequirement = !!(requirements.room || requirements.roomName || requirements.role || requirements.player);
        if (requirements.orLogic && !hasAnyRequirement) {
            delete requirements.orLogic;
        }
        if (data.timer !== null) {
            conditionData.timer = data.timer;
        }
        else {
            delete conditionData.timer;
        }
        if (data.timerRemove) {
            conditionData.timerRemove = true;
        }
        else {
            delete conditionData.timerRemove;
        }
        conditionData.data = cloneDeep(data.data);
        if (character && oldData) {
            handler.logCategoryUpdate(character, data, oldData);
        }
        notifyOfChange();
        modStorageSync();
        return true;
    }
    function ConditionsEvaluateRequirements(requirements, highestRoleInRoom) {
        const inChatroom = ServerPlayerIsInChatRoom();
        const chatroomPrivate = inChatroom && ChatRoomData != null && ChatRoomData.Private;
        const results = [];
        if (requirements.room) {
            const res = inChatroom &&
                (requirements.room.type === "public" ? !chatroomPrivate : chatroomPrivate);
            results.push(requirements.room.inverted ? !res : res);
        }
        if (requirements.roomName) {
            const res = inChatroom &&
                ChatRoomData != null &&
                typeof ChatRoomData.Name === "string" &&
                ChatRoomData.Name.toLocaleLowerCase() === requirements.roomName.name.toLocaleLowerCase();
            results.push(requirements.roomName.inverted ? !res : res);
        }
        if (requirements.role) {
            if (highestRoleInRoom === undefined) {
                highestRoleInRoom = getHighestRoleInRoom();
            }
            const res = highestRoleInRoom != null && highestRoleInRoom <= requirements.role.role;
            results.push(requirements.role.inverted ? !res : res);
        }
        if (requirements.player) {
            const res = inChatroom &&
                getAllCharactersInRoom().some(c => c.MemberNumber === requirements.player.memberNumber);
            results.push(requirements.player.inverted ? !res : res);
        }
        if (results.length === 0)
            return true;
        else if (requirements.orLogic)
            return results.includes(true);
        else
            return !results.includes(false);
    }
    const ConditionsSubcommands = ["setactive", "triggers", "globaltriggers", "timer", "defaulttimer", "setlimit"];
    const ConditionsCommandTriggersKeywords = ["room", "roomname", "role", "player"];
    function ConditionsCommandProcessTriggers(triggers, argv, sender, respond) {
        const trigger = (argv[0] || "").toLocaleLowerCase();
        const keyword = (argv[1] || "").toLocaleLowerCase();
        if (keyword === "ignore" && argv.length !== 2) {
            respond(`Error:\n'${trigger} ignore' does not expect any extra arguments.`);
            return true;
        }
        if (!["is", "isnot", "with", "notwith"].includes(keyword)) {
            respond(`Error:\nUnknown setting '${keyword}'. please use one of: ${trigger === "room" || trigger === "roomname" ? "is, isnot" : "with, notwith"}`);
            return true;
        }
        if (argv.length !== 3) {
            respond(`Error:\n'${trigger} ${keyword} <value>' got too many arguments. Arguments with space need to be "quoted".`);
            return true;
        }
        const inverted = (keyword === "isnot" || keyword === "notwith") ? true : undefined;
        let value = argv[2];
        if (trigger === "room") {
            if (keyword === "ignore") {
                delete triggers.room;
                return false;
            }
            value = value.toLocaleLowerCase();
            if (value !== "public" && value !== "private") {
                respond(`Error:\nRoom can be either 'public' or 'private', got: '${value}'`);
                return true;
            }
            triggers.room = {
                type: value,
                inverted,
            };
        }
        else if (trigger === "roomname") {
            if (keyword === "ignore") {
                delete triggers.roomName;
                return false;
            }
            triggers.roomName = {
                name: value,
                inverted,
            };
        }
        else if (trigger === "role") {
            if (keyword === "ignore") {
                delete triggers.role;
                return false;
            }
            const level = AccessLevel[value.toLocaleLowerCase()];
            if (typeof level !== "number" || level === AccessLevel.self) {
                respond(`Error:\n` +
                    `'role ${keyword}' expects one of: clubowner, owner, lover, mistress, whitelist, friend, public; got: '${value.toLocaleLowerCase()}'`);
                return true;
            }
            triggers.role = {
                role: level,
                inverted,
            };
        }
        else if (trigger === "player") {
            if (keyword === "ignore") {
                delete triggers.player;
                return false;
            }
            const target = Command_selectCharacterMemberNumber(value, true);
            if (typeof target === "string") {
                respond(target);
                return true;
            }
            triggers.player = {
                memberNumber: target,
                inverted,
            };
        }
        return false;
    }
    function ConditionsCommandTriggersAutocomplete(argv, sender) {
        const trigger = (argv[0] || "").toLocaleLowerCase();
        if (argv.length < 2)
            return [];
        if (trigger === "room" && argv.length === 2) {
            return Command_pickAutocomplete(argv[1], ["ignore", "is", "isnot"]);
        }
        if (trigger === "room" && argv.length === 3) {
            return Command_pickAutocomplete(argv[2], ["public", "private"]);
        }
        if (trigger === "roomname" && argv.length === 2) {
            return Command_pickAutocomplete(argv[1], ["ignore", "is", "isnot"]);
        }
        if (trigger === "role" && argv.length === 2) {
            return Command_pickAutocomplete(argv[1], ["ignore", "with", "notwith"]);
        }
        if (trigger === "role" && argv.length === 3) {
            return Command_pickAutocomplete(argv[2], ["clubowner", "owner", "lover", "mistress", "whitelist", "friend", "public"]);
        }
        if (trigger === "player" && argv.length === 2) {
            return Command_pickAutocomplete(argv[1], ["ignore", "with", "notwith"]);
        }
        if (trigger === "player" && argv.length === 3) {
            return Command_selectCharacterAutocomplete(argv[2]);
        }
        return [];
    }
    function ConditionsRunSubcommand(category, argv, sender, respond) {
        const subcommand = (argv[0] || "").toLocaleLowerCase();
        if (!ConditionsSubcommands.includes(subcommand)) {
            throw new Error(`Subcomand "${subcommand}" passed to ConditionsRunSubcommand isn't valid ConditionsSubcommand`);
        }
        const handler = conditionHandlers.get(category);
        if (!handler) {
            throw new Error(`Attempt to run command for unknown conditions category ${category}`);
        }
        if (!moduleIsEnabled(handler.category)) {
            return respond(`The command failed to execute, because ${Player.Name} disabled her ${MODULE_NAMES[handler.category]} module.`);
        }
        const categoryData = ConditionsGetCategoryData(category);
        const categorySingular = category.slice(0, -1);
        const CSHelp = handler.commandConditionSelectorHelp;
        if (subcommand === "setactive") {
            const active = (argv[2] || "").toLocaleLowerCase();
            if (argv.length !== 3 || active !== "yes" && active !== "no") {
                return respond(`Usage:\nsetactive <${CSHelp}> <yes/no>`);
            }
            const [result, condition] = handler.parseConditionName(argv[1], Object.keys(categoryData.conditions));
            if (!result) {
                return respond(condition);
            }
            if (!categoryData.conditions[condition]) {
                return respond(`This ${categorySingular} doesn't exist`);
            }
            const conditionData = ConditionsMakeConditionPublicData(handler, condition, categoryData.conditions[condition], sender);
            conditionData.active = active === "yes";
            respond(ConditionsUpdate(category, condition, conditionData, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
        }
        else if (subcommand === "triggers") {
            const [result, condition] = handler.parseConditionName(argv[1] || "", Object.keys(categoryData.conditions));
            if (!result) {
                return respond(condition);
            }
            if (!categoryData.conditions[condition]) {
                return respond(`This ${categorySingular} doesn't exist`);
            }
            const conditionData = ConditionsMakeConditionPublicData(handler, condition, categoryData.conditions[condition], sender);
            const keyword = (argv[2] || "").toLocaleLowerCase();
            if (!keyword) {
                if (!conditionData.requirements) {
                    return respond(`Current status:\n` +
                        `Uses global ${category} trigger configuration`);
                }
                else {
                    const triggers = [];
                    const r = conditionData.requirements;
                    triggers.push(r.orLogic ? `Logic: OR (at least one)` : `Logic: AND (all of)`);
                    if (r.room) {
                        triggers.push(`When ${r.room.inverted ? "not in" : "in"} ${r.room.type} room`);
                    }
                    if (r.roomName) {
                        triggers.push(`When ${r.roomName.inverted ? "not in" : "in"} room named '${r.roomName.name}'`);
                    }
                    if (r.role) {
                        const role = capitalizeFirstLetter(AccessLevel[r.role.role]) + (r.role.role !== AccessLevel.clubowner ? " ↑" : "");
                        triggers.push(`When ${r.role.inverted ? "not in" : "in"} room with role '${role}'`);
                    }
                    if (r.player) {
                        const name = getCharacterName(r.player.memberNumber, null);
                        triggers.push(`When ${r.player.inverted ? "not in" : "in"} room with member '${r.player.memberNumber}'${name ? ` (${name})` : ""}`);
                    }
                    if (triggers.length > 1) {
                        return respond(`Current status:\n` +
                            `This ${categorySingular} will trigger under following conditions:\n` +
                            triggers.join("\n"));
                    }
                    else {
                        return respond(`Current status:\n` +
                            `No triggers are set. The ${categorySingular} will now always trigger, while it is active`);
                    }
                }
            }
            else if (keyword === "global") {
                const global = (argv[3] || "").toLocaleLowerCase();
                if (argv.length !== 4 || global !== "yes" && global !== "no") {
                    return respond(`Usage:\ntriggers <${CSHelp}> global <yes/no>`);
                }
                if (global === "yes") {
                    conditionData.requirements = null;
                }
                else if (!conditionData.requirements) {
                    conditionData.requirements = cloneDeep(categoryData.requirements);
                }
            }
            else if (keyword === "logic") {
                const logic = (argv[3] || "").toLocaleLowerCase();
                if (argv.length !== 4 || logic !== "or" && logic !== "and") {
                    return respond(`Usage:\ntriggers <${CSHelp}> logic <or/and>`);
                }
                if (!conditionData.requirements) {
                    return respond(`Cannot configure specific trigger while using global data. First use:\ntriggers <${CSHelp}> global no`);
                }
                if (logic === "or") {
                    conditionData.requirements.orLogic = true;
                }
                else {
                    delete conditionData.requirements.orLogic;
                }
            }
            else if (!ConditionsCommandTriggersKeywords.includes(keyword)) {
                return respond(`${keyword !== "help" ? `Unknown trigger '${keyword}'. ` : ""}List of possible 'triggers <${CSHelp}> *' options:\n` +
                    `global <yes/no> - Set the trigger condition of this ${categorySingular} to the global configuration\n` +
                    `logic <or/and>	- Set if the logic should be OR (at least one) or AND (all of) logic; default is AND\n` +
                    `room ignore - Remove the 'room type'-based trigger condition\n` +
                    `room <is/isnot> <public/private> - Add such a 'room type'-based trigger condition\n` +
                    `roomname ignore - Remove the 'room name'-based trigger condition\n` +
                    `roomname <is/isnot> <name> - Add such a 'room name'-based trigger condition\n` +
                    `role ignore - Remove the role-based trigger condition\n` +
                    `role <with/notwith> <role> - Add such a role-based trigger condition\n` +
                    `player ignore - Remove the person-based trigger condition\n` +
                    `player <with/notwith> <memberNumber> - Add such a person-based trigger condition\n\n` +
                    `To show currently set triggers, use just 'triggers <group>' without adding one of the above sub-commands.`);
            }
            else if (!conditionData.requirements) {
                return respond(`Cannot configure specific trigger while using global data. First use:\ntriggers <${CSHelp}> global no`);
            }
            else {
                if (ConditionsCommandProcessTriggers(conditionData.requirements, argv.slice(2), sender, respond))
                    return;
            }
            respond(ConditionsUpdate(category, condition, conditionData, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
        }
        else if (subcommand === "globaltriggers") {
            const configData = ConditionsGetCategoryPublicData(category, sender);
            if (!argv[1]) {
                const triggers = [];
                const r = configData.requirements;
                triggers.push(r.orLogic ? `Logic: OR (at least one)` : `Logic: AND (all of)`);
                if (r.room) {
                    triggers.push(`When ${r.room.inverted ? "not in" : "in"} ${r.room.type} room`);
                }
                if (r.roomName) {
                    triggers.push(`When ${r.roomName.inverted ? "not in" : "in"} room named '${r.roomName.name}'`);
                }
                if (r.role) {
                    const role = capitalizeFirstLetter(AccessLevel[r.role.role]) + (r.role.role !== AccessLevel.clubowner ? " ↑" : "");
                    triggers.push(`When ${r.role.inverted ? "not in" : "in"} room with role '${role}'`);
                }
                if (r.player) {
                    const name = getCharacterName(r.player.memberNumber, null);
                    triggers.push(`When ${r.player.inverted ? "not in" : "in"} room with member '${r.player.memberNumber}'${name ? ` (${name})` : ""}`);
                }
                if (triggers.length > 1) {
                    return respond(`Current status:\n` +
                        `Globally ${category} are set to trigger under following conditions:\n` +
                        triggers.join("\n"));
                }
                else {
                    return respond(`Current status:\n` +
                        `No triggers are set globally. ${capitalizeFirstLetter(category)} using global config will now always trigger, if they are active`);
                }
            }
            else if (argv[1].toLocaleLowerCase() === "logic") {
                const logic = (argv[2] || "").toLocaleLowerCase();
                if (argv.length !== 3 || logic !== "or" && logic !== "and") {
                    return respond(`Usage:\nglobaltriggers logic <or/and>`);
                }
                if (logic === "or") {
                    configData.requirements.orLogic = true;
                }
                else {
                    delete configData.requirements.orLogic;
                }
            }
            else if (!ConditionsCommandTriggersKeywords.includes(argv[1].toLocaleLowerCase())) {
                return respond(`${argv[1] !== "help" ? `Unknown trigger '${argv[1].toLocaleLowerCase()}'. ` : ""}List of possible 'globaltriggers *' options:\n` +
                    `logic <or/and>	- Set if the logic should be OR (at least one) or AND (all of) logic; default is AND\n` +
                    `room ignore - Remove the 'room type'-based trigger condition\n` +
                    `room <is/isnot> <public/private> - Add such a 'room type'-based trigger condition\n` +
                    `roomname ignore - Remove the 'room name'-based trigger condition\n` +
                    `roomname <is/isnot> <name> - Add such a 'room name'-based trigger condition\n` +
                    `role ignore - Remove the role-based trigger condition\n` +
                    `role <with/notwith> <role> - Add such a role-based trigger condition\n` +
                    `player ignore - Remove the person-based trigger condition\n` +
                    `player <with/notwith> <memberNumber> - Add such a person-based trigger condition\n\n` +
                    `To show currently set global triggers, use just 'globaltriggers' without anything behind.`);
            }
            else {
                if (ConditionsCommandProcessTriggers(configData.requirements, argv.slice(1), sender, respond))
                    return;
            }
            respond(ConditionsCategoryUpdate(category, configData, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
        }
        else if (subcommand === "timer") {
            const [result, condition] = handler.parseConditionName(argv[1] || "", Object.keys(categoryData.conditions));
            if (!result) {
                return respond(condition);
            }
            if (!categoryData.conditions[condition]) {
                return respond(`This ${categorySingular} doesn't exist`);
            }
            const keyword = (argv[2] || "").toLocaleLowerCase();
            if (keyword !== "set" && keyword !== "disable" && keyword !== "autoremove") {
                return respond(`Usage:\n` +
                    `timer <${CSHelp}> disable - Remove the timer and set lifetime to infinite\n` +
                    `timer <${CSHelp}> set <time> - Set timer to the given amount of days, hours, minutes or seconds (e.g. 23h 30m)\n` +
                    `timer <${CSHelp}> autoremove <yes/no> - Set if the ${categorySingular} is removed when the timer runs out or just disables itself`);
            }
            const conditionData = ConditionsMakeConditionPublicData(handler, condition, categoryData.conditions[condition], sender);
            if (keyword === "disable") {
                conditionData.timer = null;
                conditionData.timerRemove = false;
            }
            else if (keyword === "set") {
                let time = 0;
                for (const v of argv.slice(3)) {
                    const i = Command_parseTime(v);
                    if (typeof i === "string") {
                        return respond(i);
                    }
                    time += i;
                }
                conditionData.timer = Date.now() + time;
            }
            else if (keyword === "autoremove") {
                const autoremove = (argv[3] || "").toLocaleLowerCase();
                if (argv.length !== 4 || autoremove !== "yes" && autoremove !== "no") {
                    return respond(`Usage:\ntimer <${CSHelp}> autoremove <yes/no>`);
                }
                else if (!conditionData.active) {
                    return respond(`Timer is counting until ${categorySingular} becomes enabled, cannot use autoremove in this mode.`);
                }
                else if (conditionData.timer === null) {
                    return respond(`Timer is disabled on this ${categorySingular}. To use autoremove, first set timer`);
                }
                conditionData.timerRemove = autoremove === "yes";
            }
            respond(ConditionsUpdate(category, condition, conditionData, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
        }
        else if (subcommand === "defaulttimer") {
            const keyword = (argv[1] || "").toLocaleLowerCase();
            if (keyword !== "set" && keyword !== "disable" && keyword !== "autoremove") {
                return respond(`Usage:\n` +
                    `defaulttimer disable - Remove the timer and set lifetime to infinite\n` +
                    `defaulttimer set <time> - Set timer to the given amount of days, hours, minutes or seconds (e.g. 23h 30m)\n` +
                    `defaulttimer autoremove <yes/no> - Set if the ${categorySingular} is removed when the timer runs out or just disables itself`);
            }
            const configData = ConditionsGetCategoryPublicData(category, sender);
            if (keyword === "disable") {
                configData.timer = null;
                configData.timerRemove = false;
            }
            else if (keyword === "set") {
                let time = 0;
                for (const v of argv.slice(2)) {
                    const i = Command_parseTime(v);
                    if (typeof i === "string") {
                        return respond(i);
                    }
                    time += i;
                }
                configData.timer = time;
            }
            else if (keyword === "autoremove") {
                const autoremove = (argv[2] || "").toLocaleLowerCase();
                if (argv.length !== 3 || autoremove !== "yes" && autoremove !== "no") {
                    return respond(`Usage:\ndefaulttimer <${CSHelp}> autoremove <yes/no>`);
                }
                if (configData.timer === null) {
                    return respond(`Timer is disabled by default for ${category}. To use autoremove, first set timer`);
                }
                configData.timerRemove = autoremove === "yes";
            }
            respond(ConditionsCategoryUpdate(category, configData, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
        }
        else if (subcommand === "setlimit") {
            const [result, condition] = handler.parseConditionName(argv[1] || "", false);
            if (!result) {
                return respond(condition);
            }
            if (!handler.loadValidateConditionKey(condition)) {
                throw new Error("Parse name returned invalid condition key");
            }
            const keyword = (argv[2] || "").toLocaleLowerCase();
            if (keyword !== "normal" && keyword !== "limited" && keyword !== "blocked") {
                return respond(`Usage:\n` +
                    `setlimit <${CSHelp}> <normal/limited/blocked> - Set a limit on certain <${CSHelp}>`);
            }
            respond(ConditionsSetLimit(category, condition, ConditionsLimit[keyword], sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
        }
    }
    function ConditionsAutocompleteSubcommand(category, argv, sender) {
        const subcommand = (argv[0] || "").toLocaleLowerCase();
        if (!ConditionsSubcommands.includes(subcommand)) {
            throw new Error(`Subcomand "${subcommand}" passed to ConditionsAutocompleteSubcommand isn't valid ConditionsSubcommand`);
        }
        const handler = conditionHandlers.get(category);
        if (!handler) {
            throw new Error(`Attempt to autocomplete command for unknown conditions category ${category}`);
        }
        if (!moduleIsEnabled(handler.category))
            return [];
        const categoryData = ConditionsGetCategoryData(category);
        if (subcommand === "setactive") {
            if (argv.length === 2) {
                return handler.autocompleteConditionName(argv[1], Object.keys(categoryData.conditions));
            }
            else if (argv.length === 3) {
                return Command_pickAutocomplete(argv[2], ["yes", "no"]);
            }
        }
        else if (subcommand === "triggers") {
            if (argv.length === 2) {
                return handler.autocompleteConditionName(argv[1], Object.keys(categoryData.conditions));
            }
            const [result, condition] = handler.parseConditionName(argv[1] || "", Object.keys(categoryData.conditions));
            if (!result || !categoryData.conditions[condition]) {
                return [];
            }
            if (argv.length === 3) {
                return Command_pickAutocomplete(argv[2], ["global", "logic", ...ConditionsCommandTriggersKeywords]);
            }
            if (argv[2].toLocaleLowerCase() === "global") {
                return Command_pickAutocomplete(argv[3], ["yes", "no"]);
            }
            else if (argv[2].toLocaleLowerCase() === "logic") {
                return Command_pickAutocomplete(argv[3], ["and", "or"]);
            }
            else if (categoryData.conditions[condition].requirements && ConditionsCommandTriggersKeywords.includes(argv[2].toLocaleLowerCase())) {
                return ConditionsCommandTriggersAutocomplete(argv.slice(2), sender);
            }
        }
        else if (subcommand === "globaltriggers") {
            if (argv.length === 2) {
                return Command_pickAutocomplete(argv[1], ["logic", ...ConditionsCommandTriggersKeywords]);
            }
            else if (argv[1].toLocaleLowerCase() === "logic") {
                return Command_pickAutocomplete(argv[2], ["and", "or"]);
            }
            else if (ConditionsCommandTriggersKeywords.includes(argv[2].toLocaleLowerCase())) {
                return ConditionsCommandTriggersAutocomplete(argv.slice(1), sender);
            }
        }
        else if (subcommand === "timer") {
            if (argv.length === 2) {
                return handler.autocompleteConditionName(argv[1], Object.keys(categoryData.conditions));
            }
            else if (argv.length === 3) {
                return Command_pickAutocomplete(argv[2], ["set", "disable", "autoremove"]);
            }
            else if (argv.length === 4 && argv[2].toLocaleLowerCase() === "autoremove") {
                return Command_pickAutocomplete(argv[3], ["yes", "no"]);
            }
        }
        else if (subcommand === "defaulttimer") {
            if (argv.length === 2) {
                return Command_pickAutocomplete(argv[1], ["set", "disable", "autoremove"]);
            }
            else if (argv.length === 3 && argv[1].toLocaleLowerCase() === "autoremove") {
                return Command_pickAutocomplete(argv[2], ["yes", "no"]);
            }
        }
        else if (subcommand === "setlimit") {
            if (argv.length === 2) {
                return handler.autocompleteConditionName(argv[1], false);
            }
            else if (argv.length === 3) {
                return Command_pickAutocomplete(argv[2], ["normal", "limited", "blocked"]);
            }
        }
        return [];
    }
    class ModuleConditions extends BaseModule {
        constructor() {
            super(...arguments);
            this.timer = null;
        }
        load() {
            var _a;
            if (!isObject$1(modStorage.conditions)) {
                modStorage.conditions = {};
            }
            if (modStorage.cursedItems) {
                const curses = modStorage.conditions.curses = {
                    conditions: {},
                    limits: {},
                    requirements: {},
                    data: {
                        itemRemove: false,
                    },
                };
                for (const [group, data] of Object.entries(modStorage.cursedItems)) {
                    curses.conditions[group] = {
                        active: true,
                        lastActive: false,
                        data,
                    };
                }
                delete modStorage.cursedItems;
            }
            for (const key of Object.keys(modStorage.conditions)) {
                const handler = conditionHandlers.get(key);
                if (!handler || !moduleIsEnabled(handler.category)) {
                    console.debug(`BCX: Removing unknown or disabled conditions category ${key}`);
                    delete modStorage.conditions[key];
                    continue;
                }
                const data = modStorage.conditions[key];
                if (!isObject$1(data) || !isObject$1(data.conditions)) {
                    console.warn(`BCX: Removing category ${key} with invalid data`);
                    delete modStorage.conditions[key];
                    continue;
                }
                if (data.timer !== undefined && typeof data.timer !== "number") {
                    console.warn(`BCX: Removing category ${key} invalid timer`, data.timer);
                    delete data.timer;
                }
                if (data.timerRemove !== undefined && data.timerRemove !== true) {
                    console.warn(`BCX: Removing category ${key} invalid timerRemove`, data.timerRemove);
                    delete data.timerRemove;
                }
                if (!isObject$1(data.limits)) {
                    console.warn(`BCX: Resetting category ${key} limits with invalid data`);
                    data.limits = {};
                }
                for (const [condition, limitValue] of Object.entries(data.limits)) {
                    if (!handler.loadValidateConditionKey(condition)) {
                        console.warn(`BCX: Unknown condition ${key}:${condition} limit, removing it`);
                        delete data.limits[condition];
                    }
                    else if (typeof limitValue !== "number" ||
                        limitValue === ((_a = handler.getDefaultLimits()[condition]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal) ||
                        ConditionsLimit[limitValue] === undefined) {
                        console.warn(`BCX: Bad condition ${key}:${condition} limit value, removing it`, limitValue);
                        delete data.limits[condition];
                    }
                }
                if (!guard_ConditionsConditionRequirements(data.requirements)) {
                    console.warn(`BCX: Resetting category ${key} requirements with invalid data`);
                    data.requirements = {};
                }
                data.data = handler.loadCategorySpecificGlobalData(data.data);
                for (const [condition, conditiondata] of Object.entries(data.conditions)) {
                    if (!handler.loadValidateConditionKey(condition)) {
                        console.warn(`BCX: Unknown condition ${key}:${condition}, removing it`);
                        delete data.conditions[condition];
                        continue;
                    }
                    else if (!handler.loadValidateCondition(condition, conditiondata)) {
                        delete data.conditions[condition];
                        continue;
                    }
                    else if (typeof conditiondata.active !== "boolean" ||
                        conditiondata.requirements !== undefined && !guard_ConditionsConditionRequirements(conditiondata.requirements) ||
                        conditiondata.timer !== undefined && typeof conditiondata.timer !== "number" ||
                        conditiondata.timerRemove !== undefined && conditiondata.timerRemove !== true ||
                        conditiondata.favorite !== undefined && conditiondata.favorite !== true) {
                        console.warn(`BCX: Condition ${key}:${condition} has bad data, removing it`);
                        delete data.conditions[condition];
                        continue;
                    }
                    else if (ConditionsGetConditionLimit(key, condition) === ConditionsLimit.blocked) {
                        console.warn(`BCX: Condition ${key}:${condition} became blocked while active, removing it`);
                        delete data.conditions[condition];
                        continue;
                    }
                    if (conditiondata.timerRemove && !conditiondata.active) {
                        console.warn(`BCX: Condition ${key}:${condition} had timerRemove while inactive, cleaning up`);
                        delete conditiondata.timerRemove;
                    }
                    if (typeof conditiondata.lastActive !== "boolean") {
                        console.warn(`BCX: Condition ${key}:${condition} missing lastActive, adding`);
                        conditiondata.lastActive = false;
                    }
                    if (conditiondata.addedBy !== undefined && !Number.isInteger(conditiondata.addedBy)) {
                        console.warn(`BCX: Condition ${key}:${condition} bad addedBy, cleaning up`, conditiondata.addedBy);
                        delete conditiondata.addedBy;
                    }
                }
            }
            for (const [key, handler] of conditionHandlers.entries()) {
                if (moduleIsEnabled(handler.category) && !isObject$1(modStorage.conditions[key])) {
                    console.debug(`BCX: Adding missing conditions category ${key}`);
                    modStorage.conditions[key] = {
                        conditions: {},
                        limits: {},
                        requirements: {},
                        data: handler.loadCategorySpecificGlobalData(undefined),
                    };
                }
            }
            queryHandlers.conditionsGet = (sender, data) => {
                if (typeof data === "string" && conditionHandlers.has(data) && ConditionsGetCategoryEnabled(data)) {
                    return ConditionsGetCategoryPublicData(data, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.conditionSetLimit = (sender, data) => {
                if (isObject$1(data) &&
                    typeof data.category === "string" &&
                    conditionHandlers.has(data.category) &&
                    typeof data.condition === "string" &&
                    typeof data.limit === "number" &&
                    ConditionsLimit[data.limit] !== undefined) {
                    return ConditionsSetLimit(data.category, data.condition, data.limit, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.conditionUpdate = (sender, data) => {
                if (isObject$1(data) &&
                    typeof data.category === "string" &&
                    conditionHandlers.has(data.category) &&
                    typeof data.condition === "string" &&
                    guard_ConditionsConditionPublicData(data.category, data.condition, data.data)) {
                    return ConditionsUpdate(data.category, data.condition, data.data, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.conditionUpdateMultiple = (sender, data) => {
                if (isObject$1(data) &&
                    typeof data.category === "string" &&
                    conditionHandlers.has(data.category) &&
                    Array.isArray(data.conditions) &&
                    data.conditions.every(c => { var _a; return typeof c === "string" && ((_a = conditionHandlers.get(data.category)) === null || _a === void 0 ? void 0 : _a.loadValidateConditionKey(c)); }) &&
                    isObject$1(data.data) &&
                    (data.data.active === undefined || typeof data.data.active === "boolean") &&
                    (data.data.timer === undefined || data.data.timer === null || typeof data.data.timer === "number") &&
                    (data.data.timerRemove === undefined || typeof data.data.timerRemove === "boolean") &&
                    (data.data.requirements === undefined || data.data.requirements === null || guard_ConditionsConditionRequirements(data.data.requirements)) &&
                    (data.data.favorite === undefined || typeof data.data.favorite === "boolean")) {
                    return ConditionsUpdateMultiple(data.category, data.conditions, data.data, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.conditionCategoryUpdate = (sender, data) => {
                if (isObject$1(data) &&
                    typeof data.category === "string" &&
                    conditionHandlers.has(data.category) &&
                    isObject$1(data.data) &&
                    (data.data.timer === null || typeof data.data.timer === "number") &&
                    typeof data.data.timerRemove === "boolean" &&
                    guard_ConditionsConditionRequirements(data.data.requirements)) {
                    return ConditionsCategoryUpdate(data.category, data.data, sender);
                }
                else {
                    return undefined;
                }
            };
        }
        run() {
            this.timer = BCX_setInterval(() => this.conditionsTick(), CONDITIONS_CHECK_INTERVAL);
        }
        unload() {
            if (this.timer !== null) {
                clearInterval(this.timer);
                this.timer = null;
            }
        }
        reload() {
            this.unload();
            this.load();
            this.run();
        }
        conditionsTick() {
            var _a, _b;
            if (!ServerIsConnected || !modStorage.conditions)
                return;
            let dataChanged = false;
            const now = Date.now();
            for (const [category, handler] of conditionHandlers.entries()) {
                const categoryData = modStorage.conditions[category];
                if (!moduleIsEnabled(handler.category) || !categoryData)
                    continue;
                for (const [conditionName, conditionData] of Object.entries(categoryData.conditions)) {
                    if (conditionData.timer !== undefined && conditionData.timer <= now) {
                        if (conditionData.timerRemove && conditionData.active) {
                            ConditionsRemoveCondition(category, conditionName);
                            return;
                        }
                        else {
                            delete conditionData.timer;
                            delete conditionData.timerRemove;
                            conditionData.active = !conditionData.active;
                            dataChanged = true;
                        }
                    }
                    const resolvedActive = conditionData.active && ConditionsEvaluateRequirements((_a = conditionData.requirements) !== null && _a !== void 0 ? _a : categoryData.requirements);
                    if (resolvedActive !== conditionData.lastActive) {
                        conditionData.lastActive = resolvedActive;
                        dataChanged = true;
                        const copyChange = cloneDeep(conditionData);
                        handler.stateChangeHandler(conditionName, conditionData, resolvedActive);
                        if (!isEqual(copyChange, conditionData)) {
                            dataChanged = true;
                        }
                    }
                    if (!resolvedActive)
                        continue;
                    const copy = cloneDeep(conditionData);
                    handler.tickHandler(conditionName, conditionData);
                    if (!isEqual(copy, conditionData)) {
                        dataChanged = true;
                    }
                }
                (_b = handler.afterTickHandler) === null || _b === void 0 ? void 0 : _b.call(handler);
            }
            if (dataChanged) {
                modStorageSync();
                notifyOfChange();
            }
        }
    }

    const MAX_STACK_SIZE = 15;
    let firstError = true;
    let lastReceivedMessageType = "";
    let lastReceivedMessageTime = 0;
    let lastSentMessageType = "";
    let lastSentMessageTime = 0;
    let logServerMessages = false;
    function debugSetLogServerMessages(value) {
        logServerMessages = value;
    }
    function debugGenerateReport(includeBCX = true) {
        let res = `----- Debug report -----\n`;
        res += `Location: ${window.location.href.replace(/\d{4,}/g, "<numbers>")}\n`;
        res += `UA: ${window.navigator.userAgent}\n`;
        res += `BC Version: ${GameVersion}\n`;
        res += `ModSDK Version: ${bcModSDK.version}\n`;
        res += `Mods:\n` +
            bcModSDK.getModsInfo()
                .map(mod => `  - ${mod.fullName} (${mod.name}): ${mod.version}\n` + (mod.repository ? `    repository: ${mod.repository}\n` : ""))
                .join("");
        const otherMods = Object.entries(detectOtherMods()).filter(i => i[1]);
        if (otherMods.length > 0) {
            res += `Detected legacy mods (NOT USING ModSDK):\n` +
                otherMods
                    .map(i => `  - ${i[0]}` + (typeof i[1] !== "boolean" ? `: ${i[1]}` : "") + "\n")
                    .join("");
        }
        else {
            res += `No known legacy mods detected.\n`;
        }
        const now = Date.now();
        res += `\n----- BC state report -----\n`;
        res += `Mouse position: ${MouseX} ${MouseY}\n`;
        res += `Connected to server: ${ServerIsConnected}\n`;
        res += `Local time: ${now}\n`;
        res += `Server time: ${CurrentTime} (diff: ${(CurrentTime - now).toFixed(2)})\n`;
        res += `Screen: ${CurrentModule}/${CurrentScreen}\n`;
        res += `In chatroom: ${ServerPlayerIsInChatRoom()}\n`;
        res += `GLVersion: ${GLVersion}\n`;
        res += `Last received message: ${lastReceivedMessageType} (${lastReceivedMessageTime})\n`;
        res += `Last sent message: ${lastSentMessageType} (${lastSentMessageTime})\n`;
        if (includeBCX) {
            res += `\n----- BCX report -----\n`;
            res += `Version: ${VERSION$1}\n`;
            res += `Init state: ${ModuleInitPhase[moduleInitPhase]}\n`;
            res += `First init: ${firstTimeInit}\n`;
            res += `Disabled modules: ${getDisabledModules().map(i => ModuleCategory[i]).join(", ") || "[None]"}\n`;
            try {
                if (ConditionsGetCategoryEnabled("curses")) {
                    res += `Curses: ${Object.keys(ConditionsGetCategoryData("curses").conditions).join(", ") || "[None]"}\n`;
                }
            }
            catch (error) {
                res += `ERROR getting Curses data: ${debugPrettifyError(error)}\n`;
            }
            try {
                if (ConditionsGetCategoryEnabled("rules")) {
                    res += `Rules: ${Object.keys(ConditionsGetCategoryData("rules").conditions).join(", ") || "[None]"}\n`;
                }
            }
            catch (error) {
                res += `ERROR getting Rules data: ${debugPrettifyError(error)}\n`;
            }
        }
        res += "\n" + debugGenerateSDKReport(includeBCX);
        return res;
    }
    function debugGenerateSDKReport(verbose = false) {
        let res = `----- ModSDK report -----\n`;
        const patchingInfo = Array.from(bcModSDK.getPatchingInfo().values());
        let hadWarnings = false;
        const overwrittenFunctions = patchingInfo.filter(fn => fn.currentEntrypoint !== fn.sdkEntrypoint);
        if (overwrittenFunctions.length > 0) {
            hadWarnings = true;
            res += `Functions overwritten by non-ModSDK mods:\n` +
                overwrittenFunctions.map(fn => { var _a, _b; return `  - ${fn.name}: ${crc32((_b = (_a = fn.currentEntrypoint) === null || _a === void 0 ? void 0 : _a.toString().replaceAll("\r\n", "\n")) !== null && _b !== void 0 ? _b : "")}\n`; }).join("");
        }
        if (!hadWarnings) {
            res += `No warnings.\n`;
        }
        const unexpectedHashes = getPatchedFunctionsHashes(false);
        if (unexpectedHashes.length > 0 && (verbose || SUPPORTED_BC_VERSIONS.includes(GameVersion))) {
            res += `\n----- BCX Patching report -----\n`;
            if (unexpectedHashes.length > 0) {
                res += `Patched functions with unknown checksums:\n` +
                    unexpectedHashes.map(i => `  - ${i[0]}: ${i[1]}\n`).join("");
            }
        }
        else if (verbose) {
            res += `\n----- BCX Patching report -----\n`;
            res += `No warnings.\n`;
        }
        return res;
    }
    function cleanupErrorLocation(location) {
        return location
            .replaceAll(window.location.href.substring(0, window.location.href.lastIndexOf("/")), "<url>")
            .replace(/https:\/\/[^?/]+\/([^?]+)?bcx.js(?=$|\?|:)/, "<bcx>")
            .replace(/\/\d{4,}\.html/, "/<numbers>.html")
            .replace(/[?&]_=\d+(?=$|&|:)/, "");
    }
    function debugPrettifyError(error) {
        if (error instanceof Error) {
            let stack = `${error.stack}`.split("\n");
            if (stack.length > MAX_STACK_SIZE) {
                stack = stack.slice(0, MAX_STACK_SIZE).concat("    ...");
            }
            return stack.map(cleanupErrorLocation).join("\n");
        }
        return `${error}`;
    }
    function debugGenerateReportErrorEvent(event) {
        const currentMod = contextCurrentModArea();
        let res = `----- UNHANDLED ERROR ${currentMod != null ? `(IN ${currentMod || "BC"}) ` : ""}-----\n` +
            `Message: ${event.message}\n` +
            `Source: ${cleanupErrorLocation(event.filename)}:${event.lineno}:${event.colno}\n`;
        res += debugPrettifyError(event.error) + "\n\n";
        res += debugMakeContextReport();
        try {
            res += "\n" + debugGenerateReport(currentMod === "BCX");
        }
        catch (error) {
            res += `----- Debug report -----\nERROR GENERATING DEBUG REPORT!\n${debugPrettifyError(error)}`;
        }
        return res;
    }
    function debugGenerateReportManualError(description, error) {
        const currentMod = contextCurrentModArea();
        let res = `----- ERROR ${currentMod != null ? `(IN ${currentMod || "BC"}) ` : ""}-----\n` +
            `Description: ${description}\n`;
        res += debugPrettifyError(error) + "\n\n";
        res += debugMakeContextReport();
        try {
            res += "\n" + debugGenerateReport(currentMod === "BCX");
        }
        catch (error2) {
            res += `----- Debug report -----\nERROR GENERATING DEBUG REPORT!\n${debugPrettifyError(error2)}`;
        }
        return res;
    }
    function showErrorOverlay(title, description, contents, wrapCodeBlock = true, minTimeout, preContentHook) {
        var _a, _b;
        console.info("Error overlay displayed\n", contents);
        if (wrapCodeBlock) {
            contents = "```\n" + contents.trim() + "\n```";
        }
        const overlay = document.createElement("div");
        overlay.style.position = "fixed";
        overlay.style.inset = "0px";
        overlay.style.zIndex = "999999";
        overlay.style.background = "#00000090";
        const win = document.createElement("div");
        overlay.appendChild(win);
        win.style.position = "absolute";
        win.style.inset = "5%";
        win.style.background = "white";
        win.style.display = "flex";
        win.style.flexDirection = "column";
        win.style.padding = "1em";
        const titleElem = document.createElement("h1");
        win.appendChild(titleElem);
        titleElem.innerText = title;
        const descriptionElement = document.createElement("p");
        win.appendChild(descriptionElement);
        descriptionElement.innerHTML = description;
        const contentElem = document.createElement("textarea");
        if (preContentHook) {
            preContentHook(win);
        }
        else {
            const copy = document.createElement("button");
            copy.style.cursor = "pointer";
            win.appendChild(copy);
            copy.innerText = "Copy report";
            copy.onclick = () => {
                contentElem.focus();
                contentElem.select();
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(contentElem.value);
                }
                else {
                    try {
                        document.execCommand("copy");
                    }
                    catch (err) {
                    }
                }
            };
        }
        win.appendChild(contentElem);
        contentElem.readOnly = true;
        contentElem.value = contents;
        contentElem.style.flex = "1";
        contentElem.style.margin = "0.5em 0";
        let timeout = minTimeout !== null && minTimeout !== void 0 ? minTimeout : 0;
        const close = document.createElement("button");
        win.appendChild(close);
        close.onclick = () => {
            if (timeout > 0)
                return;
            overlay.remove();
        };
        const updateCloseButton = () => {
            close.innerText = timeout > 0 ? `Close (${timeout})` : "Close";
            close.disabled = timeout > 0;
            if (timeout > 0) {
                BCX_setTimeout(() => {
                    timeout--;
                    updateCloseButton();
                }, 1000);
            }
            else {
                close.style.cursor = "pointer";
            }
        };
        updateCloseButton();
        (_b = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.blur) === null || _b === void 0 ? void 0 : _b.call(_a);
        window.document.body.appendChild(overlay);
    }
    let compatibilityCheckTimeout;
    const COMPATIBILITY_CHECK_INTERVAL = 60000;
    let didReportCompatibilityIssues = false;
    function detectCompatibilityProblems() {
        if (didReportCompatibilityIssues || moduleInitPhase !== ModuleInitPhase.ready)
            return;
        const legacyMods = detectOtherMods();
        let result = "";
        let wait = 0;
        if (legacyMods.BcUtil) {
            wait = 5;
            result += `----- BC-Util -----\n` +
                `BCX detected the presence of the incompatible mod BC-Util.\n` +
                `BC-Util is a useful and high quality mod, which has unfortunately not been updated since September 2021 and doesn't use ModSDK.\n` +
                `It isn't compatible with BCX due to that and is known to cause problems, including crashes (especially in the wardrobe).\n` +
                `\n`;
        }
        if (legacyMods.QuickAccessMenu) {
            wait = 5;
            result += `----- Quick Access Menu (QAM) -----\n` +
                `BCX detected the presence of the incompatible mod Quick Access Menu.\n` +
                `This mod is deprecated and is known to conflict with other mods (e.g. BCX or FBC). Continued usage of this mod is not advised.\n` +
                `Contact its author for more information.\n` +
                `Error reports while using QAM will not be acted upon.\n` +
                `\n`;
        }
        if (legacyMods.Curse) {
            result += `----- "Cursed" Script -----\n` +
                `BCX detected the presence of the obsolete mod Cursed script.\n` +
                `Curse is the spiritual predecessor of BCX, and can be considered obsolete since BCX has almost the same features (and much more). Curse is no longer updated since September 2021 and doesn't use ModSDK.\n` +
                `As BCX is meant to supersede Curse, no compatibility can be guaranteed.\n` +
                `\n`;
        }
        const patchingInfo = Array.from(bcModSDK.getPatchingInfo().values());
        const unexpectedHashes = SUPPORTED_BC_VERSIONS.includes(GameVersion) ? getPatchedFunctionsHashes(false) : [];
        const overwrittenFunctions = patchingInfo.filter(fn => fn.currentEntrypoint !== fn.sdkEntrypoint);
        if (Array.from(Object.values(legacyMods)).every(v => !v) && (unexpectedHashes.length > 0 || overwrittenFunctions.length > 0)) {
            result += `----- Unknown mod not using ModSDK -----\n` +
                `BCX detected the presence of modifications not done using ModSDK or any known legacy mod.\n` +
                `If you are not author of the mod, please report what mod caused this warning on the BC Scripting Community Discord server: https://discord.gg/SHJMjEh9VH\n` +
                `If you are author of the mod triggering this warning, please modify your mod to use ModSDK: https://github.com/Jomshir98/bondage-club-mod-sdk. Feel free to ask for help doing that on the above-mentioned Discord server.\n` +
                `\n`;
        }
        if (result) {
            result += `----- Detected modifications -----\n` +
                (unexpectedHashes.length > 0 ? `Patched functions with unknown checksums:\n` + unexpectedHashes.map(i => `  - ${i[0]}: ${i[1]}\n`).join("") : "") +
                (overwrittenFunctions.length > 0 ? `Overwritten functions:\n` + overwrittenFunctions.map(fn => { var _a, _b; return `  - ${fn.name}: ${crc32((_b = (_a = fn.currentEntrypoint) === null || _a === void 0 ? void 0 : _a.toString().replaceAll("\r\n", "\n")) !== null && _b !== void 0 ? _b : "")}\n`; }).join("") : "") +
                `\n`;
        }
        if (result) {
            const checksum = crc32(result);
            if (modStorage.compatibilityCheckerWarningIgnore === checksum)
                return;
            didReportCompatibilityIssues = true;
            showErrorOverlay("BCX Compatibility checker", "BCX's Compatibility checker detected problems with other mods you appear to be using.<br />" +
                "For reasons stated below please reconsider using mentioned mods.<br />" +
                "Please note, that this is a warning for you, not meant to be reported. It says that some features are likely to be broken.<br />" +
                "If you have any questions or think this message is an error, please get in touch with us on <a href='https://discord.gg/SHJMjEh9VH' target='_blank'>BC Scripting Community</a> Discord server.<br />" +
                "You can use the 'Close' button at the bottom to continue anyway.", result + `Report signature: ${checksum}`, false, wait, (win) => {
                const doNotShowAgain = document.createElement("button");
                doNotShowAgain.style.cursor = "pointer";
                win.appendChild(doNotShowAgain);
                doNotShowAgain.innerText = "Do not show this report again unless something changes";
                doNotShowAgain.onclick = () => {
                    doNotShowAgain.innerText = "This report won't show again unless something changes.";
                    doNotShowAgain.disabled = true;
                    modStorage.compatibilityCheckerWarningIgnore = checksum;
                    modStorageSync();
                };
            });
        }
        else if (modStorage.compatibilityCheckerWarningIgnore != null) {
            delete modStorage.compatibilityCheckerWarningIgnore;
            modStorageSync();
        }
    }
    const sourceBasedErrorMessage = {
        bcx: "<br /><h3>Whoops... seems like BCX might be to blame this time</h3> Could you please help us by submitting the report below to the <a href='https://discord.gg/SHJMjEh9VH' target='_blank'>BC Scripting Community Discord</a> server?<br />Thank you!</p>",
        knownMod: (mod) => `<br /><h3>The error seems to come from mod ${mod}</h3> Please submit the report to <a href='https://discord.gg/SHJMjEh9VH' target='_blank'>BC Scripting Community Discord</a> server!`,
        bc: "<br /><h3>The error seems not to come from any ModSDK mod!</h3> Please submit the report to <a href='https://discord.gg/dkWsEjf' target='_blank'>Bondage Club's Discord</a> server!",
        unknown: "<br /><h3>Could not detect origin of the error.</h3> Please submit the report to <a href='https://discord.gg/dkWsEjf' target='_blank'>Bondage Club's Discord</a> server!",
    };
    function onUnhandledError(event) {
        if (!firstError)
            return;
        firstError = false;
        const currentMod = contextCurrentModArea();
        showErrorOverlay("Crash Handler (by ModSDK)", "The Crash Handler provided by ModSDK detected an uncaught error, which most likely crashed the Bondage Club.<br />" +
            "While reporting this error, please use the information below to help us find the source faster.<br />" +
            "You can use the 'Close' button at the bottom to continue, however BC may no longer work correctly until you reload the current tab." +
            (currentMod === "BCX" ? sourceBasedErrorMessage.bcx :
                currentMod === "" ? sourceBasedErrorMessage.bc :
                    currentMod == null ? sourceBasedErrorMessage.unknown :
                        sourceBasedErrorMessage.knownMod(currentMod)), debugGenerateReportErrorEvent(event));
    }
    function reportManualError(description, error) {
        console.error(`BCX: Error report: ${description}\n`, error);
        if (!firstError)
            return;
        firstError = false;
        const currentMod = contextCurrentModArea();
        showErrorOverlay("Error Report (by BCX)", "The following error happend in event originating from BCX.<br />" +
            "While reporting this error, please use the information below to help us find the source faster.<br />" +
            "You can use the 'Close' button at the bottom to continue, however BC may no longer work correctly until you reload the current tab." +
            (currentMod === "BCX" ? sourceBasedErrorMessage.bcx :
                currentMod === "" ? sourceBasedErrorMessage.bc :
                    currentMod == null ? sourceBasedErrorMessage.unknown :
                        sourceBasedErrorMessage.knownMod(currentMod)), debugGenerateReportManualError(description, error));
    }
    let originalSocketEmit;
    function bcxSocketEmit(...args) {
        const message = Array.isArray(args[0]) && typeof args[0][0] === "string" ? args[0][0] : "[unknown]";
        lastReceivedMessageType = message;
        lastReceivedMessageTime = Date.now();
        const parameters = Array.isArray(args[0]) ? args[0].slice(1) : [];
        if (logServerMessages) {
            console.log("\u2B07 Receive", message, ...parameters);
        }
        const ctx = debugContextStart(`Server message ${message}`, {
            root: true,
            modArea: "",
            extraInfo() {
                return `Event: ${message}\n` + parameters.map(i => JSON.stringify(i, undefined, "  ")).join("\n");
            },
        });
        const res = originalSocketEmit === null || originalSocketEmit === void 0 ? void 0 : originalSocketEmit.apply(this, args);
        ctx.end();
        return res;
    }
    let originalClick;
    function bcxClick(event) {
        const ctx = debugContextStart(`Canvas click`, {
            root: true,
            modArea: "",
            extraInfo: () => `X: ${MouseX}\nY: ${MouseY}`,
        });
        const res = originalClick === null || originalClick === void 0 ? void 0 : originalClick.call(this, event);
        ctx.end();
        return res;
    }
    let originalRAF;
    function bcxRaf(fn) {
        var _a;
        return (_a = originalRAF === null || originalRAF === void 0 ? void 0 : originalRAF.call(this, (...rafArgs) => {
            const ctx = debugContextStart(`Animation frame`, {
                root: true,
                modArea: "",
                extraInfo: () => `time: ${rafArgs}`,
            });
            const res = fn.apply(window, rafArgs);
            ctx.end();
            return res;
        })) !== null && _a !== void 0 ? _a : 0;
    }
    function InitErrorReporter() {
        var _a;
        window.addEventListener("error", onUnhandledError);
        if (originalSocketEmit === undefined && typeof ((_a = ServerSocket === null || ServerSocket === void 0 ? void 0 : ServerSocket.__proto__) === null || _a === void 0 ? void 0 : _a.emitEvent) === "function") {
            originalSocketEmit = ServerSocket.__proto__.emitEvent;
            ServerSocket.__proto__.emitEvent = bcxSocketEmit;
        }
        const canvas = document.getElementById("MainCanvas");
        if (canvas) {
            if (originalClick === undefined && typeof canvas.onclick === "function") {
                originalClick = canvas.onclick;
                canvas.onclick = bcxClick;
            }
        }
        if (originalRAF === undefined && typeof window.requestAnimationFrame === "function") {
            originalRAF = window.requestAnimationFrame;
            window.requestAnimationFrame = bcxRaf;
        }
        hookFunction("ServerSend", 0, (args, next) => {
            lastSentMessageType = args[0];
            lastSentMessageTime = Date.now();
            if (logServerMessages) {
                console.log("\u2B06 Send", ...args);
            }
            return next(args);
        });
        if (compatibilityCheckTimeout == null) {
            compatibilityCheckTimeout = BCX_setInterval(() => {
                detectCompatibilityProblems();
            }, COMPATIBILITY_CHECK_INTERVAL);
            BCX_setTimeout(() => {
                detectCompatibilityProblems();
            }, 3000);
        }
    }
    function UnloadErrorReporter() {
        window.removeEventListener("error", onUnhandledError);
        if (originalSocketEmit && ServerSocket.__proto__.emitEvent === bcxSocketEmit) {
            ServerSocket.__proto__.emitEvent = originalSocketEmit;
            originalSocketEmit = undefined;
        }
        const canvas = document.getElementById("MainCanvas");
        if (canvas && originalClick && canvas.onclick === bcxClick) {
            canvas.onclick = originalClick;
            originalClick = undefined;
        }
        if (originalRAF && window.requestAnimationFrame === bcxRaf) {
            window.requestAnimationFrame = originalRAF;
            originalRAF = undefined;
        }
        if (compatibilityCheckTimeout != null) {
            clearInterval(compatibilityCheckTimeout);
            compatibilityCheckTimeout = undefined;
        }
    }

    function loginInit(C) {
        if (window.BCX_Loaded || moduleInitPhase !== ModuleInitPhase.construct)
            return;
        SetLoadedBeforeLogin(C);
        init();
    }
    function clearCaches() {
        if (typeof DrawRunMap !== "undefined") {
            DrawRunMap.clear();
            DrawScreen = "";
        }
        if (typeof CurrentScreenFunctions !== "undefined") {
            const w = window;
            CurrentScreenFunctions = {
                Run: w[`${CurrentScreen}Run`],
                Click: w[`${CurrentScreen}Click`],
                Load: typeof w[`${CurrentScreen}Load`] === "function" ? w[`${CurrentScreen}Load`] : undefined,
                Unload: typeof w[`${CurrentScreen}Unload`] === "function" ? w[`${CurrentScreen}Unload`] : undefined,
                Resize: typeof w[`${CurrentScreen}Resize`] === "function" ? w[`${CurrentScreen}Resize`] : undefined,
                KeyDown: typeof w[`${CurrentScreen}KeyDown`] === "function" ? w[`${CurrentScreen}KeyDown`] : undefined,
                Exit: typeof w[`${CurrentScreen}Exit`] === "function" ? w[`${CurrentScreen}Exit`] : undefined,
            };
        }
    }
    function init() {
        if (window.BCX_Loaded || moduleInitPhase !== ModuleInitPhase.construct)
            return;
        const ctx = debugContextStart("BCX init", { modArea: "BCX" });
        InitErrorReporter();
        if (!init_modules()) {
            ctx.end();
            unload();
            return;
        }
        const currentAccount = Player.MemberNumber;
        if (currentAccount == null) {
            throw new Error("No player MemberNumber");
        }
        hookFunction("LoginResponse", 0, (args, next) => {
            const response = args[0];
            if (isObject$1(response) && typeof response.Name === "string" && typeof response.AccountName === "string" && response.MemberNumber !== currentAccount) {
                alert(`Attempting to load BCX with different account than already loaded (${response.MemberNumber} vs ${currentAccount}). This is not supported, please refresh the page.`);
                throw new Error("Attempting to load BCX with different account");
            }
            return next(args);
        });
        clearCaches();
        const { BondageClubTools } = detectOtherMods();
        if (BondageClubTools) {
            console.warn("BCX: Bondage Club Tools detected!");
            if (window.BCX_BondageClubToolsPatch === true) {
                console.info("BCX: Bondage Club Tools already patched, skip!");
            }
            else {
                window.BCX_BondageClubToolsPatch = true;
                const ChatRoomMessageForwarder = ServerSocket.listeners("ChatRoomMessage").find(i => i.toString().includes("window.postMessage"));
                const AccountBeepForwarder = ServerSocket.listeners("AccountBeep").find(i => i.toString().includes("window.postMessage"));
                if (!ChatRoomMessageForwarder || !AccountBeepForwarder) {
                    throw new Error("Failed to patch for Bondage Club Tools!");
                }
                ServerSocket.off("ChatRoomMessage", ChatRoomMessageForwarder);
                ServerSocket.on("ChatRoomMessage", data => {
                    if ((data === null || data === void 0 ? void 0 : data.Type) !== "Hidden" || data.Content !== "BCXMsg" || typeof data.Sender !== "number") {
                        ChatRoomMessageForwarder(data);
                    }
                });
                ServerSocket.off("AccountBeep", AccountBeepForwarder);
                ServerSocket.on("AccountBeep", data => {
                    var _a;
                    if (typeof (data === null || data === void 0 ? void 0 : data.BeepType) !== "string" || !["Leash", "BCX"].includes(data.BeepType) || !isObject$1((_a = data.Message) === null || _a === void 0 ? void 0 : _a.BCX)) {
                        AccountBeepForwarder(data);
                    }
                });
            }
        }
        window.BCX_Loaded = true;
        InfoBeep(`BCX loaded! Version: ${VERSION$1.replace(/-[0-f]+$/i, "")}`);
        console.log(`BCX loaded! Version: ${VERSION$1}`);
        ctx.end();
    }
    function unload() {
        unload_patches();
        unload_modules();
        UnloadErrorReporter();
        clearCaches();
        delete window.BCX_Loaded;
        console.log("BCX: Unloaded.");
        return true;
    }

    let nextCheckTimer = null;
    let versionCheckNewAvailable = null;
    let versionCheckDidNotify = false;
    let supporterStatus;
    let supporterSecret;
    function setSupporterVisible(visible) {
        if (visible === !modStorage.supporterHidden)
            return;
        if (visible) {
            delete modStorage.supporterHidden;
        }
        else {
            modStorage.supporterHidden = true;
        }
        modStorageSync();
        announceSelf();
    }
    const otherSupporterStatus = new Map();
    function updateOtherSupporterStatus(memberNumber, status, secret) {
        if (memberNumber === Player.MemberNumber)
            return;
        const current = otherSupporterStatus.get(memberNumber);
        if (current && current.secret === status && current.secret === secret && current.verified)
            return;
        if (status && secret) {
            otherSupporterStatus.set(memberNumber, {
                verified: status === undefined,
                status,
                secret,
            });
            if (status && secret) {
                sendHiddenBeep("supporterCheck", {
                    memberNumber,
                    status,
                    secret,
                }, VERSION_CHECK_BOT, true);
            }
        }
        else {
            otherSupporterStatus.delete(memberNumber);
        }
    }
    function sendVersionCheckBeep() {
        if (nextCheckTimer !== null) {
            clearTimeout(nextCheckTimer);
            nextCheckTimer = null;
        }
        sendHiddenBeep("versionCheck", {
            version: VERSION$1,
            devel: BCX_DEVEL,
            GameVersion,
            Source: (BCXSourceExternal ? "E:" : "") + (BCXSource !== null && BCXSource !== void 0 ? BCXSource : "[UNKNOWN]"),
            UA: window.navigator.userAgent,
        }, VERSION_CHECK_BOT, true);
        nextCheckTimer = BCX_setTimeout(sendVersionCheckBeep, (5 + Math.random()) * 60000);
    }
    class ModuleVersionCheck extends BaseModule {
        load() {
            hiddenBeepHandlers.set("versionResponse", (sender, message) => {
                var _a, _b;
                if (sender !== VERSION_CHECK_BOT) {
                    console.warn(`BCX: got versionResponse from unexpected sender ${sender}, ignoring`);
                    return;
                }
                if (!isObject$1(message) || typeof message.status !== "string") {
                    console.warn(`BCX: bad versionResponse`, message);
                    return;
                }
                if (nextCheckTimer !== null) {
                    clearTimeout(nextCheckTimer);
                    nextCheckTimer = null;
                }
                nextCheckTimer = BCX_setTimeout(sendVersionCheckBeep, (15 + 5 * Math.random()) * 60000);
                if (message.status === "current") {
                    versionCheckNewAvailable = false;
                }
                else if (message.status === "newAvailable") {
                    versionCheckNewAvailable = true;
                    if (!versionCheckDidNotify) {
                        versionCheckDidNotify = true;
                        if (ServerPlayerIsInChatRoom()) {
                            ChatRoomSendLocal("New BCX version is available! You can upgrade by logging in again.");
                        }
                        else {
                            InfoBeep("New BCX version is available! You can upgrade by logging in again.", 10000);
                        }
                    }
                }
                else if (message.status === "deprecated") {
                    versionCheckNewAvailable = true;
                    if (!versionCheckDidNotify) {
                        versionCheckDidNotify = true;
                        const overlay = document.createElement("div");
                        overlay.style.position = "fixed";
                        overlay.style.top = "0px";
                        overlay.style.right = "0px";
                        overlay.style.bottom = "0px";
                        overlay.style.left = "0px";
                        overlay.style.background = "#00000090";
                        overlay.style.display = "flex";
                        overlay.style.alignItems = "center";
                        overlay.style.justifyContent = "center";
                        const win = document.createElement("div");
                        overlay.appendChild(win);
                        win.style.background = "white";
                        win.style.display = "flex";
                        win.style.flexDirection = "column";
                        win.style.padding = "1em";
                        const titleElem = document.createElement("h1");
                        win.appendChild(titleElem);
                        titleElem.innerText = "Deprecated BCX version";
                        const descriptionElement = document.createElement("p");
                        win.appendChild(descriptionElement);
                        descriptionElement.innerText = "The BCX version you are using is too old and either contains critical bugs or " +
                            "is no longer compatible with the current Bondage Club release version.\n" +
                            "Unless you are using additional mods preventing this, please refresh the page and log into the club again to load the newest version.";
                        const close = document.createElement("button");
                        close.style.cursor = "pointer";
                        win.appendChild(close);
                        close.innerText = "Close";
                        close.onclick = () => {
                            overlay.remove();
                        };
                        (_b = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.blur) === null || _b === void 0 ? void 0 : _b.call(_a);
                        window.document.body.appendChild(overlay);
                    }
                }
                else if (message.status === "unsupported") {
                    unload();
                    alert("The BCX version you are trying to load is too old and either contains critical bugs or " +
                        "is no longer compatible with the current Bondage Club release version. Please update your BCX.");
                }
                else {
                    console.warn(`BCX: bad versionResponse status "${message.status}"`);
                }
                if (supporterStatus !== message.supporterStatus || supporterSecret !== message.supporterSecret) {
                    supporterStatus = message.supporterStatus;
                    supporterSecret = message.supporterSecret;
                    announceSelf();
                }
            });
            hiddenBeepHandlers.set("supporterCheckResult", (sender, message) => {
                if (sender !== VERSION_CHECK_BOT) {
                    console.warn(`BCX: got supporterCheckResult from unexpected sender ${sender}, ignoring`);
                    return;
                }
                if (!isObject$1(message) || typeof message.memberNumber !== "number" || (message.status !== undefined && typeof message.status !== "string")) {
                    console.warn(`BCX: bad supporterCheckResult`, message);
                    return;
                }
                const status = otherSupporterStatus.get(message.memberNumber);
                if (!status) {
                    console.warn(`BCX: supporterCheckResult unknown memberNumber`, message);
                    return;
                }
                status.status = message.status;
                status.verified = true;
            });
            hookFunction("LoginResponse", 0, (args, next) => {
                next(args);
                const response = args[0];
                if (isObject$1(response) && typeof response.Name === "string" && typeof response.AccountName === "string") {
                    sendVersionCheckBeep();
                }
            });
        }
        run() {
            sendVersionCheckBeep();
        }
        unload() {
            if (nextCheckTimer !== null) {
                clearTimeout(nextCheckTimer);
                nextCheckTimer = null;
            }
        }
    }

    class GuiGlobal extends GuiSubscreen {
        constructor(character) {
            super();
            this.character = character;
        }
        Run() {
            MainCanvas.textAlign = "left";
            DrawText(`- Global: Configuration for ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "BCX main menu");
            if (!this.character.isPlayer()) {
                DrawText(`Global configuration is not possible on others`, 1000, 500, "Black");
                return;
            }
            MainCanvas.fillStyle = "#ddd";
            MainCanvas.fillRect(840, 200, 950, 90);
            DrawImageEx("Icons/Introduction.png", 840 + 20, 200 + 20, { Height: 50, Width: 50 });
            DrawTextFit(`Your initially selected BCX preset was: "${capitalizeFirstLetter(Preset[getCurrentPreset()])}"`, 1300, 244, 850, "Black");
            DrawButton(120, 200, 400, 90, "Manage BCX modules", "White", "", "Enable/Disable individual modules");
            DrawButton(1490, 800, 300, 90, "Clear all BCX data", "#FF3232", "", "Emergency reset of BCX");
            MainCanvas.textAlign = "left";
            DrawCheckbox(125, 350, 64, 64, "Show BCX icons above characters in chatroom", !modStorage.chatroomIconHidden);
            const isSupporter = supporterStatus !== undefined;
            DrawCheckbox(125, 450, 64, 64, "Show your BCX Supporter Heart to all BCX users", isSupporter && !modStorage.supporterHidden, !isSupporter);
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (!this.character.isPlayer())
                return;
            if (MouseIn(120, 200, 400, 90)) {
                setSubscreen(new GuiGlobalModuleToggling());
                return;
            }
            if (MouseIn(1490, 800, 300, 90)) {
                setSubscreen(new GuiGlobalDialogClearData(this));
                return;
            }
            if (MouseIn(125, 350, 64, 64)) {
                if (modStorage.chatroomIconHidden != null) {
                    delete modStorage.chatroomIconHidden;
                }
                else {
                    modStorage.chatroomIconHidden = true;
                }
                modStorageSync();
                return;
            }
            const isSupporter = supporterStatus !== undefined;
            if (isSupporter && MouseIn(125, 450, 64, 64)) {
                setSupporterVisible(!!modStorage.supporterHidden);
                return;
            }
        }
        Exit() {
            setSubscreen(new GuiMainMenu(this.character));
        }
    }

    const PER_PAGE_COUNT$5 = 6;
    class GuiLogConfig extends GuiSubscreen {
        constructor(character) {
            super();
            this.config = null;
            this.failed = false;
            this.configList = [];
            this.allowDelete = false;
            this.allowConfigure = false;
            this.page = 0;
            this.showHelp = false;
            this.filterInput = createInputElement("text", 30);
            this.character = character;
            this.filterInput.addEventListener("input", ev => {
                this.rebuildList();
            });
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            Promise.all([
                this.character.getLogConfig(),
                this.character.getPermissionAccess("log_delete"),
                this.character.getPermissionAccess("log_configure"),
            ]).then(res => {
                this.config = res[0];
                this.allowDelete = res[1];
                this.allowConfigure = res[2];
                this.failed = false;
                this.rebuildList();
            }, err => {
                console.error(`BCX: Failed to get log config for ${this.character}`, err);
                this.config = null;
                this.allowDelete = false;
                this.allowConfigure = false;
                this.failed = true;
                this.rebuildList();
            });
        }
        rebuildList() {
            if (!this.active)
                return;
            this.configList = [];
            if (this.config === null) {
                this.filterInput.remove();
                return;
            }
            if (!this.filterInput.parentElement) {
                document.body.appendChild(this.filterInput);
            }
            const filter = this.filterInput.value.trim().toLocaleLowerCase().split(" ");
            for (const [k, v] of Object.entries(this.config)) {
                if (LOG_CONFIG_NAMES[k] !== undefined &&
                    LOG_LEVEL_NAMES[v] !== undefined &&
                    filter.every(i => LOG_CONFIG_NAMES[k].toLocaleLowerCase().includes(i) ||
                        k.toLocaleLowerCase().includes(i))) {
                    this.configList.push({
                        category: k,
                        access: v,
                        name: LOG_CONFIG_NAMES[k],
                    });
                }
            }
            this.configList.sort((a, b) => a.name.localeCompare(b.name));
            const totalPages = Math.ceil(this.configList.length / PER_PAGE_COUNT$5);
            if (this.page < 0) {
                this.page = Math.max(totalPages - 1, 0);
            }
            else if (this.page >= totalPages) {
                this.page = 0;
            }
        }
        Run() {
            if (this.config !== null) {
                DrawText("Filter:", 130, 215, "Black");
                positionElement(this.filterInput, 550, 210, 600, 64);
                if (this.filterInput.value) {
                    MainCanvas.textAlign = "center";
                    DrawButton(870, 182, 64, 64, "X", "White");
                }
                MainCanvas.textAlign = "left";
                for (let off = 0; off < PER_PAGE_COUNT$5; off++) {
                    const i = this.page * PER_PAGE_COUNT$5 + off;
                    if (i >= this.configList.length)
                        break;
                    const e = this.configList[i];
                    const Y = 290 + off * 100;
                    DrawButton(130, Y, 1070, 64, "", "White");
                    DrawTextFit(e.name, 140, Y + 34, 1060, "Black");
                    MainCanvas.textAlign = "center";
                    if (this.allowConfigure) {
                        DrawBackNextButton(1270, Y, 170, 64, LOG_LEVEL_NAMES[e.access], "White", "", () => (e.access > 0 ? LOG_LEVEL_NAMES[(e.access - 1)] : ""), () => (e.access < 2 ? LOG_LEVEL_NAMES[(e.access + 1)] : ""));
                    }
                    else {
                        DrawButton(1270, Y, 170, 64, LOG_LEVEL_NAMES[e.access], "#ccc", undefined, undefined, true);
                    }
                    MainCanvas.textAlign = "left";
                }
                const totalPages = Math.max(1, Math.ceil(this.configList.length / PER_PAGE_COUNT$5));
                MainCanvas.textAlign = "center";
                DrawBackNextButton(1605, 800, 300, 90, `${DialogFindPlayer("Page")} ${this.page + 1} / ${totalPages}`, "White", "", () => "", () => "");
            }
            else if (this.failed) {
                MainCanvas.textAlign = "center";
                DrawText(`Failed to get log config data from ${this.character.Name}. Maybe you have no access?`, 1000, 480, "Black");
            }
            else {
                MainCanvas.textAlign = "center";
                DrawText("Loading...", 1000, 480, "Black");
            }
            MainCanvas.textAlign = "left";
            DrawText(`- Behaviour Log: Configuration for ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            if (this.allowDelete) {
                DrawButton(1525, 690, 380, 64, "Delete all log entries", "White");
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.LogConfig]);
            }
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "Back");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (this.config !== null) {
                if (MouseIn(870, 182, 64, 64)) {
                    this.filterInput.value = "";
                    this.rebuildList();
                }
                for (let off = 0; off < PER_PAGE_COUNT$5; off++) {
                    const i = this.page * PER_PAGE_COUNT$5 + off;
                    if (i >= this.configList.length)
                        break;
                    const e = this.configList[i];
                    const Y = 290 + off * 100;
                    if (e.access > 0 && MouseIn(1270, Y, 85, 64) && this.allowConfigure) {
                        this.character.setLogConfig(e.category, (e.access - 1));
                        return;
                    }
                    else if (e.access < 2 && MouseIn(1355, Y, 85, 64) && this.allowConfigure) {
                        this.character.setLogConfig(e.category, (e.access + 1));
                        return;
                    }
                }
                if (MouseIn(1525, 690, 380, 64) && this.allowDelete) {
                    this.character.logClear().then(() => {
                        setSubscreen(new GuiLog(this.character));
                    });
                    return;
                }
                const totalPages = Math.ceil(this.configList.length / PER_PAGE_COUNT$5);
                if (MouseIn(1605, 800, 150, 90)) {
                    this.page--;
                    if (this.page < 0) {
                        this.page = Math.max(totalPages - 1, 0);
                    }
                }
                else if (MouseIn(1755, 800, 150, 90)) {
                    this.page++;
                    if (this.page >= totalPages) {
                        this.page = 0;
                    }
                }
            }
        }
        Exit() {
            setSubscreen(new GuiLog(this.character));
        }
        Unload() {
            this.filterInput.remove();
        }
    }

    const PER_PAGE_COUNT$4 = 5;
    class GuiLog extends GuiSubscreen {
        constructor(character) {
            super();
            this.failed = false;
            this.logData = null;
            this.logEntries = [];
            this.allowDeletion = false;
            this.allowConfiguration = false;
            this.allowPraise = false;
            this.allowLeaveMessage = false;
            this.page = 0;
            this.showMore = new Array(PER_PAGE_COUNT$4).fill(false);
            this.showHelp = false;
            this.filterInput = createInputElement("text", 30);
            this.character = character;
            this.filterInput.addEventListener("input", ev => {
                this.refreshScreen();
            });
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            Promise.all([
                this.character.getLogEntries(),
                this.character.logGetAllowedActions(),
            ]).then(res => {
                this.logData = res[0];
                this.allowDeletion = res[1].delete;
                this.allowConfiguration = res[1].configure || this.character.isPlayer();
                this.allowPraise = res[1].praise;
                this.allowLeaveMessage = res[1].leaveMessage;
                this.failed = false;
                this.refreshScreen();
            }, err => {
                console.error(`BCX: Failed to get log data for ${this.character}`, err);
                this.logData = null;
                this.failed = true;
                this.refreshScreen();
            });
        }
        refreshScreen() {
            if (!this.active)
                return;
            this.logEntries = [];
            let NoteField = document.getElementById("BCX_NoteField");
            if (this.logData === null) {
                this.filterInput.remove();
                if (NoteField) {
                    NoteField.remove();
                }
                return;
            }
            if (!this.filterInput.parentElement) {
                document.body.appendChild(this.filterInput);
            }
            if (!this.allowLeaveMessage && NoteField) {
                NoteField.remove();
            }
            else if (this.allowLeaveMessage && !NoteField) {
                NoteField = ElementCreateInput("BCX_NoteField", "text", "", "30");
            }
            const filter = this.filterInput.value.trim().toLocaleLowerCase().split(" ");
            this.logEntries = this.logData.filter(e => {
                const msg = logMessageRender(e, this.character).toLocaleLowerCase();
                return filter.every(f => msg.includes(f));
            });
            const totalPages = Math.ceil(this.logEntries.length / PER_PAGE_COUNT$4);
            if (this.page < 0) {
                this.page = Math.max(totalPages - 1, 0);
            }
            else if (this.page >= totalPages) {
                this.page = 0;
            }
        }
        Run() {
            if (this.logData !== null) {
                DrawText("Filter:", 130, 215, "Black");
                positionElement(this.filterInput, 550, 210, 600, 64);
                if (this.filterInput.value) {
                    MainCanvas.textAlign = "center";
                    DrawButton(870, 182, 64, 64, "X", "White");
                    if (this.allowDeletion) {
                        DrawButton(1270, 182, 420, 64, "Delete all filtered log entries", "White");
                    }
                }
                for (let off = 0; off < PER_PAGE_COUNT$4; off++) {
                    const i = this.page * PER_PAGE_COUNT$4 + off;
                    if (i >= this.logEntries.length)
                        break;
                    const e = this.logEntries[i];
                    const Y = 290 + off * 95;
                    DrawImageEx(e[1] === LogAccessLevel.protected ? "Icons/Security.png" : "Icons/Public.png", 125, Y, {
                        Height: 64,
                        Width: 64,
                    });
                    MainCanvas.textAlign = "left";
                    const msg = logMessageRender(e, this.character);
                    if (this.showMore[off]) {
                        MainCanvas.fillStyle = "#ffff88";
                        MainCanvas.fillRect(200, Y - 32, 1030, 128);
                        MainCanvas.strokeStyle = "Black";
                        MainCanvas.strokeRect(200, Y - 32, 1030, 128);
                        DrawTextWrap(msg, 200 - 970 / 2, Y - 32 + 5, 990, 128 - 10, "black", undefined, 3);
                    }
                    else {
                        DrawButton(200, Y, 1030, 64, "", "White");
                        let msgSmall = msg;
                        if (msg.length > 95) {
                            msgSmall = msgSmall.slice(0, 80) + "... >> click <<";
                        }
                        DrawTextFit(msgSmall, 210, Y + 34, 1020, msgSmall.startsWith("[") ? "Gray" : "Black");
                    }
                    MainCanvas.beginPath();
                    MainCanvas.rect(1270, Y, 320, 64);
                    MainCanvas.stroke();
                    DrawTextFit(new Date(e[0]).toLocaleString(), 1290, Y + 34, 300, "Black", "");
                    MainCanvas.textAlign = "center";
                    if (this.allowDeletion) {
                        DrawButton(1630, Y, 64, 64, "X", "White", "", "Delete log entry");
                    }
                    if (MouseIn(125, Y, 64, 64)) {
                        DrawButtonHover(125, Y, 64, 64, e[1] === LogAccessLevel.protected ? "Protected visibility" : "Normal visibility");
                    }
                }
                if (this.allowLeaveMessage) {
                    MainCanvas.textAlign = "left";
                    DrawText("Attach", 130, 831, "Black");
                    DrawText("note:", 130, 869, "Black");
                    ElementPosition("BCX_NoteField", 580, 842, 660, 64);
                }
                MainCanvas.textAlign = "center";
                if (this.allowPraise) {
                    DrawButton(950, 815, 150, 64, "Praise", "White");
                }
                if (this.allowLeaveMessage) {
                    DrawButton(1150, 815, 200, 64, "Only note", "White");
                }
                if (this.allowPraise) {
                    DrawButton(1400, 815, 150, 64, "Scold", "White");
                }
                const totalPages = Math.max(1, Math.ceil(this.logEntries.length / PER_PAGE_COUNT$4));
                DrawBackNextButton(1605, 800, 300, 90, `${DialogFindPlayer("Page")} ${this.page + 1} / ${totalPages}`, "White", "", () => "", () => "");
            }
            else if (this.failed) {
                MainCanvas.textAlign = "center";
                DrawText(`Failed to get log data from ${this.character.Name}. Maybe you have no access?`, 1000, 480, "Black");
            }
            else {
                MainCanvas.textAlign = "center";
                DrawText("Loading...", 1000, 480, "Black");
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.Log]);
            }
            MainCanvas.textAlign = "left";
            DrawText(`- Behaviour Log: About ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "BCX main menu");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            DrawButton(1815, 305, 90, 90, "", this.allowConfiguration ? "White" : "#ddd", "Icons/Preference.png", "Configure logging", !this.allowConfiguration);
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (MouseIn(1815, 305, 90, 90) && this.allowConfiguration)
                return setSubscreen(new GuiLogConfig(this.character));
            if (this.logData !== null) {
                if (MouseIn(870, 182, 64, 64)) {
                    this.filterInput.value = "";
                    this.refreshScreen();
                }
                if (MouseIn(1270, 182, 420, 64) && this.allowDeletion) {
                    this.character.logMessageDelete(this.logEntries.map(e => e[0]));
                    return;
                }
                for (let off = 0; off < PER_PAGE_COUNT$4; off++) {
                    const i = this.page * PER_PAGE_COUNT$4 + off;
                    if (i >= this.logEntries.length)
                        break;
                    const e = this.logEntries[i];
                    const Y = 290 + off * 95;
                    if (this.allowDeletion && MouseIn(1630, Y, 64, 64)) {
                        this.character.logMessageDelete(e[0]);
                        return;
                    }
                    if (MouseIn(200, Y - 32, 1030, 128) && this.showMore[off]) {
                        this.showMore[off] = !this.showMore[off];
                    }
                    else if (MouseIn(200, Y, 1030, 64)) {
                        if (this.showMore.includes(true)) {
                            this.showMore.fill(false);
                        }
                        this.showMore[off] = !this.showMore[off];
                    }
                }
                const field = document.getElementById("BCX_NoteField");
                const msg = (field === null || field === void 0 ? void 0 : field.value) || null;
                let didPraise = false;
                if (this.allowPraise && MouseIn(950, 815, 150, 64)) {
                    this.character.logPraise(1, msg);
                    didPraise = true;
                }
                if (this.allowLeaveMessage && MouseIn(1150, 815, 200, 64) && msg) {
                    this.character.logPraise(0, msg);
                    didPraise = true;
                }
                if (this.allowPraise && MouseIn(1400, 815, 150, 64)) {
                    this.character.logPraise(-1, msg);
                    didPraise = true;
                }
                if (didPraise) {
                    this.allowPraise = false;
                    if (field) {
                        field.value = "";
                    }
                    return;
                }
                const totalPages = Math.ceil(this.logEntries.length / PER_PAGE_COUNT$4);
                if (MouseIn(1605, 800, 150, 90)) {
                    this.showMore.fill(false);
                    this.page--;
                    if (this.page < 0) {
                        this.page = Math.max(totalPages - 1, 0);
                    }
                }
                else if (MouseIn(1755, 800, 150, 90)) {
                    this.showMore.fill(false);
                    this.page++;
                    if (this.page >= totalPages) {
                        this.page = 0;
                    }
                }
            }
        }
        Exit() {
            setSubscreen(new GuiMainMenu(this.character));
        }
        Unload() {
            this.filterInput.remove();
            ElementRemove("BCX_NoteField");
        }
    }

    const GUI_MISC_PAGES = 2;
    class GuiMisc extends GuiSubscreen {
        constructor(character) {
            super();
            this.showHelp = false;
            this.page = 0;
            this.character = character;
        }
        Load() {
            this.setPage(0);
            if (this.character.isPlayer()) {
                ElementCreateInput("BCX_RoomSearchValueField", "text", modStorage.roomSearchAutoFill || "", "20");
            }
        }
        setPage(page) {
            this.page = page;
            const roomSearchValueField = document.getElementById("BCX_RoomSearchValueField");
            if (roomSearchValueField) {
                roomSearchValueField.style.display = (this.page === 0 && this.character.isPlayer()) ? "" : "none";
            }
        }
        Run() {
            var _a;
            MainCanvas.textAlign = "left";
            DrawText(`- Miscellaneous: Configuration for ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "BCX main menu");
            if (this.character.isPlayer()) {
                DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            }
            DrawBackNextButton(1600, 820, 300, 90, `Page ${this.page + 1} / ${GUI_MISC_PAGES}`, "White", "", () => "", () => "");
            if (!this.character.isPlayer()) {
                DrawText(`Miscellaneous module configuration is not possible on others`, 1000, 500, "Black");
                return;
            }
            MainCanvas.textAlign = "left";
            if (this.page === 0) {
                DrawCheckbox(125, 200, 64, 64, "Enable typing indicator", !!modStorage.typingIndicatorEnable);
                DrawCheckbox(700, 200, 64, 64, "Hide BC's typing & wardrobe icon on users showing BCX one", !!modStorage.typingIndicatorHideBC);
                DrawCheckbox(125, 300, 64, 64, "Enable status indicator showing when you are in any player's BCX menu, biography, or wardrobe", !!modStorage.screenIndicatorEnable);
                DrawCheckbox(125, 400, 64, 64, "Cheat: Prevent random NPC events (kidnappings, ransoms, asylum, club slaves)", cheatIsEnabled(MiscCheat.BlockRandomEvents));
                DrawCheckbox(125, 500, 64, 64, "Cheat: Prevent loosing Mistress status when reputation falls below 50 dominance", cheatIsEnabled(MiscCheat.CantLoseMistress));
                DrawCheckbox(125, 600, 64, 64, "Cheat: Give yourself the mistress padlock and its key", cheatIsEnabled(MiscCheat.GiveMistressKey));
                DrawCheckbox(125, 700, 64, 64, "Cheat: Give yourself the pandora padlock and its key", cheatIsEnabled(MiscCheat.GivePandoraKey));
                DrawText("Use the following text to auto fill the chat room search field:", 125, 830, "Black", "Gray");
                ElementPosition("BCX_RoomSearchValueField", 1320, 827, 460, 64);
            }
            else if (this.page === 1) {
                DrawCheckbox(125, 200, 64, 64, "Use the extended wardrobe importer as default", (_a = modStorage.wardrobeDefaultExtended) !== null && _a !== void 0 ? _a : true);
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.Misc]);
            }
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90) && this.character.isPlayer()) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (!this.character.isPlayer())
                return;
            if (MouseIn(1600, 820, 150, 90)) {
                this.setPage(clampWrap(this.page - 1, 0, GUI_MISC_PAGES - 1));
            }
            else if (MouseIn(1750, 820, 150, 90)) {
                this.setPage(clampWrap(this.page + 1, 0, GUI_MISC_PAGES - 1));
            }
            if (this.page === 0) {
                if (MouseIn(125, 200, 64, 64)) {
                    modStorage.typingIndicatorEnable = !modStorage.typingIndicatorEnable;
                    modStorageSync();
                    announceSelf();
                }
                if (MouseIn(700, 200, 64, 64)) {
                    modStorage.typingIndicatorHideBC = !modStorage.typingIndicatorHideBC;
                    modStorageSync();
                }
                if (MouseIn(125, 300, 64, 64)) {
                    modStorage.screenIndicatorEnable = !modStorage.screenIndicatorEnable;
                    modStorageSync();
                    announceSelf();
                }
                if (MouseIn(125, 400, 64, 64)) {
                    cheatToggle(MiscCheat.BlockRandomEvents);
                }
                if (MouseIn(125, 500, 64, 64)) {
                    cheatToggle(MiscCheat.CantLoseMistress);
                }
                if (MouseIn(125, 600, 64, 64)) {
                    cheatToggle(MiscCheat.GiveMistressKey);
                }
                if (MouseIn(125, 700, 64, 64)) {
                    cheatToggle(MiscCheat.GivePandoraKey);
                }
            }
            else if (this.page === 1) {
                if (MouseIn(125, 200, 64, 64)) {
                    modStorage.wardrobeDefaultExtended = !modStorage.wardrobeDefaultExtended;
                    modStorageSync();
                }
            }
        }
        Exit() {
            const field = document.getElementById("BCX_RoomSearchValueField");
            if (field) {
                if (field.value) {
                    modStorage.roomSearchAutoFill = field.value;
                }
                else {
                    delete modStorage.roomSearchAutoFill;
                }
                modStorageSync();
            }
            setSubscreen(new GuiMainMenu(this.character));
        }
        Unload() {
            ElementRemove("BCX_RoomSearchValueField");
        }
    }

    class GuiExportImportSelected extends GuiSubscreen {
        constructor(character, category) {
            super();
            this.showHelp = false;
            this.exportCompress = true;
            this.pasteListenredBound = this.pasteListener.bind(this);
            this.character = character;
            this.category = category;
        }
        Load() {
            let input = document.getElementById(`BCX_EI`);
            if (!input) {
                input = document.createElement("textarea");
                input.id = `BCX_EI`;
                input.name = `BCX_EI`;
                input.value = HELP_TEXTS[Views.ExportImportSelect];
                input.readOnly = true;
                input.disabled = true;
                input.setAttribute("screen-generated", CurrentScreen);
                input.className = "HideOnPopup";
                document.body.appendChild(input);
            }
            document.addEventListener("paste", this.pasteListenredBound);
        }
        Unload() {
            var _a;
            (_a = document.getElementById(`BCX_EI`)) === null || _a === void 0 ? void 0 : _a.remove();
            document.removeEventListener("paste", this.pasteListenredBound);
        }
        Run() {
            DrawText(`- Export / Import of ${this.category.name} on ${this.character.Name} -`, 125, 125, "Black", "Gray");
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png");
            MainCanvas.textAlign = "center";
            DrawButton(120, 180, 400, 90, "Export", "White", "", "Export current config");
            DrawButton(620, 180, 400, 90, "Import", "White", "", "Try to import a previously exported config");
            ElementPositionFix(`BCX_EI`, 36, 105, 380, 1790, 500);
            MainCanvas.textAlign = "left";
            DrawCheckbox(125, 290, 64, 64, "Export compressed", this.exportCompress);
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            const input = document.getElementById(`BCX_EI`);
            if (MouseIn(120, 180, 400, 90) && input) {
                input.disabled = false;
                input.value = "Exporting...";
                BCX_setTimeout(async () => {
                    try {
                        const result = await this.character.exportImportDoExport(this.category.category, this.exportCompress);
                        await navigator.clipboard.writeText(result);
                        input.value = "Exported to clipboard!";
                    }
                    catch (err) {
                        console.warn("Export failed:", err);
                        input.value = "Export failed:\n" + String(err);
                    }
                }, 0);
                return;
            }
            if (MouseIn(620, 180, 400, 90) && input) {
                BCX_setTimeout(async () => {
                    if (typeof navigator.clipboard.readText !== "function") {
                        input.value = "Please press Ctrl+V";
                        return;
                    }
                    const data = await navigator.clipboard.readText();
                    input.disabled = false;
                    input.value = "Importing...";
                    try {
                        input.value = await this.character.exportImportDoImport(this.category.category, data);
                    }
                    catch (err) {
                        console.warn("Import failed:", err);
                        input.value = "Import failed:\n" + String(err);
                    }
                }, 0);
                return;
            }
            if (MouseIn(125, 290, 64, 64)) {
                this.exportCompress = !this.exportCompress;
                return;
            }
        }
        pasteListener(ev) {
            const input = document.getElementById(`BCX_EI`);
            if (input) {
                ev.preventDefault();
                ev.stopImmediatePropagation();
                const data = (ev.clipboardData || window.clipboardData).getData("text");
                BCX_setTimeout(async () => {
                    input.disabled = false;
                    input.value = "Importing...";
                    try {
                        input.value = await this.character.exportImportDoImport(this.category.category, data);
                    }
                    catch (err) {
                        console.warn("Import failed:", err);
                        input.value = "Import failed:\n" + String(err);
                    }
                }, 0);
            }
        }
        Exit() {
            setSubscreen(new GuiExportImportMain(this.character));
        }
    }

    class GuiExportImportMain extends GuiSubscreen {
        constructor(character) {
            super();
            this.showHelp = false;
            this.disabledModules = TOGGLEABLE_MODULES;
            this.character = character;
        }
        Load() {
            this.character.getDisabledModules(5000).then(data => {
                this.disabledModules = data;
            }).catch(e => {
                this.disabledModules = [];
                console.error(`BCX: error getting disabled modules`, e);
            });
        }
        onChange(source) {
            if (source === this.character.MemberNumber) {
                this.Load();
            }
        }
        Run() {
            DrawText(`- Export / Import of BCX module configurations on ${this.character.Name} -`, 125, 125, "Black", "Gray");
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "BCX main menu");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            for (let i = 0; i < ExportImportCategories.length; i++) {
                const e = ExportImportCategories[i];
                const PX = Math.floor(i / 6);
                const PY = i % 6;
                const isDisabled = this.disabledModules.includes(e.module);
                DrawButton(150 + 530 * PX, 190 + 120 * PY, 500, 90, "", isDisabled ? "#ddd" : "White", MODULE_ICONS[e.module], isDisabled ? "Module is deactivated" : "", isDisabled);
                DrawTextFit(e.name, 250 + 530 * PX, 235 + 120 * PY, 390, "Black");
            }
            MainCanvas.textAlign = "left";
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.ExportImportMain]);
            }
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            for (let i = 0; i < ExportImportCategories.length; i++) {
                const e = ExportImportCategories[i];
                const PX = Math.floor(i / 6);
                const PY = i % 6;
                if (MouseIn(150 + 530 * PX, 190 + 120 * PY, 500, 90) && !this.disabledModules.includes(e.module)) {
                    setSubscreen(new GuiExportImportSelected(this.character, e));
                }
            }
        }
        Exit() {
            setSubscreen(new GuiMainMenu(this.character));
        }
    }

    const PER_PAGE_COUNT$3 = 6;
    class GuiRelationships extends GuiSubscreen {
        constructor(character) {
            super();
            this.relationshipsData = null;
            this.relationshipsList = [];
            this.failed = false;
            this.page = 0;
            this.memberNumberPrefill = null;
            this.showHelp = false;
            this.character = character;
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            this.character.relatonshipsGet().then(res => {
                if (!this.active)
                    return;
                this.relationshipsData = res;
                this.failed = false;
                this.onDataChange();
            }, err => {
                console.error(`BCX: Failed to get relationships data from ${this.character}`, err);
                this.relationshipsData = null;
                this.failed = true;
                this.onDataChange();
            });
        }
        onDataChange() {
            var _a, _b;
            if (!this.active)
                return;
            this.relationshipsList = [];
            let Input_NameAdd = document.getElementById("BCX_NameAdd");
            let Input_NewNameAdd = document.getElementById("BCX_NewNameAdd");
            if (this.relationshipsData == null) {
                Input_NameAdd === null || Input_NameAdd === void 0 ? void 0 : Input_NameAdd.remove();
                Input_NewNameAdd === null || Input_NewNameAdd === void 0 ? void 0 : Input_NewNameAdd.remove();
                return;
            }
            if (!Input_NameAdd) {
                Input_NameAdd = ElementCreateInput("BCX_NameAdd", "text", (_b = (_a = this.memberNumberPrefill) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "", "8");
                this.memberNumberPrefill = null;
            }
            if (!Input_NewNameAdd) {
                Input_NewNameAdd = ElementCreateInput("BCX_NewNameAdd", "text", "", String(NICKNAME_LENGTH_MAX));
            }
            this.relationshipsList = this.relationshipsData.relationships.map(entry => ({
                memberNumber: entry.memberNumber,
                name: getCharacterName(entry.memberNumber, null),
                newName: entry.nickname,
                enforced: entry.enforceNickname,
            }));
            this.page = clamp$1(this.page, 0, Math.ceil(this.relationshipsList.length / PER_PAGE_COUNT$3));
        }
        Run() {
            MainCanvas.textAlign = "left";
            DrawText(`- Relationships: Custom names shown (only) to ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "BCX main menu");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.Relationships]);
            }
            if (this.relationshipsData == null) {
                MainCanvas.textAlign = "center";
                DrawText(this.failed ? `Failed to get role data from ${this.character.Name}. Maybe you have no access?` : "Loading...", 800, 480, "Black");
                return;
            }
            MainCanvas.textAlign = "left";
            MainCanvas.fillStyle = "#eeeeee";
            MainCanvas.fillRect(130, 200, 1484, 64);
            DrawText("Actual character name", 140, 200 + 34, "Black");
            DrawText("Enforce speaking it?", 740, 200 + 34, "Black");
            DrawText("Custom name", 1260, 200 + 34, "Black");
            for (let off = 0; off < PER_PAGE_COUNT$3; off++) {
                const i = this.page * PER_PAGE_COUNT$3 + off;
                if (i >= this.relationshipsList.length)
                    break;
                const e = this.relationshipsList[i];
                const Y = 305 + off * 95;
                const allow = e.memberNumber === Player.MemberNumber ? this.relationshipsData.access_modify_self : this.relationshipsData.access_modify_others;
                MainCanvas.strokeRect(130, Y, 700, 64);
                const name = `${e.name === null ? "[unknown name]" : e.name} (${e.memberNumber})`;
                DrawTextFit(name, 140, Y + 34, 680, "Black");
                DrawCheckbox(880, Y, 64, 64, "", e.enforced, !allow);
                MainCanvas.strokeRect(994, Y, 500, 64);
                DrawTextFit(e.newName, 1004, Y + 34, 480, "Black");
                MainCanvas.textAlign = "center";
                if (MouseIn(880, Y, 64, 64))
                    DrawButtonHover(930, Y, 4, 64, `${this.character.Name} can only say the custom name`);
                if (allow) {
                    DrawButton(1550, Y, 64, 64, "X", "White", undefined, "Delete this custom name");
                }
                MainCanvas.textAlign = "left";
            }
            const Input_NameAdd = document.getElementById("BCX_NameAdd");
            if (Input_NameAdd) {
                DrawText("Member Number:", 130, 847, "Black");
                ElementPosition("BCX_NameAdd", 580, 842, 300, 64);
                if (!this.relationshipsData.access_modify_others) {
                    Input_NameAdd.value = String(Player.MemberNumber);
                }
            }
            DrawButton(740, 815, 64, 64, "", this.relationshipsData.access_modify_others ? "White" : "#ddd", undefined, undefined, !this.relationshipsData.access_modify_others);
            DrawImageEx("Icons/Title.png", 742, 815, { Width: 60, Height: 60 });
            MainCanvas.textAlign = "center";
            if (MouseIn(740, 815, 64, 64))
                DrawButtonHover(580, 890, 4, 64, `Select member number from list`);
            MainCanvas.textAlign = "left";
            const Input_NewNameAdd = document.getElementById("BCX_NewNameAdd");
            if (Input_NewNameAdd) {
                DrawText("New name:", 854, 847, "Black");
                ElementPosition("BCX_NewNameAdd", 1210, 842, 300, 64);
            }
            MainCanvas.textAlign = "center";
            const inputNumber = (Input_NameAdd && /^[0-9]+$/.test(Input_NameAdd.value)) ? Number.parseInt(Input_NameAdd.value, 10) : null;
            const allowAdd = inputNumber !== null &&
                (inputNumber === Player.MemberNumber ? this.relationshipsData.access_modify_self : this.relationshipsData.access_modify_others) &&
                Input_NewNameAdd &&
                isValidNickname(Input_NewNameAdd.value);
            DrawButton(1375, 815, 90, 64, "Add", allowAdd ? "White" : "#ddd", undefined, undefined, !allowAdd);
            const totalPages = Math.max(Math.ceil(this.relationshipsList.length / PER_PAGE_COUNT$3), 1);
            DrawBackNextButton(1605, 800, 300, 90, `Page ${this.page + 1} / ${totalPages}`, "White", "", () => "", () => "");
        }
        Click() {
            var _a, _b, _c, _d;
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (!this.relationshipsData)
                return;
            for (let off = 0; off < PER_PAGE_COUNT$3; off++) {
                const i = this.page * PER_PAGE_COUNT$3 + off;
                if (i >= this.relationshipsList.length)
                    break;
                const e = this.relationshipsList[i];
                const Y = 305 + off * 95;
                const allow = e.memberNumber === Player.MemberNumber ? this.relationshipsData.access_modify_self : this.relationshipsData.access_modify_others;
                if (MouseIn(880, Y, 64, 64) && allow) {
                    this.character.relationshipsSet({
                        memberNumber: e.memberNumber,
                        nickname: e.newName,
                        enforceNickname: !e.enforced,
                    });
                    return;
                }
                if (MouseIn(1550, Y, 64, 64) && allow) {
                    this.character.relationshipsRemove(e.memberNumber);
                    return;
                }
            }
            const Input_NameAdd = document.getElementById("BCX_NameAdd");
            const inputText = (_a = Input_NameAdd === null || Input_NameAdd === void 0 ? void 0 : Input_NameAdd.value) !== null && _a !== void 0 ? _a : "";
            const inputNumber = /^[0-9]+$/.test(inputText) ? Number.parseInt(inputText, 10) : null;
            const Input_NewNameAdd = document.getElementById("BCX_NewNameAdd");
            const inputText_2 = (_b = Input_NewNameAdd === null || Input_NewNameAdd === void 0 ? void 0 : Input_NewNameAdd.value) !== null && _b !== void 0 ? _b : "";
            if (Input_NameAdd &&
                Input_NewNameAdd &&
                inputNumber !== null &&
                isValidNickname(inputText_2) &&
                MouseIn(1375, 815, 90, 64) &&
                (inputNumber === Player.MemberNumber ? this.relationshipsData.access_modify_self : this.relationshipsData.access_modify_others)) {
                Input_NameAdd.value = "";
                Input_NewNameAdd.value = "";
                console.log("Send set");
                this.character.relationshipsSet({
                    memberNumber: inputNumber,
                    nickname: inputText_2,
                    enforceNickname: (_d = (_c = this.relationshipsList.find(r => r.memberNumber === inputNumber)) === null || _c === void 0 ? void 0 : _c.enforced) !== null && _d !== void 0 ? _d : false,
                });
                return;
            }
            if (MouseIn(740, 815, 64, 64) && this.relationshipsData.access_modify_others) {
                setSubscreen(new GuiMemberSelect(this.character, this, result => {
                    this.memberNumberPrefill = result;
                }, this.relationshipsData.access_modify_self ? undefined : [getPlayerCharacter().MemberNumber]));
                return;
            }
            const totalPages = Math.ceil(this.relationshipsList.length / PER_PAGE_COUNT$3);
            if (MouseIn(1605, 800, 150, 90)) {
                this.page--;
                if (this.page < 0) {
                    this.page = Math.max(totalPages - 1, 0);
                }
            }
            else if (MouseIn(1755, 800, 150, 90)) {
                this.page++;
                if (this.page >= totalPages) {
                    this.page = 0;
                }
            }
        }
        Exit() {
            setSubscreen(new GuiMainMenu(this.character));
        }
        Unload() {
            ElementRemove("BCX_NameAdd");
            ElementRemove("BCX_NewNameAdd");
        }
    }

    var ScreenState;
    (function (ScreenState) {
        ScreenState[ScreenState["main"] = 0] = "main";
        ScreenState[ScreenState["clothSelect"] = 1] = "clothSelect";
        ScreenState[ScreenState["cosplaySelect"] = 2] = "cosplaySelect";
        ScreenState[ScreenState["bodySelect"] = 3] = "bodySelect";
        ScreenState[ScreenState["lockSelect"] = 4] = "lockSelect";
    })(ScreenState || (ScreenState = {}));
    const CATEGORIES_BASE = {
        clothes: {
            title: "clothing",
            filter: (g) => isCloth(g, false),
        },
        cosplay: {
            title: "cosplay items",
            filter: (g) => isCosplay(g),
        },
        body: {
            title: "body parts",
            filter: (g) => isBody(g),
        },
        items: {
            title: "items",
            filter: (g) => isBind(g, ["ItemNeck", "ItemNeckAccessories", "ItemNeckRestraints", "ItemNipplesPiercings", "ItemVulvaPiercings"]),
        },
        piercings: {
            title: "piercings",
            filter: (g) => isBind(g, []) && ["ItemNipplesPiercings", "ItemVulvaPiercings"].includes(g.Name),
        },
        collar: {
            title: "collar and accessories",
            filter: (g) => isBind(g, []) && ["ItemNeck", "ItemNeckAccessories", "ItemNeckRestraints"].includes(g.Name),
        },
    };
    const CATEGORIES$1 = CATEGORIES_BASE;
    const BACKGROUND_SELECTION = [
        null,
        "Introduction",
        "BrickWall",
        "grey",
        "White",
    ];
    let LOCK_TYPES_LIST = [];
    let backgroundIndex = 0;
    const enabledSlots = new Set();
    const enabledLocks = new Set();
    function ExtendedWardrobeInit() {
        for (const category of [CATEGORIES$1.clothes, CATEGORIES$1.cosplay]) {
            AssetGroup.filter(g => category.filter(g)).forEach(g => enabledSlots.add(g.Name));
        }
        const lockAssets = Asset.filter(a => a.Group.Name === "ItemMisc" && a.IsLock);
        LOCK_TYPES_LIST = arrayUnique(lockAssets);
        for (const lock of lockAssets) {
            if (!lock.OwnerOnly && !lock.LoverOnly && !InventoryIsPermissionBlocked(Player, lock.Name, lock.Group.Name)) {
                enabledLocks.add(lock.Name);
            }
        }
    }
    class GuiWardrobeExtended extends GuiSubscreen {
        constructor(exitCallback, character, allowBinds, data, clothesOnly) {
            var _a, _b;
            super();
            this.screenState = ScreenState.main;
            this.hiddenElements = new Set();
            this.allowLocks = false;
            this.showHelp = false;
            this.doApply = false;
            this.skippedBlockedCount = 0;
            this.exitCallback = exitCallback;
            this.character = character;
            this.allowBindsBase = allowBinds;
            this.clothesOnly = clothesOnly;
            allowBinds && (allowBinds = !clothesOnly);
            this.allowBinds = allowBinds;
            this.bindsBlockedByLock = false;
            this.allowPiercings = allowBinds;
            this.piercingsBlockedByLock = false;
            this.allowCollar = allowBinds;
            this.collarBlockedByLock = false;
            this.data = data;
            const chatroomCharacter = character.MemberNumber && getChatroomCharacter(character.MemberNumber);
            this.allowCosplay = character.IsPlayer() || ((_a = character.OnlineSharedSettings) === null || _a === void 0 ? void 0 : _a.BlockBodyCosplay) === false;
            this.allowBody = character.IsPlayer() || ((_b = character.OnlineSharedSettings) === null || _b === void 0 ? void 0 : _b.AllowFullWardrobeAccess) === true;
            if (chatroomCharacter && chatroomCharacter.BCXVersion && (!this.allowCosplay || !this.allowBody)) {
                sendQuery("rule_alt_allow_changing_appearance", undefined, chatroomCharacter.MemberNumber).then(res => {
                    if (res) {
                        this.allowCosplay = true;
                        this.allowBody = true;
                    }
                });
            }
        }
        Load() {
            var _a;
            for (const el of Array.from(document.getElementsByClassName("HideOnPopup"))) {
                if (el instanceof HTMLElement && el.style.display !== "none") {
                    this.hiddenElements.add(el);
                    el.style.display = "none";
                }
            }
            this.originalAppearance = CharacterAppearanceStringify(this.character);
            this.originalData = this.character.Appearance.map(WardrobeAssetBundle);
            this.skippedBlockedCount = 0;
            for (let i = this.data.length - 1; i >= 0; i--) {
                const item = this.data[i];
                if (!ValidationCanAccessCheck(this.character, item.Group, item.Name, (_a = item.Property) === null || _a === void 0 ? void 0 : _a.Type)) {
                    this.data.splice(i, 1);
                    this.skippedBlockedCount++;
                }
            }
            for (const group of AssetGroup) {
                if (group.AllowNone)
                    continue;
                if (!this.data.some(i => i.Group === group.Name)) {
                    const current = this.originalData.find(i => i.Group === group.Name);
                    if (current) {
                        this.data.push(current);
                    }
                }
            }
            if (this.allowBinds && WardrobeImportCheckChangesLockedItem(this.character, this.data, WardrobeImportMakeFilterFunction({
                cloth: false,
                cosplay: false,
                body: false,
                binds: true,
                collar: false,
                piercings: false,
            }))) {
                this.allowBinds = false;
                this.bindsBlockedByLock = true;
            }
            if (this.allowPiercings && WardrobeImportCheckChangesLockedItem(this.character, this.data, WardrobeImportMakeFilterFunction({
                cloth: false,
                cosplay: false,
                body: false,
                binds: true,
                collar: false,
                piercings: true,
            }))) {
                this.allowPiercings = false;
                this.piercingsBlockedByLock = true;
            }
            if (this.allowCollar && WardrobeImportCheckChangesLockedItem(this.character, this.data, WardrobeImportMakeFilterFunction({
                cloth: false,
                cosplay: false,
                body: false,
                binds: false,
                collar: true,
                piercings: false,
            }))) {
                this.allowCollar = false;
                this.collarBlockedByLock = true;
            }
            this.refresh();
        }
        Unload() {
            for (const el of this.hiddenElements) {
                el.style.display = "";
            }
            this.hiddenElements.clear();
            if (!this.doApply) {
                CharacterAppearanceRestore(this.character, this.originalAppearance);
                CharacterRefresh(this.character);
            }
        }
        Run() {
            backgroundIndex = clampWrap(backgroundIndex, 0, BACKGROUND_SELECTION.length - 1);
            const background = BACKGROUND_SELECTION[backgroundIndex];
            if (background) {
                DrawImageEx("Backgrounds/" + background + ".jpg", 0, 0);
            }
            MainCanvas.textAlign = "center";
            DrawButton(1420, 45, 50, 50, "", "White", "", "Color help");
            DrawImageEx("Icons/Question.png", 1420 + 3, 45 + 3, { Width: 44, Height: 44 });
            DrawButton(1515, 45, 207, 50, "Import", "White", "");
            DrawButton(1766, 25, 90, 90, "", "White", "./Icons/Cancel.png");
            DrawButton(1884, 25, 90, 90, "", "White", "./Icons/Accept.png");
            DrawBackNextButton(25, 25, 340, 90, `Background ${backgroundIndex + 1} / ${Math.max(BACKGROUND_SELECTION.length, 1)}`, "White", "", () => "", () => "");
            if (this.showHelp) {
                MainCanvas.strokeStyle = "black";
                MainCanvas.fillStyle = "#ffffff88";
                MainCanvas.beginPath();
                MainCanvas.rect(25, 300, 340, 450);
                MainCanvas.fill();
                MainCanvas.stroke();
                DrawText("Color legend", 195, 340, "Black", "#ddd");
                MainCanvas.fillStyle = "#ffb";
                MainCanvas.fillRect(50, 374, 290, 64);
                MainCanvas.fillStyle = "#fff";
                MainCanvas.fillRect(50, 438, 290, 64);
                MainCanvas.fillStyle = "#88c";
                MainCanvas.fillRect(50, 502, 290, 64);
                MainCanvas.fillStyle = "#ccc";
                MainCanvas.fillRect(50, 566, 290, 64);
                MainCanvas.fillStyle = "#faa";
                MainCanvas.fillRect(50, 630, 290, 64);
                MainCanvas.textAlign = "center";
                DrawTextFit(`Items are added`, 50 + 295 / 2, 374 + 34, 276, "Black");
                DrawTextFit(`Items are removed`, 50 + 295 / 2, 438 + 34, 276, "Black");
                DrawTextFit(`No item changes`, 50 + 295 / 2, 502 + 34, 276, "Black");
                DrawTextFit(`Not available/permitted`, 50 + 295 / 2, 566 + 34, 276, "Black");
                DrawTextFit(`Blocked by locks`, 50 + 295 / 2, 630 + 34, 276, "Black");
            }
            DrawCharacter(this.character, 460, 0, 1, true, MainCanvas);
            if (this.screenState === ScreenState.main) {
                MainCanvas.strokeStyle = "black";
                MainCanvas.fillStyle = "#ffffffcc";
                MainCanvas.beginPath();
                MainCanvas.rect(1000 - 30, 250 - 30, 750 + 60, 650 + 60);
                MainCanvas.fill();
                MainCanvas.stroke();
                MainCanvas.fillStyle = "Black";
                {
                    MainCanvas.textAlign = "left";
                    const { checked, color, disabled } = this.getGlobalSelectorState("clothes");
                    DrawButton(1000, 250, 50, 50, "", color, undefined, undefined, disabled);
                    DrawTextFit("Clothes", 1100, 275, 300, "black");
                    if (checked === "partial") {
                        MainCanvas.fillRect(1000 + 8, 250 + 8, 34, 34);
                    }
                    else if (checked === "yes") {
                        DrawImageEx("./Icons/Checked.png", 1000 + 6, 250 + 6, { Width: 38, Height: 38 });
                    }
                    MainCanvas.textAlign = "center";
                    DrawButton(1400, 250, 350, 50, "Select individually", disabled ? "#ccc" : "White", undefined, undefined, disabled);
                }
                {
                    MainCanvas.textAlign = "left";
                    const { checked, color, disabled } = this.getGlobalSelectorState("cosplay");
                    DrawButton(1000, 350, 50, 50, "", color, undefined, undefined, disabled);
                    DrawTextFit("Cosplay items", 1100, 375, 300, "black");
                    if (checked === "partial") {
                        MainCanvas.fillRect(1000 + 8, 350 + 8, 34, 34);
                    }
                    else if (checked === "yes") {
                        DrawImageEx("./Icons/Checked.png", 1000 + 6, 350 + 6, { Width: 38, Height: 38 });
                    }
                    MainCanvas.textAlign = "center";
                    DrawButton(1400, 350, 350, 50, "Select individually", disabled ? "#ccc" : "White", undefined, undefined, disabled);
                }
                {
                    MainCanvas.textAlign = "left";
                    const { checked, color, disabled } = this.getGlobalSelectorState("body");
                    DrawButton(1000, 450, 50, 50, "", color, undefined, undefined, disabled);
                    DrawTextFit("Body", 1100, 475, 300, "black", "white");
                    if (checked === "partial") {
                        MainCanvas.fillRect(1000 + 8, 450 + 8, 34, 34);
                    }
                    else if (checked === "yes") {
                        DrawImageEx("./Icons/Checked.png", 1000 + 6, 450 + 6, { Width: 38, Height: 38 });
                    }
                    MainCanvas.textAlign = "center";
                    DrawButton(1400, 450, 350, 50, "Select individually", disabled ? "#ccc" : "White", undefined, undefined, disabled);
                }
                {
                    MainCanvas.textAlign = "left";
                    const { checked, color, disabled } = this.getGlobalSelectorState("items");
                    DrawButton(1000, 550, 50, 50, "", color, undefined, undefined, disabled);
                    DrawTextFit("Restraints/items", 1100, 575, 300, "black");
                    if (checked === "partial") {
                        MainCanvas.fillRect(1000 + 8, 550 + 8, 34, 34);
                    }
                    else if (checked === "yes") {
                        DrawImageEx("./Icons/Checked.png", 1000 + 6, 550 + 6, { Width: 38, Height: 38 });
                    }
                }
                {
                    MainCanvas.textAlign = "left";
                    const { checked, color, disabled } = this.getGlobalSelectorState("collar");
                    DrawButton(1000, 650, 50, 50, "", color, undefined, undefined, disabled);
                    DrawTextFit("Collar", 1100, 675, 300, "black");
                    if (checked === "partial") {
                        MainCanvas.fillRect(1000 + 8, 650 + 8, 34, 34);
                    }
                    else if (checked === "yes") {
                        DrawImageEx("./Icons/Checked.png", 1000 + 6, 650 + 6, { Width: 38, Height: 38 });
                    }
                }
                {
                    MainCanvas.textAlign = "left";
                    const { checked, color, disabled } = this.getGlobalSelectorState("piercings");
                    DrawButton(1000, 750, 50, 50, "", color, undefined, undefined, disabled);
                    DrawTextFit("Piercings", 1100, 775, 300, "black");
                    if (checked === "partial") {
                        MainCanvas.fillRect(1000 + 8, 750 + 8, 34, 34);
                    }
                    else if (checked === "yes") {
                        DrawImageEx("./Icons/Checked.png", 1000 + 6, 750 + 6, { Width: 38, Height: 38 });
                    }
                }
                {
                    MainCanvas.textAlign = "left";
                    const { checked, color, disabled } = this.getLocksState();
                    DrawButton(1000, 850, 50, 50, "", color, undefined, undefined, disabled);
                    DrawTextFit("Locks", 1100, 875, 300, "black");
                    if (checked === "partial") {
                        MainCanvas.fillRect(1000 + 8, 850 + 8, 34, 34);
                    }
                    else if (checked === "yes") {
                        DrawImageEx("./Icons/Checked.png", 1000 + 6, 850 + 6, { Width: 38, Height: 38 });
                    }
                    MainCanvas.textAlign = "center";
                    DrawButton(1400, 850, 350, 50, "Select individually", disabled ? "#ccc" : "White", undefined, undefined, disabled);
                }
                let warning;
                if (this.skippedBlockedCount > 0) {
                    warning = `Skipped ${this.skippedBlockedCount} blocked/limited item${this.skippedBlockedCount > 1 ? "s" : ""}`;
                }
                else if (!this.allowBindsBase && !this.clothesOnly) {
                    warning = `You do not have permission to import items.`;
                }
                if (warning) {
                    MainCanvas.fillStyle = "Pink";
                    MainCanvas.strokeStyle = "Black";
                    MainCanvas.beginPath();
                    MainCanvas.rect(1000 - 30, 180 - 40, 750 + 60, 70);
                    MainCanvas.fill();
                    MainCanvas.stroke();
                    DrawTextFit(warning, 1370, 177, 800, "Black");
                }
            }
            else if (this.screenState === ScreenState.clothSelect) {
                this.drawSelectorArea("clothes");
            }
            else if (this.screenState === ScreenState.cosplaySelect) {
                this.drawSelectorArea("cosplay");
            }
            else if (this.screenState === ScreenState.bodySelect) {
                this.drawSelectorArea("body");
            }
            else if (this.screenState === ScreenState.lockSelect) {
                this.drawLocksSelector();
            }
        }
        drawSelectorArea(selectorType) {
            var _a, _b, _c;
            const category = CATEGORIES$1[selectorType];
            const AssetGroups = AssetGroup.filter(category.filter);
            MainCanvas.textAlign = "left";
            MainCanvas.fillStyle = "#cccccc";
            MainCanvas.fillRect(900 + 105, 165, 830, 64);
            DrawText(`Choose ${category.title}`, 900 + 390, 165 + 34, "Black");
            MainCanvas.textAlign = "center";
            DrawButton(900 + 120, 173, 200, 48, "<<< Back", "White");
            for (let i = 0; i < AssetGroups.length; i++) {
                const row = i % 10;
                const column = Math.floor(i / 10);
                const group = AssetGroups[i];
                const current = this.originalData.find(item => item.Group === group.Name);
                const currentAsset = current && AssetGet(this.character.AssetFamily, current.Group, current.Name);
                const request = this.data.find(item => item.Group === group.Name);
                const requestAsset = request && AssetGet(this.character.AssetFamily, request.Group, request.Name);
                const matches = checkImportItemNoChange(group.Name, this.data, this.originalData);
                const identicalItem = (currentAsset === null || currentAsset === void 0 ? void 0 : currentAsset.Name) === (requestAsset === null || requestAsset === void 0 ? void 0 : requestAsset.Name);
                const color = matches ? "#88c" : requestAsset ? "#ffb" : "#fff";
                const text = matches ? ((_a = currentAsset === null || currentAsset === void 0 ? void 0 : currentAsset.Description) !== null && _a !== void 0 ? _a : "[EMPTY]") :
                    identicalItem ? `Changes to the configuration of ${currentAsset === null || currentAsset === void 0 ? void 0 : currentAsset.Description}` :
                        ((_b = currentAsset === null || currentAsset === void 0 ? void 0 : currentAsset.Description) !== null && _b !== void 0 ? _b : "[EMPTY]") + " 🠖 " + ((_c = requestAsset === null || requestAsset === void 0 ? void 0 : requestAsset.Description) !== null && _c !== void 0 ? _c : "[EMPTY]");
                DrawButton(900 + 106 + 281 * column, 240 + 69 * row, 265, 54, getVisibleGroupName(group), color, undefined, undefined, matches);
                if (MouseIn(900 + 106 + 281 * column, 240 + 69 * row, 265, 54)) {
                    const Left = 900 + 106;
                    const Top = 240 + 690;
                    MainCanvas.fillStyle = "#FFFF88";
                    MainCanvas.lineWidth = 2;
                    MainCanvas.strokeStyle = "black";
                    MainCanvas.beginPath();
                    MainCanvas.rect(Left, Top, 826, 65);
                    MainCanvas.fill();
                    MainCanvas.stroke();
                    DrawTextFit(text, Left + 413, Top + 33, 820, "black");
                }
                if (!matches && enabledSlots.has(group.Name)) {
                    MainCanvas.strokeStyle = "#FF69B4";
                    MainCanvas.lineWidth = 4;
                    MainCanvas.strokeRect(900 + 106 + 281 * column - 2, 240 + 69 * row - 2, 265 + 4, 54 + 4);
                }
            }
        }
        clickSelectorArea(selectorType) {
            const category = CATEGORIES$1[selectorType];
            const AssetGroups = AssetGroup.filter(category.filter);
            if (MouseIn(900 + 120, 173, 200, 48)) {
                this.screenState = ScreenState.main;
                return;
            }
            for (let i = 0; i < AssetGroups.length; i++) {
                const row = i % 10;
                const column = Math.floor(i / 10);
                const group = AssetGroups[i];
                const matches = checkImportItemNoChange(group.Name, this.data, this.originalData);
                if (MouseIn(900 + 106 + 281 * column, 240 + 69 * row, 265, 54) && !matches) {
                    const selected = enabledSlots.has(group.Name);
                    if (selected) {
                        enabledSlots.delete(group.Name);
                    }
                    else {
                        enabledSlots.add(group.Name);
                    }
                    this.refresh();
                    return;
                }
            }
        }
        drawLocksSelector() {
            const importedLockTypes = new Set(this.data
                .filter((g) => {
                var _a;
                return isObject$1(g.Property) &&
                    typeof g.Property.LockedBy === "string" &&
                    ((_a = AssetGet(this.character.AssetFamily, "ItemMisc", g.Property.LockedBy)) === null || _a === void 0 ? void 0 : _a.IsLock) === true;
            })
                .map(g => g.Property.LockedBy));
            MainCanvas.textAlign = "left";
            MainCanvas.fillStyle = "#cccccc";
            MainCanvas.fillRect(900 + 105, 165, 830, 64);
            DrawText(`Choose lock types`, 900 + 390, 165 + 34, "Black");
            MainCanvas.textAlign = "center";
            DrawButton(900 + 120, 173, 200, 48, "<<< Back", "White");
            for (let i = 0; i < LOCK_TYPES_LIST.length; i++) {
                const row = i % 10;
                const column = Math.floor(i / 10);
                const lock = LOCK_TYPES_LIST[i];
                const requested = importedLockTypes.has(lock.Name);
                const color = requested ? "#ffb" : "#88c";
                DrawButton(900 + 106 + 281 * column, 240 + 69 * row, 265, 54, lock.Description, color, undefined, undefined, !requested);
                if (requested && enabledLocks.has(lock.Name)) {
                    MainCanvas.strokeStyle = "#FF69B4";
                    MainCanvas.lineWidth = 4;
                    MainCanvas.strokeRect(900 + 106 + 281 * column - 2, 240 + 69 * row - 2, 265 + 4, 54 + 4);
                }
            }
        }
        clickLocksSelector() {
            const importedLockTypes = new Set(this.data
                .filter((g) => {
                var _a;
                return isObject$1(g.Property) &&
                    typeof g.Property.LockedBy === "string" &&
                    ((_a = AssetGet(this.character.AssetFamily, "ItemMisc", g.Property.LockedBy)) === null || _a === void 0 ? void 0 : _a.IsLock) === true;
            })
                .map(g => g.Property.LockedBy));
            if (MouseIn(900 + 120, 173, 200, 48)) {
                this.screenState = ScreenState.main;
                return;
            }
            for (let i = 0; i < LOCK_TYPES_LIST.length; i++) {
                const row = i % 10;
                const column = Math.floor(i / 10);
                const lock = LOCK_TYPES_LIST[i];
                const requested = importedLockTypes.has(lock.Name);
                if (MouseIn(900 + 106 + 281 * column, 240 + 69 * row, 265, 54) && requested) {
                    const selected = enabledLocks.has(lock.Name);
                    if (selected) {
                        enabledLocks.delete(lock.Name);
                    }
                    else {
                        enabledLocks.add(lock.Name);
                    }
                    this.refresh();
                    return;
                }
            }
        }
        Click() {
            if (MouseIn(1420, 45, 50, 50) || (MouseIn(25, 300, 340, 450) && this.showHelp)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (MouseIn(1515, 45, 207, 50)) {
                BCX_setTimeout(async () => {
                    if (typeof navigator.clipboard.readText !== "function") {
                        InfoBeep("Please press Ctrl+V", 5000);
                        return;
                    }
                    const data = await navigator.clipboard.readText();
                    const parsedData = parseWardrobeImportData(data);
                    if (typeof parsedData === "string") {
                        InfoBeep(parsedData, 5000);
                        return;
                    }
                    this.exitCallback(new GuiWardrobeExtended(this.exitCallback, this.character, this.allowBindsBase, parsedData, false));
                }, 0);
                return;
            }
            if (MouseIn(1766, 25, 90, 90)) {
                return this.Exit();
            }
            if (MouseIn(1884, 25, 90, 90)) {
                this.doApply = true;
                return this.Exit();
            }
            if (MouseIn(25, 25, 170, 90)) {
                backgroundIndex = clampWrap(backgroundIndex - 1, 0, BACKGROUND_SELECTION.length - 1);
                return;
            }
            else if (MouseIn(195, 25, 170, 90)) {
                backgroundIndex = clampWrap(backgroundIndex + 1, 0, BACKGROUND_SELECTION.length - 1);
                return;
            }
            if (this.screenState === ScreenState.main) {
                if (MouseIn(1000, 250, 50, 50)) {
                    const current = this.getGlobalSelectorState("clothes");
                    if (!current.disabled) {
                        AssetGroup
                            .filter(CATEGORIES$1.clothes.filter)
                            .forEach(g => {
                            if (current.checked === "no") {
                                enabledSlots.add(g.Name);
                            }
                            else {
                                enabledSlots.delete(g.Name);
                            }
                        });
                        this.refresh();
                    }
                    return;
                }
                if (MouseIn(1400, 250, 350, 50) && !this.getGlobalSelectorState("clothes").disabled) {
                    this.screenState = ScreenState.clothSelect;
                }
                if (MouseIn(1000, 350, 50, 50)) {
                    const current = this.getGlobalSelectorState("cosplay");
                    if (!current.disabled) {
                        AssetGroup
                            .filter(CATEGORIES$1.cosplay.filter)
                            .forEach(g => {
                            if (current.checked === "no") {
                                enabledSlots.add(g.Name);
                            }
                            else {
                                enabledSlots.delete(g.Name);
                            }
                        });
                        this.refresh();
                    }
                    return;
                }
                if (MouseIn(1400, 350, 350, 50) && !this.getGlobalSelectorState("cosplay").disabled) {
                    this.screenState = ScreenState.cosplaySelect;
                }
                if (MouseIn(1000, 450, 50, 50)) {
                    const current = this.getGlobalSelectorState("body");
                    if (!current.disabled) {
                        AssetGroup
                            .filter(CATEGORIES$1.body.filter)
                            .forEach(g => {
                            if (current.checked === "no") {
                                enabledSlots.add(g.Name);
                            }
                            else {
                                enabledSlots.delete(g.Name);
                            }
                        });
                        this.refresh();
                    }
                    return;
                }
                if (MouseIn(1400, 450, 350, 50) && !this.getGlobalSelectorState("body").disabled) {
                    this.screenState = ScreenState.bodySelect;
                }
                if (MouseIn(1000, 550, 50, 50)) {
                    const current = this.getGlobalSelectorState("items");
                    if (!current.disabled) {
                        AssetGroup
                            .filter(CATEGORIES$1.items.filter)
                            .forEach(g => {
                            if (current.checked === "no") {
                                enabledSlots.add(g.Name);
                            }
                            else {
                                enabledSlots.delete(g.Name);
                            }
                        });
                        this.refresh();
                    }
                    return;
                }
                if (MouseIn(1000, 650, 50, 50)) {
                    const current = this.getGlobalSelectorState("collar");
                    if (!current.disabled) {
                        AssetGroup
                            .filter(CATEGORIES$1.collar.filter)
                            .forEach(g => {
                            if (current.checked === "no") {
                                enabledSlots.add(g.Name);
                            }
                            else {
                                enabledSlots.delete(g.Name);
                            }
                        });
                        this.refresh();
                    }
                    return;
                }
                if (MouseIn(1000, 750, 50, 50)) {
                    const current = this.getGlobalSelectorState("piercings");
                    if (!current.disabled) {
                        AssetGroup
                            .filter(CATEGORIES$1.piercings.filter)
                            .forEach(g => {
                            if (current.checked === "no") {
                                enabledSlots.add(g.Name);
                            }
                            else {
                                enabledSlots.delete(g.Name);
                            }
                        });
                        this.refresh();
                    }
                    return;
                }
                if (MouseIn(1000, 850, 50, 50)) {
                    const current = this.getLocksState();
                    if (!current.disabled) {
                        LOCK_TYPES_LIST
                            .forEach(lock => {
                            if (current.checked === "no") {
                                enabledLocks.add(lock.Name);
                            }
                            else {
                                enabledLocks.delete(lock.Name);
                            }
                        });
                        this.refresh();
                    }
                    return;
                }
                if (MouseIn(1400, 850, 350, 50) && !this.getLocksState().disabled) {
                    this.screenState = ScreenState.lockSelect;
                }
            }
            else if (this.screenState === ScreenState.clothSelect) {
                this.clickSelectorArea("clothes");
            }
            else if (this.screenState === ScreenState.cosplaySelect) {
                this.clickSelectorArea("cosplay");
            }
            else if (this.screenState === ScreenState.bodySelect) {
                this.clickSelectorArea("body");
            }
            else if (this.screenState === ScreenState.lockSelect) {
                this.clickLocksSelector();
            }
        }
        Exit() {
            this.exitCallback(null);
        }
        refresh() {
            const itemsState = this.getGlobalSelectorState("items");
            const collarState = this.getGlobalSelectorState("collar");
            const piercingsState = this.getGlobalSelectorState("piercings");
            this.allowLocks =
                this.data.some(a => { var _a, _b; return (_b = (_a = a.Property) === null || _a === void 0 ? void 0 : _a.Effect) === null || _b === void 0 ? void 0 : _b.includes("Lock"); }) &&
                    (this.allowBinds && itemsState.checked !== "no" && !itemsState.disabled ||
                        this.allowPiercings && piercingsState.checked !== "no" && !piercingsState.disabled ||
                        this.allowCollar && collarState.checked !== "no" && !collarState.disabled);
            CharacterAppearanceRestore(this.character, this.originalAppearance);
            WardrobeDoImport(this.character, this.data, a => this.checkAllowChange(smartGetAssetGroup(a)), this.allowLocks ? enabledLocks : false);
        }
        checkAllowChange(group) {
            if (!this.allowCosplay && CATEGORIES$1.cosplay.filter(group))
                return false;
            if (!this.allowBody && CATEGORIES$1.body.filter(group))
                return false;
            if (!this.allowBinds && CATEGORIES$1.items.filter(group))
                return false;
            if (!this.allowPiercings && CATEGORIES$1.piercings.filter(group))
                return false;
            if (!this.allowCollar && CATEGORIES$1.collar.filter(group))
                return false;
            return enabledSlots.has(group.Name) && !checkImportItemNoChange(group.Name, this.data, this.originalData);
        }
        getGlobalSelectorState(type) {
            const category = CATEGORIES$1[type];
            const AssetGroups = AssetGroup.filter(category.filter);
            if (checkImportTypeNoChange(type, this.data, this.originalData))
                return {
                    checked: "no",
                    color: "#88c",
                    disabled: true,
                };
            const allowed = type === "clothes" ? true :
                type === "cosplay" ? this.allowCosplay :
                    type === "body" ? this.allowBody :
                        type === "items" ? this.allowBinds :
                            type === "piercings" ? this.allowPiercings :
                                type === "collar" ? this.allowCollar :
                                    false;
            const blockedByLock = !allowed && (type === "items" ? this.bindsBlockedByLock :
                type === "piercings" ? this.piercingsBlockedByLock :
                    type === "collar" ? this.collarBlockedByLock :
                        false);
            if (!allowed)
                return {
                    checked: "no",
                    color: blockedByLock ? "#faa" : "#ccc",
                    disabled: true,
                };
            const assetGroupsWithChange = AssetGroups.filter(g => !checkImportItemNoChange(g.Name, this.data, this.originalData));
            let checked = "no";
            const selectedSlots = assetGroupsWithChange.map(g => g.Name).filter(g => enabledSlots.has(g));
            if (selectedSlots.length > 0) {
                checked = selectedSlots.length === assetGroupsWithChange.length ? "yes" : "partial";
            }
            return {
                checked,
                color: this.data.some(bi => AssetGroups.some(g => g.Name === bi.Group)) ? "#ffb" : "#fff",
                disabled: false,
            };
        }
        getLocksState() {
            const lockTypes = new Set(this.data
                .filter((g) => {
                var _a;
                return isObject$1(g.Property) &&
                    typeof g.Property.LockedBy === "string" &&
                    ((_a = AssetGet(this.character.AssetFamily, "ItemMisc", g.Property.LockedBy)) === null || _a === void 0 ? void 0 : _a.IsLock) === true;
            })
                .map(g => g.Property.LockedBy));
            if (lockTypes.size === 0)
                return {
                    checked: "no",
                    color: "#88c",
                    disabled: true,
                };
            if (!this.allowLocks)
                return {
                    checked: "no",
                    color: "#ccc",
                    disabled: true,
                };
            let checked = "no";
            const selectedLocks = Array.from(lockTypes).filter(l => enabledLocks.has(l));
            if (selectedLocks.length > 0) {
                checked = selectedLocks.length === lockTypes.size ? "yes" : "partial";
            }
            return {
                checked,
                color: "#ffb",
                disabled: false,
            };
        }
    }
    function checkImportTypeNoChange(type, a, b) {
        const category = CATEGORIES$1[type];
        return AssetGroup
            .filter(category.filter)
            .every(g => checkImportItemNoChange(g.Name, a, b));
    }
    function checkImportItemNoChange(group, a, b) {
        var _a, _b, _c, _d;
        const item1 = a.find(i => i.Group === group);
        const item2 = b.find(i => i.Group === group);
        if (item1 === undefined && item2 === undefined)
            return true;
        if (item1 === undefined || item2 === undefined)
            return false;
        return (item1.Group === item2.Group &&
            item1.Name === item2.Name &&
            itemColorsEquals(item1.Color, item2.Color) &&
            ((_a = item1.Difficulty) !== null && _a !== void 0 ? _a : 0) === ((_b = item2.Difficulty) !== null && _b !== void 0 ? _b : 0) &&
            isEqual((_c = item1.Property) !== null && _c !== void 0 ? _c : {}, (_d = itemMergeProperties(item1.Property, item2.Property, { includeNoncursableProperties: true, lockAssignMemberNumber: Player.MemberNumber })) !== null && _d !== void 0 ? _d : {}) &&
            isEqual(item1.Craft, item2.Craft));
    }

    function j_WardrobeExportSelectionClothes(includeBinds = false) {
        if (!CharacterAppearanceSelection)
            return "";
        const save = CharacterAppearanceSelection.Appearance
            .filter(WardrobeImportMakeFilterFunction({
            cloth: true,
            cosplay: true,
            body: true,
            binds: includeBinds,
            collar: includeBinds,
            piercings: includeBinds,
        }))
            .map((i) => ({
            ...WardrobeAssetBundle(i),
            Craft: ValidationVerifyCraftData(i.Craft, i.Asset).result,
        }));
        return LZString.compressToBase64(JSON.stringify(save));
    }
    function parseWardrobeImportData(data) {
        if (typeof data !== "string" || !data.trim())
            return "Import error: No data";
        try {
            if (data[0] !== "[") {
                const decompressed = LZString.decompressFromBase64(data);
                if (!decompressed)
                    return "Import error: Bad data";
                data = decompressed;
            }
            const parsedData = JSON.parse(data);
            if (!Array.isArray(parsedData))
                return "Import error: Bad data";
            return parsedData;
        }
        catch (error) {
            console.warn(error);
            return "Import error: Bad data";
        }
    }
    function itemMergeProperties(sourceProperty, targetProperty, { includeNoncursableProperties = false, lockAssignMemberNumber, } = {}) {
        const itemProperty = cloneDeep(sourceProperty !== null && sourceProperty !== void 0 ? sourceProperty : {});
        targetProperty = cloneDeep(targetProperty !== null && targetProperty !== void 0 ? targetProperty : {});
        if (lockAssignMemberNumber != null) {
            if (targetProperty.LockedBy) {
                if (itemProperty.LockedBy === targetProperty.LockedBy && typeof itemProperty.LockMemberNumber === "number") {
                    targetProperty.LockMemberNumber = itemProperty.LockMemberNumber;
                }
                else {
                    targetProperty.LockMemberNumber = lockAssignMemberNumber;
                }
            }
            else {
                delete targetProperty.LockMemberNumber;
            }
        }
        for (const key of arrayUnique(Object.keys(targetProperty).concat(Object.keys(itemProperty)))) {
            if (key === "Effect")
                continue;
            if (!includeNoncursableProperties && CURSE_IGNORED_PROPERTIES.includes(key))
                continue;
            if (targetProperty[key] === undefined) {
                if (itemProperty[key] !== undefined) {
                    delete itemProperty[key];
                }
            }
            else if (typeof targetProperty[key] !== typeof itemProperty[key] ||
                !isEqual(targetProperty[key], itemProperty[key])) {
                itemProperty[key] = cloneDeep(targetProperty[key]);
            }
        }
        const itemIgnoredEffects = !Array.isArray(itemProperty.Effect) ? [] :
            itemProperty.Effect.filter(i => !includeNoncursableProperties && CURSE_IGNORED_EFFECTS.includes(i));
        const itemEffects = !Array.isArray(itemProperty.Effect) ? [] :
            itemProperty.Effect.filter(i => includeNoncursableProperties || !CURSE_IGNORED_EFFECTS.includes(i)).sort();
        const curseEffects = !Array.isArray(targetProperty.Effect) ? [] :
            targetProperty.Effect.filter(i => includeNoncursableProperties || !CURSE_IGNORED_EFFECTS.includes(i)).sort();
        if (!isEqual(new Set(itemEffects), new Set(curseEffects))) {
            itemProperty.Effect = curseEffects.concat(itemIgnoredEffects);
        }
        if (Object.keys(targetProperty).length === 0) {
            return undefined;
        }
        return itemProperty;
    }
    function WardrobeImportCheckChangesLockedItem(C, data, allowReplace) {
        var _a, _b, _c, _d;
        if (C.Appearance.some(a => { var _a, _b; return isBind(a) && ((_b = (_a = a.Property) === null || _a === void 0 ? void 0 : _a.Effect) === null || _b === void 0 ? void 0 : _b.includes("Lock")); })) {
            const matchedGroups = new Set();
            const test = (item) => {
                var _a;
                if (isBind(item)) {
                    for (const block of (item.Asset.Block || []).concat(Array.isArray((_a = item.Property) === null || _a === void 0 ? void 0 : _a.Block) ? item.Property.Block : [])) {
                        if (matchedGroups.has(block) || !AssetGroup.some(g => g.Name === block))
                            continue;
                        matchedGroups.add(block);
                        const item2 = C.Appearance.find(a => a.Asset.Group.Name === block);
                        if (item2) {
                            test(item2);
                        }
                    }
                }
            };
            for (const a of C.Appearance) {
                if (((_b = (_a = a.Property) === null || _a === void 0 ? void 0 : _a.Effect) === null || _b === void 0 ? void 0 : _b.includes("Lock")) && !matchedGroups.has(a.Asset.Group.Name)) {
                    matchedGroups.add(a.Asset.Group.Name);
                    test(a);
                }
            }
            for (const testedGroup of matchedGroups) {
                const currentItem = C.Appearance.find(a => a.Asset.Group.Name === testedGroup);
                const newItem = data.find(b => b.Group === testedGroup);
                if (!currentItem) {
                    if (newItem) {
                        return true;
                    }
                    else {
                        continue;
                    }
                }
                if (!allowReplace(currentItem))
                    continue;
                if (!newItem ||
                    currentItem.Asset.Name !== newItem.Name ||
                    !itemColorsEquals(currentItem.Color, newItem.Color) ||
                    !isEqual((_c = currentItem.Property) !== null && _c !== void 0 ? _c : {}, (_d = itemMergeProperties(currentItem.Property, newItem.Property, {
                        includeNoncursableProperties: true,
                        lockAssignMemberNumber: Player.MemberNumber,
                    })) !== null && _d !== void 0 ? _d : {})) {
                    return true;
                }
            }
        }
        return false;
    }
    function WardrobeImportMakeFilterFunction({ cloth, cosplay, body, binds, collar, piercings, }) {
        return (a) => ((cloth && isCloth(a, false)) ||
            (cosplay && isCosplay(a)) ||
            (body && isBody(a)) ||
            (binds && isBind(a, ["ItemNeck", "ItemNeckAccessories", "ItemNeckRestraints", "ItemNipplesPiercings", "ItemVulvaPiercings"])) ||
            (collar && isBind(a, []) && ["ItemNeck", "ItemNeckAccessories", "ItemNeckRestraints"].includes(smartGetAssetGroup(a).Name)) ||
            (piercings && isBind(a, []) && ["ItemNipplesPiercings", "ItemVulvaPiercings"].includes(smartGetAssetGroup(a).Name)));
    }
    function ValidationCanAccessCheck(character, group, item, type) {
        const playerNumber = getPlayerCharacter().MemberNumber;
        return ((type == null || ValidationCanAccessCheck(character, group, item, undefined)) &&
            !ValidationIsItemBlockedOrLimited(character, playerNumber, group, item) &&
            (!character.IsPlayer() || !InventoryIsPermissionBlocked(character, item, group)));
    }
    function ValidationVerifyCraftData(Craft, Asset) {
        if (Craft === undefined) {
            return {
                result: undefined,
                messages: [],
            };
        }
        if (!isObject$1(Craft)) {
            return {
                result: undefined,
                messages: [`Expected object, got ${typeof Craft}`],
            };
        }
        const saved = console.warn;
        try {
            const messages = [];
            console.warn = (m) => {
                if (typeof m === "string") {
                    messages.push(m);
                }
            };
            const result = CraftingValidate(Craft, Asset, true);
            return {
                result: result > CraftingStatusType.CRITICAL_ERROR ? Craft : undefined,
                messages,
            };
        }
        catch (error) {
            saved("BCX: Failed crafted data validation because of crash:", error);
            return {
                result: undefined,
                messages: [`Validation failed: ${error}`],
            };
        }
        finally {
            console.warn = saved;
        }
    }
    function WardrobeDoImport(C, data, filter, includeLocks) {
        var _a;
        const playerNumber = getPlayerCharacter().MemberNumber;
        const validationParams = ValidationCreateDiffParams(C, playerNumber);
        const dataGroups = new Set();
        data.forEach(a => dataGroups.add(a.Group));
        C.Appearance = C.Appearance.filter(a => !ValidationCanRemoveItem(a, validationParams, dataGroups.has(a.Asset.Group.Name)) || !filter(a));
        for (const cloth of data) {
            if (C.Appearance.some(a => a.Asset.Group.Name === cloth.Group) ||
                !ValidationCanAccessCheck(C, cloth.Group, cloth.Name, (_a = cloth.Property) === null || _a === void 0 ? void 0 : _a.Type)) {
                continue;
            }
            const A = AssetGet(C.AssetFamily, cloth.Group, cloth.Name);
            if (A != null) {
                if (filter(A)) {
                    CharacterAppearanceSetItem(C, cloth.Group, A, cloth.Color, 0, undefined, false);
                    const item = InventoryGet(C, cloth.Group);
                    if (cloth.Property && item) {
                        if (!isObject$1(cloth.Property)) {
                            item.Property = cloneDeep(cloth.Property);
                        }
                        else {
                            item.Property = itemMergeProperties(item.Property, cloth.Property, {
                                includeNoncursableProperties: (typeof cloth.Property.LockedBy === "string" &&
                                    ValidationCanAccessCheck(C, "ItemMisc", cloth.Property.LockedBy, undefined) &&
                                    (!C.IsPlayer() || !InventoryIsPermissionBlocked(C, cloth.Property.LockedBy, "ItemMisc")) &&
                                    (includeLocks === true || (typeof includeLocks !== "boolean" && includeLocks.has(cloth.Property.LockedBy)))),
                                lockAssignMemberNumber: Player.MemberNumber,
                            });
                        }
                        const craftValidation = ValidationVerifyCraftData(cloth.Craft, A);
                        if (craftValidation.messages.length > 0) {
                            console.warn(`BCX: Crafted item validation failed:\n${craftValidation.messages.join("\n")}`);
                        }
                        item.Craft = craftValidation.result;
                    }
                }
            }
            else {
                console.warn(`Clothing not found: `, cloth);
            }
        }
        CharacterRefresh(C, false);
    }
    function j_WardrobeImportSelectionClothes(data, includeBinds, force = false) {
        var _a;
        if (!Array.isArray(data)) {
            data = parseWardrobeImportData(data);
            if (typeof data === "string")
                return data;
        }
        const C = CharacterAppearanceSelection;
        if (!C) {
            return "Import error: No character";
        }
        if (C.MemberNumber !== j_WardrobeBindsAllowedCharacter && includeBinds) {
            return "Import error: Not allowed to import items";
        }
        const Allow = WardrobeImportMakeFilterFunction({
            cloth: true,
            cosplay: ((_a = C.OnlineSharedSettings) === null || _a === void 0 ? void 0 : _a.BlockBodyCosplay) !== true || C.IsPlayer(),
            body: false,
            binds: includeBinds,
            collar: false,
            piercings: includeBinds,
        });
        if (includeBinds && !force && WardrobeImportCheckChangesLockedItem(C, data, Allow))
            return "Refusing to change locked item!";
        let fullMatch = includeBinds;
        if (includeBinds) {
            for (const group of arrayUnique(C.Appearance.filter(Allow).map(item => item.Asset.Group.Name).concat(data.map(item => item.Group)))) {
                const wornItem = C.Appearance.find(item => item.Asset.Group.Name === group);
                const bundleItem = data.find(item => item.Group === group);
                if (!wornItem ||
                    !bundleItem ||
                    wornItem.Asset.Name !== bundleItem.Name ||
                    !itemColorsEquals(wornItem.Color, bundleItem.Color) ||
                    !isEqual(curseMakeSavedProperty(wornItem.Property), curseMakeSavedProperty(bundleItem.Property))) {
                    fullMatch = false;
                }
            }
        }
        WardrobeDoImport(C, data, Allow, fullMatch);
        return (!fullMatch &&
            includeBinds &&
            data.some(i => { var _a, _b; return Array.isArray((_a = i.Property) === null || _a === void 0 ? void 0 : _a.Effect) && ((_b = i.Property) === null || _b === void 0 ? void 0 : _b.Effect.includes("Lock")); })) ? "Imported! Repeat to also import locks." : "Imported!";
    }
    let j_WardrobeIncludeBinds = false;
    let j_WardrobeBindsAllowedCharacter = -1;
    let j_ShowHelp = false;
    let holdingShift = false;
    const helpText = "BCX's wardrobe export/import works by converting your appearance into a long code word that is copied to your device's clipboard. " +
        "You can then paste it anywhere you like, for instance a text file. You can wear the look again by copying the code word to " +
        "the clipboard and importing it with the according button. Functionality of this feature depends on the device you " +
        "are using and if the clipboard can be used on it. Importing has two modes: quick and extended. The default behavior when importing is the extended mode, " +
        "but you can use the quick one when you hold the 'Shift' button while importing. This behavior can be switched around in the misc module settings. " +
        "The button to the left of the 'Export'-button toggles whether items/restraints on your character should also " +
        "be exported or imported while using quick mode. Using quick mode, importing with items has two stages: First usage adds no locks, second one also " +
        "imports locks from the exported items. Importing an outfit with restraints will fail if it would change any item that is locked (or blocked by a locked item), " +
        "except collars, neck accessories/restraints, and piercings. Those, as well as the body itself, are ignored.";
    function PasteListener$1(ev) {
        if (CurrentScreen === "Appearance" && CharacterAppearanceMode === "Wardrobe" || CurrentScreen === "Wardrobe") {
            ev.preventDefault();
            ev.stopImmediatePropagation();
            const data = (ev.clipboardData || window.clipboardData).getData("text");
            const res = useExtendedImport() ? openExtendedImport(data) : j_WardrobeImportSelectionClothes(data, j_WardrobeIncludeBinds, allowMode);
            if (res) {
                CharacterAppearanceWardrobeText = res;
            }
        }
    }
    function KeyChangeListener(ev) {
        holdingShift = ev.shiftKey;
    }
    let searchBar$1 = null;
    let searchBarAutoClose$1 = false;
    function allowSearchMode$1() {
        return CurrentScreen === "Appearance" &&
            CharacterAppearanceSelection != null &&
            CharacterAppearanceMode === "Cloth" &&
            DialogFocusItem == null;
    }
    function enterSearchMode$1(C) {
        if (!searchBar$1) {
            searchBar$1 = ElementCreateInput("BCXSearch", "text", "", "40");
            searchBar$1.oninput = () => {
                if (searchBar$1) {
                    if (searchBarAutoClose$1 && !searchBar$1.value) {
                        exitSearchMode$1(C);
                        MainCanvas.canvas.focus();
                    }
                    else {
                        DialogInventoryBuild(C);
                        AppearanceMenuBuild(C);
                    }
                }
            };
            searchBar$1.focus();
            DialogInventoryBuild(C);
            AppearanceMenuBuild(C);
        }
    }
    function exitSearchMode$1(C) {
        if (searchBar$1) {
            searchBar$1.remove();
            searchBar$1 = null;
            searchBarAutoClose$1 = false;
            DialogInventoryBuild(C);
            AppearanceMenuBuild(C);
        }
    }
    let appearanceOverrideScreen = null;
    function useExtendedImport() {
        var _a;
        return ((_a = modStorage.wardrobeDefaultExtended) !== null && _a !== void 0 ? _a : false) !== holdingShift;
    }
    function openExtendedImport(data, clothesOnly = false) {
        const parsedData = Array.isArray(data) ? data : parseWardrobeImportData(data);
        if (typeof parsedData === "string")
            return parsedData;
        const C = CharacterAppearanceSelection;
        if (!C) {
            return "Import error: No character";
        }
        const allowBinds = C.MemberNumber === j_WardrobeBindsAllowedCharacter;
        setAppearanceOverrideScreen(new GuiWardrobeExtended(setAppearanceOverrideScreen, C, allowBinds, parsedData, clothesOnly));
        return null;
    }
    function setAppearanceOverrideScreen(newScreen) {
        if (appearanceOverrideScreen) {
            appearanceOverrideScreen.Unload();
            appearanceOverrideScreen = null;
        }
        appearanceOverrideScreen = newScreen;
        if (newScreen) {
            newScreen.Load();
        }
    }
    class ModuleWardrobe extends BaseModule {
        init() {
            registerPermission("misc_wardrobe_item_import", {
                name: "Allow importing items using wardrobe",
                category: ModuleCategory.Misc,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.whitelist],
                    [Preset.switch]: [true, AccessLevel.friend],
                    [Preset.submissive]: [true, AccessLevel.friend],
                    [Preset.slave]: [true, AccessLevel.friend],
                },
            });
            ExtendedWardrobeInit();
        }
        load() {
            if (typeof modStorage.wardrobeDefaultExtended !== "boolean") {
                modStorage.wardrobeDefaultExtended = true;
            }
            const NMod = isNModClient();
            const NModWardrobe = NMod && typeof AppearanceMode !== "undefined";
            hookFunction("CharacterAppearanceLoadCharacter", 0, (args, next) => {
                const C = args[0];
                const char = C.MemberNumber && getChatroomCharacter(C.MemberNumber);
                if (char && char.BCXVersion != null) {
                    char.getPermissionAccess("misc_wardrobe_item_import")
                        .then(res => {
                        if (res) {
                            j_WardrobeBindsAllowedCharacter = char.MemberNumber;
                        }
                        else {
                            j_WardrobeBindsAllowedCharacter = -1;
                        }
                    })
                        .catch(err => {
                        console.warn("BCX: Failed to get permission to import wardrobe restraints:", err);
                        j_WardrobeBindsAllowedCharacter = -1;
                    });
                }
                else {
                    j_WardrobeBindsAllowedCharacter = -1;
                }
                return next(args);
            });
            patchFunction("AppearanceRun", {
                'DrawButton(1820, 430 + (W - CharacterAppearanceWardrobeOffset) * 95, 160, 65, "Save"': 'DrawButton(1860, 430 + (W - CharacterAppearanceWardrobeOffset) * 95, 120, 65, "Save"',
            });
            patchFunction("AppearanceRun", {
                "DrawButton(1300, 430 + (W - CharacterAppearanceWardrobeOffset) * 95, 500,": "DrawButton(1385, 430 + (W - CharacterAppearanceWardrobeOffset) * 95, 455,",
            });
            patchFunction("AppearanceRun", {
                "1550, 463 + (W - CharacterAppearanceWardrobeOffset) * 95, 496,": "1614, 463 + (W - CharacterAppearanceWardrobeOffset) * 95, 446,",
            });
            hookFunction("AppearanceRun", 7, (args, next) => {
                if (appearanceOverrideScreen) {
                    return appearanceOverrideScreen.Run();
                }
                return next(args);
            });
            hookFunction("AppearanceRun", 2, (args, next) => {
                next(args);
                if (CharacterAppearanceMode === "Wardrobe" || NModWardrobe && AppearanceMode === "Wardrobe") {
                    if (clipboardAvailable) {
                        const Y = NModWardrobe ? 265 : 125;
                        DrawButton(1380, Y, 50, 50, "", "White", "", "How does it work?");
                        DrawImageEx("Icons/Question.png", 1380 + 3, Y + 3, { Width: 44, Height: 44 });
                        const C = CharacterAppearanceSelection;
                        const allowBinds = C != null && j_WardrobeBindsAllowedCharacter === C.MemberNumber;
                        DrawButton(1457, Y, 50, 50, "", allowBinds ? "White" : j_WardrobeIncludeBinds ? "pink" : "#ddd", "", "Include items/restraints");
                        DrawImageEx("../Icons/Bondage.png", 1457 + 6, Y + 6, { Alpha: j_WardrobeIncludeBinds ? 1 : 0.2, Width: 38, Height: 38 });
                        DrawButton(1534, Y, 207, 50, "Export", "White", "");
                        DrawButton(1768, Y, 207, 50, "Import", (!allowBinds && j_WardrobeIncludeBinds) ? "#ddd" : "White", "", undefined, !allowBinds && j_WardrobeIncludeBinds);
                    }
                    if (Player.Wardrobe) {
                        for (let W = CharacterAppearanceWardrobeOffset; W < Player.Wardrobe.length && W < CharacterAppearanceWardrobeOffset + 6; W++) {
                            DrawButton(1300, 430 + (W - CharacterAppearanceWardrobeOffset) * 95, 65, 65, "", "White", "");
                            DrawImageEx("./Icons/DialogPermissionMode.png", 1300 + 6, 430 + (W - CharacterAppearanceWardrobeOffset) * 95 + 6, { Width: 53, Height: 53 });
                        }
                    }
                }
                if (j_ShowHelp && (CharacterAppearanceMode === "Wardrobe" || NModWardrobe && AppearanceMode === "Wardrobe")) {
                    MainCanvas.fillStyle = "#ffff88";
                    MainCanvas.fillRect(30, 190, 1240, 780);
                    MainCanvas.strokeStyle = "Black";
                    MainCanvas.strokeRect(30, 190, 1240, 780);
                    MainCanvas.textAlign = "left";
                    DrawTextWrap(helpText, 30 - 1160 / 2, 210, 1200, 740, "black");
                    MainCanvas.textAlign = "center";
                }
            });
            patchFunction("AppearanceClick", {
                "(MouseX >= 1300) && (MouseX < 1800)": "(MouseX >= 1385) && (MouseX < 1385 + 455)",
            });
            patchFunction("AppearanceClick", {
                "(MouseX >= 1820) && (MouseX < 1975)": "(MouseX >= 1860) && (MouseX < 1980)",
            });
            hookFunction("AppearanceClick", 7, (args, next) => {
                if (appearanceOverrideScreen) {
                    return appearanceOverrideScreen.Click();
                }
                return next(args);
            });
            hookFunction("AppearanceClick", 2, (args, next) => {
                if (CharacterAppearanceMode === "Wardrobe" || NModWardrobe && AppearanceMode === "Wardrobe") {
                    if (clipboardAvailable) {
                        const Y = NModWardrobe ? 265 : 125;
                        if (MouseIn(1380, Y, 50, 50) || (MouseIn(30, 190, 1240, 780) && j_ShowHelp)) {
                            j_ShowHelp = !j_ShowHelp;
                            return;
                        }
                        if (MouseIn(1457, Y, 50, 50)) {
                            j_WardrobeIncludeBinds = !j_WardrobeIncludeBinds;
                            return;
                        }
                        if (MouseIn(1534, Y, 207, 50)) {
                            BCX_setTimeout(async () => {
                                await navigator.clipboard.writeText(j_WardrobeExportSelectionClothes(j_WardrobeIncludeBinds));
                                CharacterAppearanceWardrobeText = "Copied to clipboard!";
                            }, 0);
                            return;
                        }
                        if (MouseIn(1768, Y, 207, 50)) {
                            BCX_setTimeout(async () => {
                                if (typeof navigator.clipboard.readText !== "function") {
                                    CharacterAppearanceWardrobeText = "Please press Ctrl+V";
                                    return;
                                }
                                const data = await navigator.clipboard.readText();
                                const res = useExtendedImport() ? openExtendedImport(data) : j_WardrobeImportSelectionClothes(data, j_WardrobeIncludeBinds, allowMode);
                                if (res) {
                                    CharacterAppearanceWardrobeText = res;
                                }
                            }, 0);
                            return;
                        }
                    }
                    if (Array.isArray(Player.Wardrobe) && MouseIn(1300, 430, 65, 540)) {
                        for (let W = CharacterAppearanceWardrobeOffset; W < Player.Wardrobe.length && W < CharacterAppearanceWardrobeOffset + 6; W++) {
                            if (MouseYIn(430 + (W - CharacterAppearanceWardrobeOffset) * 95, 65)) {
                                let slot = Player.Wardrobe[W];
                                if (Array.isArray(slot)) {
                                    if (slot.some(i => Array.isArray(i)) && typeof WardrobeExtractBundle === "function") {
                                        slot = slot.map(i => Array.isArray(i) ? WardrobeExtractBundle(i) : i);
                                    }
                                    if (slot.every(i => isObject$1(i)) && openExtendedImport(slot, true) === null) {
                                        return;
                                    }
                                }
                                return;
                            }
                        }
                    }
                }
                next(args);
            });
            hookFunction("AppearanceExit", 7, (args, next) => {
                if (appearanceOverrideScreen) {
                    return appearanceOverrideScreen.Exit();
                }
                return next(args);
            });
            hookFunction("WardrobeRun", 7, (args, next) => {
                if (appearanceOverrideScreen) {
                    return appearanceOverrideScreen.Run();
                }
                return next(args);
            });
            hookFunction("WardrobeRun", 2, (args, next) => {
                next(args);
                if (clipboardAvailable) {
                    const Y = 90;
                    DrawButton(1000, Y, 50, 50, "", "White", "", "How does it work?");
                    DrawImageEx("Icons/Question.png", 1000 + 3, Y + 3, { Width: 44, Height: 44 });
                    const C = CharacterAppearanceSelection;
                    const allowBinds = C != null && j_WardrobeBindsAllowedCharacter === C.MemberNumber;
                    DrawButton(425, Y, 50, 50, "", allowBinds ? "White" : j_WardrobeIncludeBinds ? "pink" : "#ddd", "", "Include items/restraints");
                    DrawImageEx("../Icons/Bondage.png", 425 + 6, Y + 6, { Alpha: j_WardrobeIncludeBinds ? 1 : 0.2, Width: 38, Height: 38 });
                    DrawButton(750, Y, 225, 50, "Export", "White", "");
                    DrawButton(500, Y, 225, 50, "Import", (!allowBinds && j_WardrobeIncludeBinds) ? "#ddd" : "White", "", undefined, !allowBinds && j_WardrobeIncludeBinds);
                }
                if (j_ShowHelp) {
                    MainCanvas.fillStyle = "#ffff88";
                    MainCanvas.fillRect(30, 190, 1240, 780);
                    MainCanvas.strokeStyle = "Black";
                    MainCanvas.strokeRect(30, 190, 1240, 780);
                    MainCanvas.textAlign = "left";
                    DrawTextWrap(helpText, 30 - 1160 / 2, 210, 1200, 740, "black");
                    MainCanvas.textAlign = "center";
                }
            });
            hookFunction("WardrobeClick", 7, (args, next) => {
                if (appearanceOverrideScreen) {
                    return appearanceOverrideScreen.Click();
                }
                return next(args);
            });
            hookFunction("WardrobeClick", 2, (args, next) => {
                if (clipboardAvailable) {
                    const Y = 90;
                    if (MouseIn(1000, Y, 50, 50) || (MouseIn(30, 190, 1240, 780) && j_ShowHelp)) {
                        j_ShowHelp = !j_ShowHelp;
                        return;
                    }
                    if (MouseIn(425, Y, 50, 50)) {
                        j_WardrobeIncludeBinds = !j_WardrobeIncludeBinds;
                        return;
                    }
                    if (MouseIn(750, Y, 225, 50)) {
                        BCX_setTimeout(async () => {
                            await navigator.clipboard.writeText(j_WardrobeExportSelectionClothes(j_WardrobeIncludeBinds));
                            InfoBeep("Copied to clipboard!", 5000);
                        }, 0);
                        return;
                    }
                    if (MouseIn(500, Y, 225, 50)) {
                        BCX_setTimeout(async () => {
                            if (typeof navigator.clipboard.readText !== "function") {
                                InfoBeep("Please press Ctrl+V", 5000);
                                return;
                            }
                            const data = await navigator.clipboard.readText();
                            const res = useExtendedImport() ? openExtendedImport(data) : j_WardrobeImportSelectionClothes(data, j_WardrobeIncludeBinds, allowMode);
                            if (res) {
                                InfoBeep(res, 5000);
                            }
                        }, 0);
                        return;
                    }
                }
                next(args);
            });
            document.addEventListener("paste", PasteListener$1);
            document.addEventListener("keydown", KeyChangeListener, { capture: true, passive: true });
            document.addEventListener("keyup", KeyChangeListener, { capture: true, passive: true });
            RedirectGetImage("Icons/BCX_Search.png", "Icons/Search.png");
            RedirectGetImage("Icons/BCX_SearchExit.png", "Icons/Remove.png");
            hookFunction("TextGet", 0, (args, next) => {
                if (args[0] === "BCX_Search") {
                    return "Filter items";
                }
                else if (args[0] === "BCX_SearchExit") {
                    return "";
                }
                return next(args);
            });
            hookFunction("AppearanceMenuBuild", 5, (args, next) => {
                next(args);
                const C = args[0];
                if (!allowSearchMode$1()) {
                    exitSearchMode$1(C);
                }
                else if (searchBar$1) {
                    AppearanceMenu = [];
                    if (DialogInventory.length > 9)
                        AppearanceMenu.push("Next");
                    AppearanceMenu.push("BCX_SearchExit");
                    if (!DialogItemPermissionMode)
                        AppearanceMenu.push("Cancel");
                    AppearanceMenu.push("Accept");
                }
                else {
                    AppearanceMenu.splice(AppearanceMenu.length - (AppearanceMenu.includes("Cancel") ? 2 : 1), 0, "BCX_Search");
                }
            });
            hookFunction("AppearanceMenuClick", 4, (args, next) => {
                const X = 2000 - AppearanceMenu.length * 117;
                const C = args[0];
                for (let B = 0; B < AppearanceMenu.length; B++) {
                    if (MouseXIn(X + 117 * B, 90)) {
                        const Button = AppearanceMenu[B];
                        if (Button === "BCX_Search") {
                            enterSearchMode$1(C);
                            return;
                        }
                        else if (Button === "BCX_SearchExit") {
                            exitSearchMode$1(C);
                            return;
                        }
                    }
                }
                next(args);
            });
            hookFunction("CommonKeyDown", 5, (args, next) => {
                const ev = args[0];
                const sb = searchBar$1;
                if (!sb &&
                    CharacterAppearanceSelection &&
                    allowSearchMode$1() &&
                    document.activeElement === MainCanvas.canvas &&
                    ev.key.length === 1 &&
                    !ev.altKey && !ev.ctrlKey && !ev.metaKey) {
                    enterSearchMode$1(CharacterAppearanceSelection);
                    searchBarAutoClose$1 = true;
                    return;
                }
                next(args);
            });
            hookFunction("DialogInventoryAdd", 5, (args, next) => {
                if (searchBar$1) {
                    const item = args[1];
                    if (!searchBar$1.value
                        .trim()
                        .toLocaleLowerCase()
                        .split(" ")
                        .every(i => item.Asset.Description.toLocaleLowerCase().includes(i) ||
                        item.Asset.Name.toLocaleLowerCase().includes(i))) {
                        return;
                    }
                }
                next(args);
            });
            hookFunction("AppearanceMenuDraw", 0, (args, next) => {
                if (searchBar$1) {
                    ElementPositionFix("BCXSearch", 40, 900, 35, 600, 60);
                }
                next(args);
            });
            registerCommandParsed("utility", "wardrobe", "- Several convenience wardrobe shortcuts. Use '.wardrobe' for more help", (args) => {
                const subcommand = (args[0] || "").toLowerCase();
                if (subcommand === "export") {
                    if (!clipboardAvailable) {
                        ChatRoomSendLocal("Error: Your clipboard is not usable.");
                        return false;
                    }
                    if (!CharacterAppearanceSelection)
                        CharacterAppearanceSelection = Player;
                    BCX_setTimeout(async () => {
                        await navigator.clipboard.writeText(j_WardrobeExportSelectionClothes(true));
                        ChatRoomSendLocal("Success: Exported to clipboard");
                    }, 0);
                }
                else if (subcommand === "quickload") {
                    if (!Player.CanChangeOwnClothes()) {
                        ChatRoomSendLocal("You are unable to change clothes right now.");
                        return false;
                    }
                    const slot = args.length === 2 && /^[0-9]+$/.test(args[1]) && Number.parseInt(args[1], 10);
                    if (!slot || slot < 1) {
                        ChatRoomSendLocal(`Needs a <number> greater 0 in '.wardrobe ${subcommand} <number>'`);
                        return false;
                    }
                    WardrobeFastLoad(Player, slot - 1, true);
                }
                else if (subcommand === "strip") {
                    if (!Player.CanInteract()) {
                        ChatRoomSendLocal("You are too restrained to use this right now.");
                        return false;
                    }
                    if (args.length !== 2) {
                        ChatRoomSendLocal(`Needs the name of a currently worn clothing behind '.wardrobe ${subcommand}'`);
                        return false;
                    }
                    const item = Command_selectWornItem(getPlayerCharacter(), args[1], i => isCloth(i, true));
                    if (typeof item === "string") {
                        ChatRoomSendLocal(item);
                        return false;
                    }
                    InventoryRemove(Player, item.Asset.Group.Name);
                    ChatRoomCharacterUpdate(Player);
                }
                else if (subcommand === "stripall") {
                    if (!Player.CanInteract()) {
                        ChatRoomSendLocal("You are too restrained to use this right now.");
                        return false;
                    }
                    CharacterAppearanceStripLayer(Player);
                    ChatRoomCharacterUpdate(Player);
                }
                else {
                    ChatRoomSendLocal(`Usage:\n` +
                        `.wardrobe export - Exports outfit string to the clipboard (including restraints)\n` +
                        `.wardrobe quickload <number> - Changes current outfit to the according BC wardrobe slot if you can\n` +
                        `.wardrobe strip <clothing> - Removes the named clothing if you can\n` +
                        `.wardrobe stripall - Removes all clothes in layered steps (like the wardrobe button)\n`);
                }
                return true;
            }, (argv) => {
                const subcommand = argv[0].toLowerCase();
                if (argv.length <= 1) {
                    return Command_pickAutocomplete(subcommand, ["export", "quickload", "strip", "stripall"]);
                }
                if (subcommand === "strip" && argv.length === 2) {
                    return Command_selectWornItemAutocomplete(getPlayerCharacter(), argv[1], i => isCloth(i, true));
                }
                return [];
            });
        }
        unload() {
            document.removeEventListener("paste", PasteListener$1);
            document.removeEventListener("keydown", KeyChangeListener, { capture: true });
            document.removeEventListener("keyup", KeyChangeListener, { capture: true });
            exitSearchMode$1(CharacterAppearanceSelection !== null && CharacterAppearanceSelection !== void 0 ? CharacterAppearanceSelection : Player);
            setAppearanceOverrideScreen(null);
            AppearanceMenuBuild(CharacterAppearanceSelection !== null && CharacterAppearanceSelection !== void 0 ? CharacterAppearanceSelection : Player);
        }
    }

    class TypedEventEmitter {
        constructor() {
            this._listeners = new Map();
            this._allListeners = new Set();
        }
        onAny(listener) {
            this._allListeners.add(listener);
            return () => {
                this._allListeners.delete(listener);
            };
        }
        on(event, listener) {
            let listeners = this._listeners.get(event);
            if (!listeners) {
                listeners = new Set();
                this._listeners.set(event, listeners);
            }
            listeners.add(listener);
            return () => {
                listeners.delete(listener);
                if (listeners.size === 0) {
                    this._listeners.delete(event);
                }
            };
        }
        emit(event, value) {
            var _a;
            (_a = this._listeners.get(event)) === null || _a === void 0 ? void 0 : _a.forEach((observer) => observer(value));
            const eventData = {
                event,
                data: value,
            };
            this._allListeners.forEach((observer) => observer(eventData));
        }
    }
    class BCXGlobalEventSystemClass extends TypedEventEmitter {
        emitEvent(event, value) {
            this.emit(event, value);
        }
    }
    const BCXGlobalEventSystem = new BCXGlobalEventSystemClass();

    const CURSES_ANTILOOP_RESET_INTERVAL = 60000;
    const CURSES_ANTILOOP_THRESHOLD = 10;
    const CURSES_ANTILOOP_SUSPEND_TIME = 600000;
    const CURSE_IGNORED_PROPERTIES_CUSTOM = [
        "HeartRate",
    ];
    const CURSE_IGNORED_PROPERTIES = ValidationModifiableProperties.concat(CURSE_IGNORED_PROPERTIES_CUSTOM);
    const CURSE_IGNORED_EFFECTS = ["Lock"];
    const CURSE_IGNORED_ITEMS = ["SlaveCollar", "ClubSlaveCollar"];
    const CURSE_INACTIVE_SCREENS = [
        "Appearance",
        "Wardrobe",
        "ChatSelect",
        "ChatSearch",
        "ChatCreate",
    ];
    function curseMakeSavedProperty(properties) {
        const result = {};
        if (isObject$1(properties)) {
            for (const key of Object.keys(properties)) {
                if (key === "Effect") {
                    if (Array.isArray(properties.Effect) && properties.Effect.every(i => typeof i === "string")) {
                        const effect = properties.Effect.filter(i => !CURSE_IGNORED_EFFECTS.includes(i));
                        if (effect.length > 0) {
                            result.Effect = effect;
                        }
                    }
                    else {
                        console.error(`BCX: Bad effect of properties: `, properties.Effect);
                    }
                }
                else if (!CURSE_IGNORED_PROPERTIES.includes(key) && properties[key] !== undefined) {
                    result[key] = cloneDeep(properties[key]);
                }
            }
        }
        return result;
    }
    function curseCreateCurseItemInfo(item) {
        const result = {
            Name: item.Asset.Name,
            curseProperty: false,
            Difficulty: item.Difficulty || undefined,
            Color: (item.Color && item.Color !== "Default") ? cloneDeep(item.Color) : undefined,
            Property: curseMakeSavedProperty(item.Property),
            Craft: ValidationVerifyCraftData(item.Craft, item.Asset).result,
        };
        if (Object.keys(result.Property).length === 0) {
            delete result.Property;
        }
        return result;
    }
    function curseAllowItemCurseProperty(asset) {
        var _a, _b, _c, _d;
        return !!(asset.Extended ||
            ((_a = asset.Effect) === null || _a === void 0 ? void 0 : _a.includes("Egged")) ||
            ((_b = asset.AllowEffect) === null || _b === void 0 ? void 0 : _b.includes("Egged")) ||
            ((_c = asset.Effect) === null || _c === void 0 ? void 0 : _c.includes("UseRemote")) ||
            ((_d = asset.AllowEffect) === null || _d === void 0 ? void 0 : _d.includes("UseRemote")));
    }
    function curseDefaultItemCurseProperty(asset) {
        var _a;
        return curseAllowItemCurseProperty(asset) &&
            asset.Extended &&
            ["typed", "modular"].includes((_a = asset.Archetype) !== null && _a !== void 0 ? _a : "") &&
            !asset.DynamicScriptDraw;
    }
    function curseItem(Group, curseProperty, character) {
        var _a;
        if (!moduleIsEnabled(ModuleCategory.Curses))
            return false;
        const group = AssetGroup.find(g => g.Name === Group);
        if (!group || (typeof curseProperty !== "boolean" && curseProperty !== null)) {
            console.error(`BCX: Attempt to curse with invalid data`, Group, curseProperty);
            return false;
        }
        if (group.Category === "Appearance" && !group.AllowCustomize) {
            console.warn(`BCX: Attempt to curse non-customizable slot`, Group);
            return false;
        }
        if (character && !ConditionsCheckAccess("curses", Group, character)) {
            return false;
        }
        const currentItem = InventoryGet(Player, Group);
        if (!currentItem && !group.AllowNone) {
            console.error(`BCX: Refusing to curse empty group that doesn't allow none`);
            return false;
        }
        if (currentItem) {
            if (curseProperty === null) {
                if (ConditionsGetCondition("curses", Group))
                    return true;
                curseProperty = curseDefaultItemCurseProperty(currentItem.Asset);
            }
            if (!curseAllowItemCurseProperty(currentItem.Asset) && curseProperty) {
                console.warn(`BCX: Attempt to curse properties of item ${currentItem.Asset.Group.Name}:${currentItem.Asset.Name}, while not allowed`);
                curseProperty = false;
            }
            const newCurse = curseCreateCurseItemInfo(currentItem);
            if (curseProperty) {
                newCurse.curseProperty = true;
            }
            if (((_a = ConditionsGetCategoryData("curses").data) === null || _a === void 0 ? void 0 : _a.itemRemove) && group.AllowNone) {
                newCurse.itemRemove = true;
            }
            ConditionsSetCondition("curses", Group, newCurse, character);
            if (character) {
                logMessage("curse_change", LogEntryType.plaintext, `${character} cursed ${Player.Name}'s ${group.AllowNone ? currentItem.Asset.Description : group.Description}`);
                if (!character.isPlayer()) {
                    ChatRoomSendLocal(`${character.toNicknamedString()} cursed the ${group.AllowNone ? currentItem.Asset.Description : group.Description} on you`);
                }
            }
        }
        else {
            ConditionsSetCondition("curses", Group, null, character);
            if (character) {
                logMessage("curse_change", LogEntryType.plaintext, `${character} cursed ${Player.Name}'s body part to stay exposed (${getVisibleGroupName(group)})`);
                if (!character.isPlayer()) {
                    ChatRoomSendLocal(`${character.toNicknamedString()} put a curse on you, forcing part of your body to stay exposed (${getVisibleGroupName(group)})`);
                }
            }
        }
        modStorageSync();
        notifyOfChange();
        return true;
    }
    function curseBatch(mode, includingEmpty, character) {
        if (character && !checkPermissionAccess("curses_normal", character) && !checkPermissionAccess("curses_limited", character))
            return false;
        let assetGroups;
        if (mode === "items") {
            assetGroups = AssetGroup.filter(i => i.Category === "Item" && (includingEmpty || InventoryGet(Player, i.Name)));
        }
        else if (mode === "clothes") {
            assetGroups = AssetGroup.filter(i => i.Category === "Appearance" && i.Clothing && (includingEmpty || InventoryGet(Player, i.Name)));
        }
        else if (mode === "body") {
            assetGroups = AssetGroup.filter(i => i.Category === "Appearance" && !i.Clothing && i.AllowCustomize && (includingEmpty || InventoryGet(Player, i.Name)));
        }
        else {
            console.error(`BCX: Attempt to curse in invalid mode`, mode);
            return false;
        }
        if (character) {
            logMessage("curse_change", LogEntryType.plaintext, `${character} cursed all of ${Player.Name}'s ` +
                `${includingEmpty ? "" : "occupied "}${mode === "items" ? "item" : mode === "clothes" ? "clothing" : "body"} slots`);
            if (!character.isPlayer()) {
                ChatRoomSendLocal(`${character.toNicknamedString()} cursed all of your ${includingEmpty ? "" : "occupied "}${mode === "items" ? "item" : mode === "clothes" ? "clothing" : "body"} slots`);
            }
        }
        for (const group of assetGroups) {
            if (ConditionsGetCondition("curses", group.Name))
                continue;
            if (character && !ConditionsCheckAccess("curses", group.Name, character))
                continue;
            if (!curseItem(group.Name, null, null))
                return false;
        }
        return true;
    }
    function curseLift(Group, character) {
        var _a;
        if (!moduleIsEnabled(ModuleCategory.Curses))
            return false;
        if (character && !ConditionsCheckAccess("curses", Group, character))
            return false;
        const curse = ConditionsGetCondition("curses", Group);
        if (curse) {
            const group = AssetGroup.find(g => g.Name === Group);
            if (character && group) {
                const itemName = curse.data && ((_a = AssetGet(Player.AssetFamily, Group, curse.data.Name)) === null || _a === void 0 ? void 0 : _a.Description);
                if (itemName) {
                    logMessage("curse_change", LogEntryType.plaintext, `${character} lifted the curse on ${Player.Name}'s ${itemName}`);
                    if (!character.isPlayer()) {
                        ChatRoomSendLocal(`${character.toNicknamedString()} lifted the curse on your ${itemName}`);
                    }
                }
                else {
                    logMessage("curse_change", LogEntryType.plaintext, `${character} lifted the curse on ${Player.Name}'s body part (${getVisibleGroupName(group)})`);
                    if (!character.isPlayer()) {
                        ChatRoomSendLocal(`${character.toNicknamedString()} lifted the curse on part of your body (${getVisibleGroupName(group)})`);
                    }
                }
            }
            ConditionsRemoveCondition("curses", Group);
            return true;
        }
        return false;
    }
    function curseLiftAll(character) {
        if (!moduleIsEnabled(ModuleCategory.Curses))
            return false;
        if (character && (!checkPermissionAccess("curses_normal", character) || !checkPermissionAccess("curses_limited", character)))
            return false;
        if (character) {
            logMessage("curse_change", LogEntryType.plaintext, `${character} lifted all curse on ${Player.Name}`);
            if (!character.isPlayer()) {
                ChatRoomSendLocal(`${character.toNicknamedString()} lifted all curses on you`);
            }
        }
        ConditionsRemoveCondition("curses", Object.keys(ConditionsGetCategoryData("curses").conditions));
        return true;
    }
    class ModuleCurses extends BaseModule {
        constructor() {
            super(...arguments);
            this.resetTimer = null;
            this.triggerCounts = new Map();
            this.suspendedUntil = new Map();
            this.pendingMessages = {
                remove: [],
                add: [],
                swap: [],
                update: [],
                color: [],
                autoremove: [],
            };
        }
        init() {
            registerPermission("curses_normal", {
                name: "Allows handling curses on non-limited object slots",
                category: ModuleCategory.Curses,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.lover],
                    [Preset.switch]: [true, AccessLevel.lover],
                    [Preset.submissive]: [false, AccessLevel.mistress],
                    [Preset.slave]: [false, AccessLevel.mistress],
                },
            });
            registerPermission("curses_limited", {
                name: "Allows handling curses on limited object slots",
                category: ModuleCategory.Curses,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.owner],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [false, AccessLevel.lover],
                    [Preset.slave]: [false, AccessLevel.lover],
                },
            });
            registerPermission("curses_global_configuration", {
                name: "Allows editing the global curses configuration",
                category: ModuleCategory.Curses,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.owner],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [false, AccessLevel.lover],
                    [Preset.slave]: [false, AccessLevel.lover],
                },
            });
            registerPermission("curses_change_limits", {
                name: "Allows to limit/block individual curse object slots",
                category: ModuleCategory.Curses,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.self],
                    [Preset.slave]: [false, AccessLevel.owner],
                },
            });
            registerPermission("curses_color", {
                name: "Allow changing colors of cursed objects",
                category: ModuleCategory.Curses,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.lover],
                    [Preset.switch]: [true, AccessLevel.lover],
                    [Preset.submissive]: [true, AccessLevel.mistress],
                    [Preset.slave]: [false, AccessLevel.mistress],
                },
            });
            registerPermission("curses_view_originator", {
                name: "Allow to view who added the curse originally",
                category: ModuleCategory.Curses,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.mistress],
                    [Preset.slave]: [true, AccessLevel.mistress],
                },
            });
            queryHandlers.curseItem = (sender, data) => {
                if (isObject$1(data) && typeof data.Group === "string" && (typeof data.curseProperties === "boolean" || data.curseProperties === null)) {
                    return curseItem(data.Group, data.curseProperties, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.curseLift = (sender, data) => {
                if (typeof data === "string") {
                    return curseLift(data, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.curseBatch = (sender, data) => {
                if (isObject$1(data) && typeof data.mode === "string" && typeof data.includingEmpty === "boolean") {
                    return curseBatch(data.mode, data.includingEmpty, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.curseLiftAll = (sender) => {
                return curseLiftAll(sender);
            };
            registerWhisperCommand("modules", "curses", "- Manage curses", (argv, sender, respond) => {
                var _a;
                if (!moduleIsEnabled(ModuleCategory.Curses)) {
                    return respond(`Curses module is disabled.`);
                }
                const subcommand = (argv[0] || "").toLocaleLowerCase();
                const cursesInfo = ConditionsGetCategoryPublicData("curses", sender).conditions;
                if (ConditionsSubcommands.includes(subcommand)) {
                    return ConditionsRunSubcommand("curses", argv, sender, respond);
                }
                else if (subcommand === "list") {
                    let result = "Current curses:";
                    for (const [k, v] of Object.entries(cursesInfo)) {
                        const group = AssetGroup.find(g => g.Name === k);
                        if (!group) {
                            console.warn(`BCX: Unknown group ${k}`);
                            continue;
                        }
                        let resultItem = `\n[${group.Category === "Item" ? "Item" : group.Clothing ? "Clothing" : "Body"}] `;
                        if (v.data === null) {
                            resultItem += `Blocked: ${getVisibleGroupName(group)}`;
                        }
                        else {
                            const item = AssetGet(Player.AssetFamily, k, v.data.Name);
                            const timerText = `Timer: ${v.timer ? formatTimeInterval(v.timer - Date.now(), "short") : "∞"}`;
                            resultItem += `${(_a = item === null || item === void 0 ? void 0 : item.Description) !== null && _a !== void 0 ? _a : v.data.Name} (${getVisibleGroupName(group)}) | ${timerText}` +
                                `${v.data.curseProperties ? " | Item configuration also cursed" : ""}`;
                        }
                        if (result.length + resultItem.length >= 990) {
                            result += "\n...";
                            respond(result);
                            result = "Current curses (continued):";
                        }
                        result += resultItem;
                    }
                    respond(result);
                }
                else if (subcommand === "listgroups") {
                    const listgroup = (argv[1] || "").toLocaleLowerCase();
                    if (listgroup === "items") {
                        let result = `List of item groups:`;
                        const AssetGroupItems = AssetGroup.filter(g => g.Category === "Item");
                        for (const group of AssetGroupItems) {
                            const currentItem = InventoryGet(Player, group.Name);
                            const itemIsCursed = cursesInfo[group.Name] !== undefined;
                            result += `\n${getVisibleGroupName(group)}: ${currentItem ? currentItem.Asset.Description : "[Nothing]"}`;
                            if (itemIsCursed) {
                                result += ` [cursed]`;
                            }
                        }
                        respond(result);
                    }
                    else if (listgroup === "clothes") {
                        let result = `List of clothes groups:`;
                        const AssetGroupClothings = AssetGroup.filter(g => g.Category === "Appearance" && g.Clothing);
                        for (const group of AssetGroupClothings) {
                            const currentItem = InventoryGet(Player, group.Name);
                            const clothingIsCursed = cursesInfo[group.Name] !== undefined;
                            result += `\n${getVisibleGroupName(group)}: ${currentItem ? currentItem.Asset.Description : "[Nothing]"}`;
                            if (clothingIsCursed) {
                                result += ` [cursed]`;
                            }
                        }
                        respond(result);
                    }
                    else if (listgroup === "body") {
                        let result = `List of body groups:`;
                        const AssetGroupBody = AssetGroup.filter(g => g.Category === "Appearance" && !g.Clothing && g.AllowCustomize);
                        for (const group of AssetGroupBody) {
                            const currentItem = InventoryGet(Player, group.Name);
                            const bodyIsCursed = cursesInfo[group.Name] !== undefined;
                            result += `\n${getVisibleGroupName(group)}: ${currentItem ? currentItem.Asset.Description : "[Nothing]"}`;
                            if (bodyIsCursed) {
                                result += ` [cursed]`;
                            }
                        }
                        respond(result);
                    }
                    else {
                        respond(Command_fixExclamationMark(sender, `Expected one of:\n` +
                            `!curses listgroups items\n` +
                            `!curses listgroups clothes\n` +
                            `!curses listgroups body`));
                    }
                }
                else if (subcommand === "curse") {
                    const group = Command_selectGroup(argv[1] || "", getPlayerCharacter());
                    if (typeof group === "string") {
                        return respond(group);
                    }
                    if (cursesInfo[group.Name] !== undefined) {
                        return respond(`This group or item is already cursed`);
                    }
                    respond(curseItem(group.Name, null, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                }
                else if (subcommand === "curseworn" || subcommand === "curseall") {
                    const group = (argv[1] || "").toLocaleLowerCase();
                    if (group === "items" || group === "clothes" || group === "body") {
                        return respond(curseBatch(group, subcommand === "curseall", sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                    }
                    respond(Command_fixExclamationMark(sender, `Expected one of:\n` +
                        `!curses ${subcommand} items\n` +
                        `!curses ${subcommand} clothes\n` +
                        `!curses ${subcommand} body`));
                }
                else if (subcommand === "lift") {
                    const group = Command_selectGroup(argv[1] || "", getPlayerCharacter());
                    if (typeof group === "string") {
                        return respond(group);
                    }
                    if (cursesInfo[group.Name] === undefined) {
                        return respond(`This group or item is not cursed`);
                    }
                    respond(curseLift(group.Name, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                }
                else if (subcommand === "liftall") {
                    respond(curseLiftAll(sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                }
                else if (subcommand === "configuration") {
                    const group = Command_selectGroup(argv[1] || "", getPlayerCharacter());
                    if (typeof group === "string") {
                        return respond(group);
                    }
                    const curse = cursesInfo[group.Name];
                    if (!curse) {
                        return respond(`This group or item is not cursed`);
                    }
                    const target = (argv[2] || "").toLocaleLowerCase();
                    if (target !== "yes" && target !== "no") {
                        return respond(`Expected yes or no`);
                    }
                    if (curse.data == null) {
                        return respond(`Empty groups cannot have configuration cursed`);
                    }
                    const asset = AssetGet(Player.AssetFamily, group.Name, cursesInfo[group.Name].data.Name);
                    if (asset && target === "yes" && !curseAllowItemCurseProperty(asset)) {
                        return respond(`This item cannot have configuration cursed`);
                    }
                    curse.data.curseProperties = target === "yes";
                    respond(ConditionsUpdate("curses", group.Name, curse, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                }
                else if (subcommand === "autoremove") {
                    const group = Command_selectGroup(argv[1] || "", getPlayerCharacter());
                    if (typeof group === "string") {
                        return respond(group);
                    }
                    const curse = cursesInfo[group.Name];
                    if (!curse) {
                        return respond(`This group or item is not cursed`);
                    }
                    if (!cursesInfo[group.Name].requirements) {
                        return respond(`Cannot change autoremove while the curse uses the global configuration. First use:\ncurses triggers <curse> global no`);
                    }
                    const target = (argv[2] || "").toLocaleLowerCase();
                    if (target !== "yes" && target !== "no") {
                        return respond(`Expected yes or no`);
                    }
                    if (curse.data == null) {
                        return respond(`Empty groups have no item to be automatically removed`);
                    }
                    curse.data.itemRemove = target === "yes";
                    respond(ConditionsUpdate("curses", group.Name, curse, sender) ? `Ok.` : COMMAND_GENERIC_ERROR);
                }
                else {
                    respond(Command_fixExclamationMark(sender, `!curses usage (page 1):\n` +
                        `!curses list - List all cursed <group>s and related info (eg. cursed items)\n` +
                        `!curses listgroups <items|clothes|body> - Lists all possible item or cloth <group> slots and worn items\n` +
                        `!curses curse <group> - Places a curse on the specified item/cloth <group>\n` +
                        `!curses curseworn <items|clothes|body> - Place a curse on all currently worn items/clothes\n` +
                        `!curses curseall <items|clothes|body> - Place a curse on all item/cloth slots, both used and empty\n` +
                        `!curses lift <group> - Lifts (removes) the curse from the specified item/cloth <group>\n` +
                        `!curses liftall - Lifts (removes) all curses\n` +
                        `!curses configuration <group> <yes|no> - Curses or uncurses the item configuration of an item/cloth in <group>\n` +
                        `!curses autoremove <group> <yes|no> - Removes an item/cloth in <group> when the curse is no longer in effect`));
                    respond(Command_fixExclamationMark(sender, `!curses usage (page 2):\n` +
                        `!curses setactive <group> <yes/no> - Switch the curse and its conditions on and off\n` +
                        `!curses triggers <group> global <yes/no> - Set the trigger condition of this curse to the global configuration\n` +
                        `!curses triggers <group> help - Set the trigger configuration of a curse\n` +
                        `!curses globaltriggers help - Set global trigger configuration\n` +
                        `!curses timer <group> help - Set timer options of a curse\n` +
                        `!curses defaulttimer help - Set default timer options used on new curses\n` +
                        `!curses setlimit <group> <normal/limited/blocked> - Set a limit on certain <group>\n` +
                        `\nHint: If an argument contains spaces: "put it in quotes"`));
                }
            }, (argv, sender) => {
                if (!moduleIsEnabled(ModuleCategory.Curses)) {
                    return [];
                }
                if (argv.length <= 1) {
                    return Command_pickAutocomplete(argv[0], ["list", "listgroups", "curse", "curseworn", "curseall", "lift", "liftall", "configuration", "autoremove", ...ConditionsSubcommands]);
                }
                const subcommand = argv[0].toLocaleLowerCase();
                const cursesInfo = ConditionsGetCategoryPublicData("curses", sender).conditions;
                if (ConditionsSubcommands.includes(subcommand)) {
                    return ConditionsAutocompleteSubcommand("curses", argv, sender);
                }
                else if (subcommand === "listgroups") {
                    if (argv.length === 2) {
                        return Command_pickAutocomplete(argv[1], ["items", "clothes"]);
                    }
                }
                else if (subcommand === "curse") {
                    if (argv.length === 2) {
                        return Command_selectGroupAutocomplete(argv[1] || "", getPlayerCharacter());
                    }
                }
                else if (subcommand === "curseworn" || subcommand === "curseall") {
                    if (argv.length === 2) {
                        return Command_pickAutocomplete(argv[1], ["items", "clothes"]);
                    }
                }
                else if (subcommand === "lift") {
                    if (argv.length === 2) {
                        return Command_selectGroupAutocomplete(argv[1] || "", getPlayerCharacter(), G => cursesInfo[G.Name] !== undefined);
                    }
                }
                else if (subcommand === "configuration") {
                    if (argv.length === 2) {
                        return Command_selectGroupAutocomplete(argv[1] || "", getPlayerCharacter(), G => cursesInfo[G.Name] !== undefined);
                    }
                    else if (argv.length === 3) {
                        return Command_pickAutocomplete(argv[2], ["yes", "no"]);
                    }
                }
                else if (subcommand === "autoremove") {
                    if (argv.length === 2) {
                        return Command_selectGroupAutocomplete(argv[1] || "", getPlayerCharacter(), G => cursesInfo[G.Name] !== undefined);
                    }
                    else if (argv.length === 3) {
                        return Command_pickAutocomplete(argv[2], ["yes", "no"]);
                    }
                }
                return [];
            });
            ConditionsRegisterCategory("curses", {
                category: ModuleCategory.Curses,
                permission_normal: "curses_normal",
                permission_limited: "curses_limited",
                permission_configure: "curses_global_configuration",
                permission_changeLimits: "curses_change_limits",
                permission_viewOriginator: "curses_view_originator",
                loadValidateConditionKey: (group) => AssetGroup.some(g => g.Name === group && g.AllowCustomize),
                loadValidateCondition: (group, data) => {
                    const info = data.data;
                    const assetGroup = AssetGroupGet(Player.AssetFamily, group);
                    if (!assetGroup || !assetGroup.AllowCustomize)
                        return false;
                    if (info === null) {
                        if (!assetGroup.AllowNone) {
                            console.warn(`BCX: Invalid empty cursed slot without none allowed for '${group}', removing it`, info);
                            return false;
                        }
                        return true;
                    }
                    if (!isObject$1(info) ||
                        typeof info.Name !== "string" ||
                        typeof info.curseProperty !== "boolean") {
                        console.error(`BCX: Bad data for cursed item in group ${group}, removing it`, info);
                        return false;
                    }
                    if (info.itemRemove && !assetGroup.AllowNone) {
                        console.warn(`BCX: Invalid itemRemove for curse ${group}:${info.Name}, removing it`, info);
                        return false;
                    }
                    if (AssetGet("Female3DCG", group, info.Name) == null) {
                        console.warn(`BCX: Unknown cursed item ${group}:${info.Name}, removing it`, info);
                        return false;
                    }
                    return true;
                },
                loadCategorySpecificGlobalData: (data) => {
                    if (!isObject$1(data)) {
                        console.warn("BCX: Bad curses global data, resetting");
                        data = {
                            itemRemove: false,
                        };
                    }
                    if (typeof data.itemRemove !== "boolean") {
                        data.itemRemove = false;
                    }
                    return data;
                },
                stateChangeHandler: this.curseStateChange.bind(this),
                tickHandler: this.curseTick.bind(this),
                afterTickHandler: this.afterCurseTick.bind(this),
                makePublicData: (group, data) => {
                    var _a;
                    if (data.data === null) {
                        return null;
                    }
                    return {
                        Name: data.data.Name,
                        curseProperties: data.data.curseProperty,
                        itemRemove: (_a = data.data.itemRemove) !== null && _a !== void 0 ? _a : false,
                    };
                },
                validateCategorySpecificGlobalData: data => isObject$1(data) && typeof data.itemRemove === "boolean",
                validatePublicData: (group, data) => {
                    var _a;
                    return data === null ||
                        isObject$1(data) &&
                            typeof data.Name === "string" &&
                            typeof data.curseProperties === "boolean" &&
                            typeof data.itemRemove === "boolean" &&
                            (!data.itemRemove || !!((_a = AssetGroupGet(Player.AssetFamily, group)) === null || _a === void 0 ? void 0 : _a.AllowNone));
                },
                updateCondition: (condition, data, updateData, character, rawData) => {
                    var _a;
                    const group = AssetGroupGet(Player.AssetFamily, condition);
                    if (!group)
                        return false;
                    if (((_a = data.data) === null || _a === void 0 ? void 0 : _a.Name) !== (updateData === null || updateData === void 0 ? void 0 : updateData.Name))
                        return false;
                    if (!data.data || !updateData)
                        return true;
                    const asset = AssetGet(Player.AssetFamily, condition, data.data.Name);
                    if (!asset) {
                        console.warn(`BCX: Curse asset ${condition}:${data.data.Name} not found during update`);
                        return false;
                    }
                    data.data.curseProperty = updateData.curseProperties;
                    if (!curseAllowItemCurseProperty(asset) && data.data.curseProperty) {
                        console.warn(`BCX: Attempt to curse properties of item ${condition}:${data.data.Name}, while not allowed`);
                        data.data.curseProperty = false;
                    }
                    if (updateData.itemRemove && rawData.requirements && group.AllowNone) {
                        data.data.itemRemove = true;
                    }
                    else {
                        delete data.data.itemRemove;
                    }
                    return true;
                },
                parseConditionName: (selector, onlyExisting) => {
                    const group = Command_selectGroup(selector, getPlayerCharacter(), G => !onlyExisting || onlyExisting.includes(G.Name));
                    if (typeof group === "string") {
                        return [false, group];
                    }
                    return [true, group.Name];
                },
                autocompleteConditionName: (selector, onlyExisting) => {
                    return Command_selectGroupAutocomplete(selector, getPlayerCharacter(), G => !onlyExisting || onlyExisting.includes(G.Name));
                },
                logLimitChange: (group, character, newLimit) => {
                    logMessage("curse_change", LogEntryType.plaintext, `${character} changed ${Player.Name}'s curse slot '${group}' permission to ${ConditionsLimit[newLimit]}`);
                    if (!character.isPlayer()) {
                        ChatRoomSendLocal(`${character.toNicknamedString()} changed curse slot '${group}' permission to ${ConditionsLimit[newLimit]}`, undefined, character.MemberNumber);
                    }
                },
                logConditionUpdate: (group, character, newData, oldData) => {
                    var _a, _b, _c, _d, _e, _f;
                    const assetGroup = AssetGroup.find(g => g.Name === group);
                    const visibleName = assetGroup ? getVisibleGroupName(assetGroup) : "[ERROR]";
                    const didActiveChange = newData.active !== oldData.active;
                    const didTimerChange = newData.timer !== oldData.timer || newData.timerRemove !== oldData.timerRemove;
                    const didTriggerChange = !isEqual(newData.requirements, oldData.requirements);
                    const didItemRemoveChange = newData.requirements != null && ((_a = newData.data) === null || _a === void 0 ? void 0 : _a.itemRemove) !== ((_b = oldData.data) === null || _b === void 0 ? void 0 : _b.itemRemove);
                    const didItemConfigCurseChange = ((_c = newData.data) === null || _c === void 0 ? void 0 : _c.curseProperties) !== ((_d = oldData.data) === null || _d === void 0 ? void 0 : _d.curseProperties);
                    const changeEvents = [];
                    if (didActiveChange)
                        changeEvents.push("active state");
                    if (didTimerChange)
                        changeEvents.push("timer");
                    if (didTriggerChange)
                        changeEvents.push("trigger condition");
                    if (didItemRemoveChange)
                        changeEvents.push("autoremove option");
                    if (didItemConfigCurseChange)
                        changeEvents.push("item config curse");
                    if (changeEvents.length > 0) {
                        logMessage("curse_change", LogEntryType.plaintext, `${character} changed the ${changeEvents.join(", ")} of ${Player.Name}'s curse on slot '${visibleName}'`);
                    }
                    if (!character.isPlayer()) {
                        if (didActiveChange) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} ${newData.active ? "reactivated" : "deactivated"} the curse on slot '${visibleName}'`, undefined, character.MemberNumber);
                        }
                        if (newData.timer !== oldData.timer)
                            if (newData.timer === null) {
                                ChatRoomSendLocal(`${character.toNicknamedString()} disabled the timer of the curse on slot '${visibleName}'`, undefined, character.MemberNumber);
                            }
                            else {
                                ChatRoomSendLocal(`${character.toNicknamedString()} changed the remaining time of the timer of the curse on slot '${visibleName}' to ${formatTimeInterval(newData.timer - Date.now())}`, undefined, character.MemberNumber);
                            }
                        if (newData.timer !== null && newData.timerRemove !== oldData.timerRemove)
                            ChatRoomSendLocal(`${character.toNicknamedString()} changed the timer behavior of the curse on slot '${visibleName}' to ${newData.timerRemove ? "remove" : "disable"} the curse when time runs out`, undefined, character.MemberNumber);
                        if (didItemRemoveChange) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} set the curse on slot '${visibleName}' to ${((_e = newData.data) === null || _e === void 0 ? void 0 : _e.itemRemove) ? "remove" : "keep"} the item when the curse is no longer in effect`, undefined, character.MemberNumber);
                        }
                        if (didTriggerChange)
                            if (newData.requirements === null) {
                                ChatRoomSendLocal(`${character.toNicknamedString()} set the curse on slot '${visibleName}' to use the global curses configuration`, undefined, character.MemberNumber);
                            }
                            else {
                                const triggers = [];
                                const r = newData.requirements;
                                if (r.room) {
                                    triggers.push(`When ${r.room.inverted ? "not in" : "in"} ${r.room.type} room`);
                                }
                                if (r.roomName) {
                                    triggers.push(`When ${r.roomName.inverted ? "not in" : "in"} room named '${r.roomName.name}'`);
                                }
                                if (r.role) {
                                    const role = capitalizeFirstLetter(AccessLevel[r.role.role]) + (r.role.role !== AccessLevel.clubowner ? " ↑" : "");
                                    triggers.push(`When ${r.role.inverted ? "not in" : "in"} room with role '${role}'`);
                                }
                                if (r.player) {
                                    const name = getCharacterName(r.player.memberNumber, null);
                                    triggers.push(`When ${r.player.inverted ? "not in" : "in"} room with member '${r.player.memberNumber}'${name ? ` (${name})` : ""}`);
                                }
                                if (triggers.length > 0) {
                                    ChatRoomSendLocal(`${character.toNicknamedString()} set the curse on slot ${visibleName} to trigger under following conditions:\n` + triggers.join("\n"), undefined, character.MemberNumber);
                                }
                                else {
                                    ChatRoomSendLocal(`${character.toNicknamedString()} deactivated all trigger conditions of the curse on slot ${visibleName}. The curse will now always trigger, while it is active`, undefined, character.MemberNumber);
                                }
                            }
                        if (didItemConfigCurseChange)
                            ChatRoomSendLocal(`${character.toNicknamedString()} ${((_f = newData.data) === null || _f === void 0 ? void 0 : _f.curseProperties) ? "cursed" : "lifted the curse of"} the '${visibleName}' item's configuration`, undefined, character.MemberNumber);
                    }
                },
                logCategoryUpdate: (character, newData, oldData) => {
                    var _a, _b, _c;
                    const didTimerChange = newData.timer !== oldData.timer || newData.timerRemove !== oldData.timerRemove;
                    const didTriggerChange = !isEqual(newData.requirements, oldData.requirements);
                    const didItemRemoveChange = ((_a = newData.data) === null || _a === void 0 ? void 0 : _a.itemRemove) !== ((_b = oldData.data) === null || _b === void 0 ? void 0 : _b.itemRemove);
                    const changeEvents = [];
                    if (didTimerChange)
                        changeEvents.push("default timer");
                    if (didTriggerChange)
                        changeEvents.push("trigger condition");
                    if (didItemRemoveChange)
                        changeEvents.push("autoremove option");
                    if (changeEvents.length > 0) {
                        logMessage("curse_change", LogEntryType.plaintext, `${character} changed the ${changeEvents.join(", ")} of ${Player.Name}'s global curses config`);
                    }
                    if (!character.isPlayer()) {
                        if (newData.timer !== oldData.timer)
                            if (newData.timer === null) {
                                ChatRoomSendLocal(`${character.toNicknamedString()} removed the default timer of the global curses configuration`, undefined, character.MemberNumber);
                            }
                            else {
                                ChatRoomSendLocal(`${character.toNicknamedString()} changed the default timer of the global curses configuration to ${formatTimeInterval(newData.timer)}`, undefined, character.MemberNumber);
                            }
                        if (newData.timer !== null && newData.timerRemove !== oldData.timerRemove)
                            ChatRoomSendLocal(`${character.toNicknamedString()} changed the default timeout behavior of the global curses configuration to ${newData.timerRemove ? "removal of curses" : "disabling curses"} when time runs out`, undefined, character.MemberNumber);
                        if (didItemRemoveChange) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} changed the default curses behaviour to ${((_c = newData.data) === null || _c === void 0 ? void 0 : _c.itemRemove) ? "remove" : "keep"} an item when the curse on it is no longer in effect`, undefined, character.MemberNumber);
                        }
                        if (didTriggerChange) {
                            const triggers = [];
                            const r = newData.requirements;
                            if (r.room) {
                                triggers.push(`When ${r.room.inverted ? "not in" : "in"} ${r.room.type} room`);
                            }
                            if (r.roomName) {
                                triggers.push(`When ${r.roomName.inverted ? "not in" : "in"} room named '${r.roomName.name}'`);
                            }
                            if (r.role) {
                                const role = capitalizeFirstLetter(AccessLevel[r.role.role]) + (r.role.role !== AccessLevel.clubowner ? " ↑" : "");
                                triggers.push(`When ${r.role.inverted ? "not in" : "in"} room with role '${role}'`);
                            }
                            if (r.player) {
                                const name = getCharacterName(r.player.memberNumber, null);
                                triggers.push(`When ${r.player.inverted ? "not in" : "in"} room with member '${r.player.memberNumber}'${name ? ` (${name})` : ""}`);
                            }
                            if (triggers.length > 0) {
                                ChatRoomSendLocal(`${character.toNicknamedString()} set the global curses configuration to trigger curses under following conditions:\n` + triggers.join("\n"), undefined, character.MemberNumber);
                            }
                            else {
                                ChatRoomSendLocal(`${character.toNicknamedString()} deactivated all trigger conditions for the global curses configuration. Curses set to this default configuration will now always trigger, while active`, undefined, character.MemberNumber);
                            }
                        }
                    }
                },
                getDefaultLimits: () => {
                    const result = {};
                    for (const group of AssetGroup) {
                        if (group.Category === "Appearance" && !group.Clothing && group.AllowCustomize) {
                            result[group.Name] = ConditionsLimit.limited;
                        }
                    }
                    return result;
                },
                commandConditionSelectorHelp: "group",
                currentExportImport: {
                    export(condition, data) {
                        return data;
                    },
                    import(condition, data, character) {
                        const validator = z.object({
                            Name: z.string(),
                            curseProperty: z.boolean(),
                            Color: z.union([z.string(), z.array(z.string())]).optional(),
                            Difficulty: z.number().optional(),
                            Property: z.custom(isObject$1).optional(),
                            Craft: z.any(),
                            itemRemove: z.literal(true).optional(),
                        }).nullable();
                        const validationResult = validator.safeParse(data);
                        if (!validationResult.success) {
                            return [false, JSON.stringify(validationResult.error.format(), undefined, "\t")];
                        }
                        const validatedData = validationResult.data;
                        if (validatedData != null && AssetGet("Female3DCG", condition, validatedData.Name) == null) {
                            return [false, `Unknown item "${condition}:${validatedData.Name}"`];
                        }
                        if ((validatedData === null || validatedData === void 0 ? void 0 : validatedData.Craft) != null) {
                            const craftValidationResult = ValidationVerifyCraftData(validatedData.Craft, AssetGet("Female3DCG", condition, validatedData.Name));
                            if (craftValidationResult.result) {
                                validatedData.Craft = craftValidationResult.result;
                            }
                            else {
                                return [false, "Crafting validation failed:\n" + craftValidationResult.messages.join("\n")];
                            }
                        }
                        return [true, validatedData];
                    },
                    importLog(condition, data, character) {
                        const group = AssetGroupGet(Player.AssetFamily, condition);
                        if (!character || !group)
                            return;
                        logMessage("curse_change", LogEntryType.plaintext, `${character} imported a curse on ${Player.Name}'s ${getVisibleGroupName(group)}`);
                        if (!character.isPlayer()) {
                            ChatRoomSendLocal(`${character.toNicknamedString()} imported a curse on your ${getVisibleGroupName(group)}`);
                        }
                    },
                    importRemove(condition, character) {
                        if (!curseLift(condition, character)) {
                            return "Failed.";
                        }
                        return true;
                    },
                },
            });
        }
        load() {
            if (!moduleIsEnabled(ModuleCategory.Curses)) {
                return;
            }
            hookFunction("ValidationResolveModifyDiff", 0, (args, next) => {
                const params = args[2];
                const result = next(args);
                if (params.C.ID === 0 && result.item) {
                    const condition = ConditionsGetCondition("curses", result.item.Asset.Group.Name);
                    const curse = condition === null || condition === void 0 ? void 0 : condition.data;
                    const character = getChatroomCharacter(params.sourceMemberNumber);
                    if (curse &&
                        result.item.Asset.Name === curse.Name &&
                        !itemColorsEquals(curse.Color, result.item.Color) &&
                        character &&
                        checkPermissionAccess("curses_color", character)) {
                        if (result.item.Color && result.item.Color !== "Default") {
                            curse.Color = cloneDeep(result.item.Color);
                        }
                        else {
                            delete curse.Color;
                        }
                        modStorageSync();
                    }
                }
                return result;
            }, ModuleCategory.Curses);
            hookFunction("ColorPickerDraw", 0, (args, next) => {
                const Callback = args[5];
                if (Callback === ItemColorOnPickerChange) {
                    args[5] = (color) => {
                        if (ItemColorCharacter === Player && ItemColorItem) {
                            const newColors = ItemColorState.colors.slice();
                            ItemColorPickerIndices.forEach(i => newColors[i] = color);
                            ItemColorItem.Color = newColors;
                            CharacterLoadCanvas(ItemColorCharacter);
                            const condition = ConditionsGetCondition("curses", ItemColorItem.Asset.Group.Name);
                            const curse = condition === null || condition === void 0 ? void 0 : condition.data;
                            if (curse &&
                                !itemColorsEquals(curse.Color, ItemColorItem.Color) &&
                                checkPermissionAccess("curses_color", getPlayerCharacter())) {
                                if (ItemColorItem.Color && ItemColorItem.Color !== "Default") {
                                    curse.Color = cloneDeep(ItemColorItem.Color);
                                }
                                else {
                                    delete curse.Color;
                                }
                                modStorageSync();
                            }
                        }
                        else {
                            Callback(color);
                        }
                    };
                }
                return next(args);
            });
            trackFunction("CharacterAppearanceGenderAllowed");
        }
        run() {
            if (!moduleIsEnabled(ModuleCategory.Curses))
                return;
            this.resetTimer = BCX_setInterval(() => {
                this.triggerCounts.clear();
            }, CURSES_ANTILOOP_RESET_INTERVAL);
        }
        unload() {
            if (this.resetTimer !== null) {
                clearInterval(this.resetTimer);
                this.resetTimer = null;
            }
            removeAllHooksByModule(ModuleCategory.Curses);
        }
        reload() {
            this.unload();
            this.load();
            this.run();
        }
        curseTick(group, condition) {
            var _a, _b, _c;
            const assetGroup = AssetGroupGet(Player.AssetFamily, group);
            if (!assetGroup) {
                console.error(`BCX: AssetGroup not found for curse ${group}`, condition);
                return;
            }
            if (this.suspendedUntil.has(group)) {
                if (Date.now() >= this.suspendedUntil.get(group)) {
                    this.suspendedUntil.delete(group);
                    this.triggerCounts.clear();
                    ChatRoomActionMessage(`The dormant curse on SourceCharacter's ${getVisibleGroupName(assetGroup)} wakes up again.`, null, [
                        { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    ]);
                }
                else {
                    return;
                }
            }
            if (CURSE_INACTIVE_SCREENS.includes(CurrentScreen) || (CurrentCharacter === null || CurrentCharacter === void 0 ? void 0 : CurrentCharacter.IsNpc()))
                return;
            const curse = condition.data;
            let currentItem = InventoryGet(Player, group);
            if ((currentItem && CURSE_IGNORED_ITEMS.includes(currentItem.Asset.Name)) ||
                (curse && CURSE_IGNORED_ITEMS.includes(curse.Name))) {
                return;
            }
            if (curse === null) {
                if (currentItem && currentItem.Asset.Group.AllowNone) {
                    InventoryRemove(Player, group, false);
                    CharacterRefresh(Player, true);
                    ChatRoomCharacterUpdate(Player);
                    this.pendingMessages.remove.push(currentItem.Asset.Description);
                    BCXGlobalEventSystem.emitEvent("curseTrigger", {
                        action: "remove",
                        group,
                    });
                }
                return;
            }
            const asset = AssetGet("Female3DCG", group, curse.Name);
            if (!asset) {
                console.error(`BCX: Asset not found for curse ${group}:${curse.Name}`, curse);
                return;
            }
            if (!callOriginal("CharacterAppearanceGenderAllowed", [asset]))
                return;
            let changeType = "";
            if (currentItem && currentItem.Asset.Name !== curse.Name) {
                InventoryRemove(Player, group, false);
                changeType = "swap";
                currentItem = null;
            }
            if (!currentItem) {
                currentItem = {
                    Asset: asset,
                    Color: curse.Color != null ? cloneDeep(curse.Color) : "Default",
                    Property: curse.Property != null ? cloneDeep(curse.Property) : {},
                    Craft: ValidationVerifyCraftData(curse.Craft, asset).result,
                    Difficulty: curse.Difficulty != null ? curse.Difficulty : 0,
                };
                Player.Appearance.push(currentItem);
                if (!changeType)
                    changeType = "add";
            }
            if (curse.curseProperty) {
                const itemProperty = currentItem.Property = ((_a = currentItem.Property) !== null && _a !== void 0 ? _a : {});
                const curseProperty = ((_b = curse.Property) !== null && _b !== void 0 ? _b : {});
                for (const key of arrayUnique(Object.keys(curseProperty).concat(Object.keys(itemProperty)))) {
                    if (key === "Effect")
                        continue;
                    if (CURSE_IGNORED_PROPERTIES.includes(key)) {
                        delete curseProperty[key];
                        continue;
                    }
                    if (curseProperty[key] === undefined) {
                        if (itemProperty[key] !== undefined) {
                            delete itemProperty[key];
                            if (!changeType)
                                changeType = "update";
                        }
                    }
                    else if (typeof curseProperty[key] !== typeof itemProperty[key] ||
                        !isEqual(curseProperty[key], itemProperty[key])) {
                        itemProperty[key] = cloneDeep(curseProperty[key]);
                        if (!changeType)
                            changeType = "update";
                    }
                }
                const itemIgnoredEffects = Array.isArray(itemProperty.Effect) ? itemProperty.Effect.filter(i => CURSE_IGNORED_EFFECTS.includes(i)) : [];
                const itemEffects = Array.isArray(itemProperty.Effect) ? itemProperty.Effect.filter(i => !CURSE_IGNORED_EFFECTS.includes(i)).sort() : [];
                const curseEffects = Array.isArray(curseProperty.Effect) ? curseProperty.Effect.filter(i => !CURSE_IGNORED_EFFECTS.includes(i)).sort() : [];
                if (!CommonArraysEqual(itemEffects, curseEffects)) {
                    itemProperty.Effect = curseEffects.concat(itemIgnoredEffects);
                }
                if (Object.keys(curseProperty).length === 0) {
                    delete curse.Property;
                }
                else if (!isEqual(curse.Property, curseProperty)) {
                    curse.Property = curseProperty;
                }
            }
            else {
                curse.Property = curseCreateCurseItemInfo(currentItem).Property;
            }
            const validatedCurseCraft = ValidationVerifyCraftData(curse.Craft, asset).result;
            if (!isEqual(ValidationVerifyCraftData(currentItem.Craft, currentItem.Asset).result, validatedCurseCraft)) {
                if (validatedCurseCraft === undefined) {
                    delete currentItem.Craft;
                }
                else {
                    currentItem.Craft = {
                        ...(isObject$1(currentItem.Craft) ? currentItem.Craft : {}),
                        ...validatedCurseCraft,
                    };
                }
                if (!changeType)
                    changeType = "update";
            }
            if (!itemColorsEquals(curse.Color, currentItem.Color)) {
                if (curse.Color === undefined || curse.Color === "Default") {
                    delete currentItem.Color;
                }
                else {
                    currentItem.Color = cloneDeep(curse.Color);
                }
                if (!changeType)
                    changeType = "color";
            }
            if (changeType) {
                CharacterRefresh(Player, true);
                ChatRoomCharacterUpdate(Player);
                this.pendingMessages[changeType].push(asset.Description);
                BCXGlobalEventSystem.emitEvent("curseTrigger", {
                    action: changeType,
                    group,
                });
                const counter = ((_c = this.triggerCounts.get(group)) !== null && _c !== void 0 ? _c : 0) + 1;
                this.triggerCounts.set(group, counter);
                if (counter >= CURSES_ANTILOOP_THRESHOLD) {
                    ChatRoomActionMessage(`Protection triggered: Curses on SourceCharacter's ${getVisibleGroupName(assetGroup)} have been disabled for 10 minutes. Please refrain from triggering curses so rapidly, as it creates strain on the server and may lead to unwanted side effects! If you believe this message was triggered by a bug, please report it to BCX Discord.`, null, [
                        { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    ]);
                    this.suspendedUntil.set(group, Date.now() + CURSES_ANTILOOP_SUSPEND_TIME);
                }
            }
        }
        afterCurseTick() {
            for (const changeType of Object.keys(this.pendingMessages)) {
                const list = this.pendingMessages[changeType];
                if (list.length === 0)
                    continue;
                if (list.length >= 3) {
                    ChatRoomActionMessage(dictionaryProcess(CURSES_TRIGGER_TEXTS_BATCH[changeType], { PLAYER_NAME: "SourceCharacter" }), null, [
                        { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    ]);
                    if (changeType !== "autoremove") {
                        logMessage("curse_trigger", LogEntryType.curseTriggerBatch, changeType);
                    }
                }
                else {
                    for (const item of list) {
                        ChatRoomActionMessage(dictionaryProcess(CURSES_TRIGGER_TEXTS[changeType], { PLAYER_NAME: "SourceCharacter", ASSET_NAME: item }), null, [
                            { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                        ]);
                        if (changeType !== "autoremove") {
                            logMessage("curse_trigger", LogEntryType.curseTrigger, [changeType, item]);
                        }
                    }
                }
                this.pendingMessages[changeType] = [];
            }
        }
        curseStateChange(curse, data, newState) {
            var _a;
            const group = AssetGroupGet(Player.AssetFamily, curse);
            if (!newState &&
                data.data &&
                (data.requirements ? data.data.itemRemove : (_a = ConditionsGetCategoryData("curses").data) === null || _a === void 0 ? void 0 : _a.itemRemove) &&
                (group === null || group === void 0 ? void 0 : group.AllowNone)) {
                const currentItem = InventoryGet(Player, curse);
                if (currentItem &&
                    currentItem.Asset.Name === data.data.Name &&
                    InventoryGetLock(currentItem) == null) {
                    InventoryRemove(Player, curse, true);
                    ChatRoomCharacterUpdate(Player);
                    this.pendingMessages.autoremove.push(currentItem.Asset.Description);
                    BCXGlobalEventSystem.emitEvent("curseTrigger", {
                        action: "autoremove",
                        group: curse,
                    });
                }
            }
        }
    }

    class GuiConditionEdit extends GuiSubscreen {
        constructor(character, conditionCategory, conditionName, back) {
            super();
            this.conditionCategoryData = null;
            this.conditionData = null;
            this.failed = false;
            this.changes = null;
            this.showHelp = false;
            this.character = character;
            this.conditionCategory = conditionCategory;
            this.conditionName = conditionName;
            this.back = back;
        }
        makeChangesData() {
            var _a;
            if (!this.conditionData) {
                throw new Error("Data required");
            }
            return (_a = this.changes) !== null && _a !== void 0 ? _a : cloneDeep(this.conditionData);
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            this.character.conditionsGetByCategory(this.conditionCategory).then(res => {
                if (!this.active)
                    return;
                const condition = res.conditions[this.conditionName];
                if (condition) {
                    this.conditionCategoryData = res;
                    this.conditionData = condition;
                    if (!this.checkAccess()) {
                        this.changes = null;
                    }
                    this.failed = false;
                    this.onDataChange();
                }
                else {
                    console.warn(`BCX: Condition ${this.conditionCategory}:${this.conditionName} not found in list from ${this.character}`);
                    this.conditionCategoryData = null;
                    this.conditionData = null;
                    this.failed = true;
                    this.onDataChange();
                    this.Exit();
                }
            }, err => {
                console.error(`BCX: Failed to get condition info for ${this.conditionCategory}:${this.conditionName} from ${this.character}`, err);
                this.failed = true;
            });
        }
        setUseGlobal(useGlobal) {
            var _a;
            if (!this.changes || !this.conditionData || !this.conditionCategoryData)
                return;
            this.changes.requirements = useGlobal ? null : cloneDeep((_a = this.conditionData.requirements) !== null && _a !== void 0 ? _a : this.conditionCategoryData.requirements);
        }
        onDataChange() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            let inputRoomName = document.getElementById("BCX_ConditionRoomName");
            let inputMemberNumber = document.getElementById("BCX_ConditionMemberNumber");
            if (!this.conditionCategoryData || !this.conditionData) {
                if (inputRoomName) {
                    inputRoomName.remove();
                }
                if (inputMemberNumber) {
                    inputMemberNumber.remove();
                }
                return;
            }
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionData;
            const requirements = (_b = data.requirements) !== null && _b !== void 0 ? _b : this.conditionCategoryData.requirements;
            const useGlobalCategorySetting = !data.requirements;
            const access = this.checkAccess();
            const disabled = !access || useGlobalCategorySetting;
            if (!inputRoomName) {
                inputRoomName = ElementCreateInput("BCX_ConditionRoomName", "text", (_d = (_c = requirements.roomName) === null || _c === void 0 ? void 0 : _c.name) !== null && _d !== void 0 ? _d : "", "30");
                inputRoomName.oninput = () => {
                    this.changes = this.makeChangesData();
                    this.processInputs();
                };
            }
            if (!inputMemberNumber) {
                inputMemberNumber = ElementCreateInput("BCX_ConditionMemberNumber", "text", (_g = (_f = (_e = requirements.player) === null || _e === void 0 ? void 0 : _e.memberNumber) === null || _f === void 0 ? void 0 : _f.toString()) !== null && _g !== void 0 ? _g : "0", "6");
                inputMemberNumber.inputMode = "numeric";
                inputMemberNumber.pattern = "[0-9]+";
                inputMemberNumber.oninput = () => {
                    this.changes = this.makeChangesData();
                    this.processInputs();
                };
            }
            inputRoomName.disabled = disabled || !requirements.roomName;
            inputMemberNumber.disabled = disabled || !requirements.player;
            if (!this.changes || disabled || !requirements.roomName) {
                inputRoomName.value = (_j = (_h = requirements.roomName) === null || _h === void 0 ? void 0 : _h.name) !== null && _j !== void 0 ? _j : "";
            }
            if (!this.changes || disabled || !requirements.player) {
                inputMemberNumber.value = (_m = (_l = (_k = requirements.player) === null || _k === void 0 ? void 0 : _k.memberNumber) === null || _l === void 0 ? void 0 : _l.toString()) !== null && _m !== void 0 ? _m : "0";
            }
        }
        processInputs() {
            var _a, _b, _c, _d, _e;
            const inputRoomName = document.getElementById("BCX_ConditionRoomName");
            const inputMemberNumber = document.getElementById("BCX_ConditionMemberNumber");
            if (this.changes && inputRoomName && inputMemberNumber) {
                if ((_a = this.changes.requirements) === null || _a === void 0 ? void 0 : _a.roomName) {
                    this.changes.requirements.roomName.name = inputRoomName.value;
                }
                if ((_b = this.changes.requirements) === null || _b === void 0 ? void 0 : _b.player) {
                    const memberNumber = inputMemberNumber.value;
                    if (!memberNumber)
                        return;
                    if (/^[0-9]+$/.test(memberNumber)) {
                        this.changes.requirements.player.memberNumber = Number.parseInt(memberNumber, 10);
                    }
                    else {
                        inputMemberNumber.value = ((_e = (_d = (_c = this.changes.requirements) === null || _c === void 0 ? void 0 : _c.player) === null || _d === void 0 ? void 0 : _d.memberNumber) !== null && _e !== void 0 ? _e : 0).toString();
                    }
                }
            }
        }
        checkAccess() {
            var _a;
            if (!this.conditionCategoryData)
                return false;
            const limit = (_a = this.conditionCategoryData.limits[this.conditionName]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
            return [this.conditionCategoryData.access_normal, this.conditionCategoryData.access_limited, false][limit];
        }
        Run() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            MainCanvas.textAlign = "left";
            const addedBy = (_a = this.conditionData) === null || _a === void 0 ? void 0 : _a.addedBy;
            DrawText(`- ${this.headerText()} -`, 180, 108, "Black", "Gray");
            if (addedBy !== undefined) {
                MainCanvas.save();
                MainCanvas.font = CommonGetFont(26);
                DrawText(`Added by: ${getCharacterName(addedBy, "[unknown name]")} (${addedBy})`, 205, 143, "#444");
                MainCanvas.restore();
            }
            MainCanvas.textAlign = "center";
            if (this.changes) {
                DrawButton(1815, 75, 90, 90, "", "White", "Icons/Accept.png", "Save all changes and go back");
                DrawButton(1815, 190, 90, 90, "", "White", "Icons/Cancel.png", "Go back without saving");
            }
            else {
                DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "Back");
                DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            }
            if (this.conditionCategoryData === null || this.conditionData === null) {
                MainCanvas.textAlign = "center";
                DrawText(this.failed ? `Failed to get data from ${this.character.Name}. Maybe you have no access?` : "Loading...", 1000, 480, "Black");
                return true;
            }
            if (this.changes && this.changes.timer !== null) {
                if (this.changes.timer < Date.now()) {
                    this.changes.timer = null;
                    this.changes.timerRemove = false;
                    this.changes.active = !this.changes.active;
                }
                else if (!this.changes.active) {
                    this.changes.timerRemove = false;
                }
            }
            const data = (_b = this.changes) !== null && _b !== void 0 ? _b : this.conditionData;
            const requirements = (_c = data.requirements) !== null && _c !== void 0 ? _c : this.conditionCategoryData.requirements;
            const useGlobalCategorySetting = !data.requirements;
            const access = this.checkAccess();
            const disabled = !access || useGlobalCategorySetting;
            const color = !access ? "#ddd" : data.favorite ? "Yellow" : "White";
            drawIcon(MainCanvas, icon_star, 105, 91, 60, 60, 24, 1, 1.5, color, access && MouseIn(93, 80, 85, 80) ? "Cyan" : "black");
            MainCanvas.beginPath();
            MainCanvas.moveTo(98, 272);
            MainCanvas.lineTo(960, 272);
            MainCanvas.strokeStyle = "Gray";
            MainCanvas.stroke();
            MainCanvas.beginPath();
            MainCanvas.moveTo(98, 540);
            MainCanvas.lineTo(960, 540);
            MainCanvas.stroke();
            MainCanvas.textAlign = "left";
            DrawCheckbox(125, 180, 64, 64, `This ${this.conditionCategory.slice(0, -1)} is active and can trigger`, data.active, !access);
            if (useGlobalCategorySetting) {
                MainCanvas.fillStyle = "#0052A3";
                MainCanvas.fillRect(526, 546, 418, 68);
                MainCanvas.fillRect(120, 615, 74, 74);
                MainCanvas.fillRect(120, 695, 74, 74);
                MainCanvas.fillRect(120, 775, 74, 74);
                MainCanvas.fillRect(120, 855, 74, 74);
            }
            MainCanvas.textAlign = "center";
            let statusText;
            if (data.timer === null) {
                statusText = "Timer disabled";
            }
            else {
                statusText = `${data.active ? "Deactivates" : "Activates"} in: ${formatTimeInterval(data.timer - Date.now())}`;
            }
            DrawText(statusText, 530, 311, data.active || !data.timer ? "Black" : "#060");
            if (data.timer === null) {
                DrawButton(120, 360, 820, 160, "Enable timer", "White");
                MainCanvas.textAlign = "left";
            }
            else {
                DrawButton(120, 360, 85, 60, "-1d", !access ? "#ddd" : "White", "", "Remove 1 day from the timer", !access);
                DrawButton(120 + 125, 360, 85, 60, "-1h", !access ? "#ddd" : "White", "", "Remove 1 hour from the timer", !access);
                DrawButton(120 + 2 * (125), 360, 85, 60, "-5m", !access ? "#ddd" : "White", "", "Remove 5 minutes from the timer", !access);
                DrawButton(120 + 3 * (125), 360, 70, 60, "∞", !access ? "#ddd" : "White", "", "Disable the timer", !access);
                DrawButton(105 + 4 * (125), 360, 85, 60, "+5m", !access ? "#ddd" : "White", "", "Add 5 minutes to the timer", !access);
                DrawButton(105 + 5 * (125), 360, 85, 60, "+1h", !access ? "#ddd" : "White", "", "Add 1 hour to the timer", !access);
                DrawButton(105 + 6 * (125), 360, 85, 60, "+1d", !access ? "#ddd" : "White", "", "Add 1 day to the timer", !access);
                MainCanvas.textAlign = "left";
                if (data.active) {
                    DrawCheckbox(125, 450, 64, 64, `Delete the ${this.conditionCategory.slice(0, -1)} when timer runs out`, data.timerRemove, !access);
                }
            }
            DrawText(`${capitalizeFirstLetter(this.conditionCategory.slice(0, -1))} trigger conditions:`, 130, 580, "Black", "");
            MainCanvas.textAlign = "center";
            const hasAnyRequirement = !!(requirements.room || requirements.roomName || requirements.role || requirements.player);
            DrawButton(530, 550, 410, 60, hasAnyRequirement ? (requirements.orLogic ? "Any selected below" : "All selected below") : "Always in effect", disabled || !hasAnyRequirement ? "#ddd" : "White", "", "", disabled || !hasAnyRequirement);
            MainCanvas.textAlign = "left";
            MainCanvas.fillStyle = ConditionsEvaluateRequirements(requirements, this.conditionCategoryData.highestRoleInRoom) ? "#00FF22" : "#AA0000";
            MainCanvas.fillRect(80, 620, 15, 304);
            DrawCheckbox(125, 620, 64, 64, "when", !!requirements.room, disabled);
            MainCanvas.textAlign = "center";
            DrawButton(324, 622, 115, 60, ((_d = requirements.room) === null || _d === void 0 ? void 0 : _d.inverted) ? "not in" : "in", disabled || !requirements.room ? "#ddd" : "White", "", "", disabled || !requirements.room);
            DrawButton(324 + 115 + 14, 622, 130, 60, ((_e = requirements.room) === null || _e === void 0 ? void 0 : _e.type) === "private" ? "private" : "public", disabled || !requirements.room ? "#ddd" : "White", "", "", disabled || !requirements.room);
            MainCanvas.textAlign = "left";
            DrawText(`room`, 324 + 115 + 14 + 130 + 14, 620 + 32, "Black", "Gray");
            if (requirements.room) {
                const inChatroom = ServerPlayerIsInChatRoom();
                const chatroomPrivate = inChatroom && ChatRoomData && ChatRoomData.Private;
                const res = inChatroom &&
                    (requirements.room.type === "public" ? !chatroomPrivate : chatroomPrivate);
                MainCanvas.fillStyle = (requirements.room.inverted ? !res : res) ? "#00FF22" : "#AA0000";
                MainCanvas.fillRect(95, 620, 15, 64);
            }
            DrawCheckbox(125, 700, 64, 64, "when", !!requirements.roomName, disabled);
            MainCanvas.textAlign = "center";
            DrawButton(324, 702, 115, 60, ((_f = requirements.roomName) === null || _f === void 0 ? void 0 : _f.inverted) ? "not in" : "in", disabled || !requirements.roomName ? "#ddd" : "White", "", "", disabled || !requirements.roomName);
            MainCanvas.textAlign = "left";
            DrawText(`room named`, 324 + 115 + 14, 700 + 32, "Black", "Gray");
            ElementPosition("BCX_ConditionRoomName", 324 + 115 + 14 + 360, 700 + 26, 285, 60);
            if (requirements.roomName) {
                const inChatroom = ServerPlayerIsInChatRoom();
                const res = inChatroom &&
                    ChatRoomData &&
                    typeof ChatRoomData.Name === "string" &&
                    ChatRoomData.Name.toLocaleLowerCase() === requirements.roomName.name.toLocaleLowerCase();
                MainCanvas.fillStyle = (requirements.roomName.inverted ? !res : res) ? "#00FF22" : "#AA0000";
                MainCanvas.fillRect(95, 700, 15, 64);
            }
            DrawCheckbox(125, 780, 64, 64, "when", !!requirements.role, disabled);
            MainCanvas.textAlign = "center";
            DrawButton(324, 782, 115, 60, ((_g = requirements.role) === null || _g === void 0 ? void 0 : _g.inverted) ? "not in" : "in", disabled || !requirements.role ? "#ddd" : "White", "", "", disabled || !requirements.role);
            const roleSelection = (_j = (_h = requirements.role) === null || _h === void 0 ? void 0 : _h.role) !== null && _j !== void 0 ? _j : AccessLevel.mistress;
            const roleSelectionNext = roleSelection < AccessLevel.public ? roleSelection + 1 : AccessLevel.clubowner;
            const roleSelectionPrev = roleSelection > AccessLevel.clubowner ? roleSelection - 1 : AccessLevel.public;
            DrawBackNextButton(324 + 115 + 14 + 242, 782, 244, 60, capitalizeFirstLetter(AccessLevel[roleSelection]) + (roleSelection !== AccessLevel.clubowner ? " ↑" : ""), disabled || !requirements.role ? "#ddd" : "White", "", () => capitalizeFirstLetter(AccessLevel[roleSelectionPrev]), () => capitalizeFirstLetter(AccessLevel[roleSelectionNext]), disabled || !requirements.role);
            MainCanvas.textAlign = "left";
            DrawText(`room with role`, 324 + 115 + 14, 780 + 32, "Black", "Gray");
            if (requirements.role) {
                const res = this.conditionCategoryData.highestRoleInRoom != null && this.conditionCategoryData.highestRoleInRoom <= requirements.role.role;
                MainCanvas.fillStyle = (requirements.role.inverted ? !res : res) ? "#00FF22" : "#AA0000";
                MainCanvas.fillRect(95, 780, 15, 64);
            }
            DrawCheckbox(125, 860, 64, 64, "when", !!requirements.player, disabled);
            MainCanvas.textAlign = "center";
            DrawButton(324, 862, 115, 60, ((_k = requirements.player) === null || _k === void 0 ? void 0 : _k.inverted) ? "not in" : "in", disabled || !requirements.player ? "#ddd" : "White", "", "", disabled || !requirements.player);
            MainCanvas.textAlign = "left";
            DrawText(`room with member`, 324 + 115 + 14, 860 + 32, "Black", "Gray");
            ElementPositionFix("BCX_ConditionMemberNumber", 40, 768, 860, 162, 60);
            DrawButton(950, 862, 64, 64, "", disabled || !requirements.player ? "#ddd" : "White", undefined, undefined, disabled || !requirements.player);
            DrawImageEx("Icons/Title.png", 952, 864, { Width: 60, Height: 60 });
            if (requirements.player) {
                const inChatroom = ServerPlayerIsInChatRoom();
                const res = inChatroom &&
                    getAllCharactersInRoom().some(c => c.MemberNumber === requirements.player.memberNumber);
                MainCanvas.fillStyle = (requirements.player.inverted ? !res : res) ? "#00FF22" : "#AA0000";
                MainCanvas.fillRect(95, 860, 15, 64);
                const input = document.getElementById("BCX_ConditionMemberNumber");
                if (input && document.activeElement === input) {
                    DrawHoverElements.push(() => {
                        if (!requirements.player)
                            return;
                        const Left = 957;
                        const Top = 858;
                        MainCanvas.fillStyle = "#FFFF88";
                        MainCanvas.fillRect(Left, Top, 450, 65);
                        MainCanvas.lineWidth = 2;
                        MainCanvas.strokeStyle = "black";
                        MainCanvas.strokeRect(Left, Top, 450, 65);
                        DrawTextFit(getCharacterName(requirements.player.memberNumber, "[unknown]"), Left + 225, Top + 33, 444, "black");
                    });
                }
            }
            MainCanvas.beginPath();
            MainCanvas.rect(1190, 830, 720, 104);
            MainCanvas.strokeStyle = "#0052A3";
            MainCanvas.stroke();
            DrawCheckbox(1210, 850, 64, 64, `Set to global ${this.conditionCategory} configuration`, useGlobalCategorySetting, !access);
            MainCanvas.beginPath();
            MainCanvas.ellipse(1877 + 33, 800 + 30, 22, 22, 360, 0, 360);
            MainCanvas.fillStyle = "#0052A3";
            MainCanvas.fill();
            DrawImageEx("Icons/General.png", 1877 + 10, 800 + 7, {
                Height: 46,
                Width: 46,
            });
            MainCanvas.textAlign = "center";
            if (data.timer !== null && MouseIn(125, 450, 80, 64))
                DrawButtonHover(125, 450, 64, 64, `Removes ${this.conditionCategory.slice(0, -1)} instead of only deactivating it `);
            if (MouseIn(1190, 830, 100, 104))
                DrawButtonHover(1786, 854, 64, 64, `Overwrites current trigger conditions`);
            if (MouseIn(950, 862, 64, 64))
                DrawButtonHover(950, 782, 4, 64, `Select member number from list`);
            if (MouseIn(93, 80, 85, 80))
                DrawButtonHover(93, 80, 80, 80, `Favorite: Listed first in overview`);
            return false;
        }
        Click() {
            var _a, _b, _c, _d;
            if (MouseIn(1815, 75, 90, 90)) {
                if (this.changes) {
                    this.processInputs();
                    this.character.conditionUpdate(this.conditionCategory, this.conditionName, this.changes);
                }
                this.Exit();
                return true;
            }
            if (this.changes && MouseIn(1815, 190, 90, 90)) {
                this.Exit();
                return true;
            }
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return true;
            }
            if (this.conditionCategoryData === null || this.conditionData === null)
                return true;
            if (!this.checkAccess())
                return false;
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionData;
            if (MouseIn(125, 180, 64, 64)) {
                this.changes = this.makeChangesData();
                this.changes.active = !this.changes.active;
                this.changes.timer = null;
                this.changes.timerRemove = false;
                return true;
            }
            if (MouseIn(93, 80, 85, 80)) {
                this.changes = this.makeChangesData();
                this.changes.favorite = !this.changes.favorite;
                return true;
            }
            if (data.timer === null) {
                if (MouseIn(120, 360, 820, 160)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer = Date.now() + 5 * 60 * 1000;
                    return true;
                }
            }
            else {
                if (MouseIn(120, 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer -= 1 * 24 * 60 * 60 * 1000;
                    return true;
                }
                if (MouseIn(120 + 125, 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer -= 1 * 60 * 60 * 1000;
                    return true;
                }
                if (MouseIn(120 + 2 * (125), 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer -= 5 * 60 * 1000;
                    return true;
                }
                if (MouseIn(120 + 3 * (125), 360, 70, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer = null;
                    this.changes.timerRemove = false;
                    return true;
                }
                if (MouseIn(105 + 4 * (125), 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer += 5 * 60 * 1000;
                    return true;
                }
                if (MouseIn(105 + 5 * (125), 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer += 1 * 60 * 60 * 1000;
                    return true;
                }
                if (MouseIn(105 + 6 * (125), 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer += 1 * 24 * 60 * 60 * 1000;
                    return true;
                }
                if (MouseIn(125, 450, 64, 64) && data.active) {
                    this.changes = this.makeChangesData();
                    this.changes.timerRemove = !this.changes.timerRemove;
                    return true;
                }
            }
            const useGlobalCategorySetting = !(this.changes ? this.changes.requirements : this.conditionData.requirements);
            const requirements = (_b = (this.changes ? this.changes.requirements : this.conditionData.requirements)) !== null && _b !== void 0 ? _b : this.conditionCategoryData.requirements;
            if (MouseIn(530, 550, 410, 60) && !useGlobalCategorySetting) {
                this.changes = this.makeChangesData();
                this.changes.requirements.orLogic = this.changes.requirements.orLogic ? undefined : true;
                return true;
            }
            if (MouseIn(125, 620, 64, 64) && !useGlobalCategorySetting) {
                this.changes = this.makeChangesData();
                this.changes.requirements.room = this.changes.requirements.room ? undefined : { type: "public" };
                return true;
            }
            if (MouseIn(324, 622, 115, 60) && !useGlobalCategorySetting && requirements.room) {
                this.changes = this.makeChangesData();
                this.changes.requirements.room.inverted = this.changes.requirements.room.inverted ? undefined : true;
                return true;
            }
            if (MouseIn(324 + 115 + 14, 622, 130, 60) && !useGlobalCategorySetting && requirements.room) {
                this.changes = this.makeChangesData();
                this.changes.requirements.room.type = this.changes.requirements.room.type === "public" ? "private" : "public";
                return true;
            }
            if (MouseIn(125, 700, 64, 64) && !useGlobalCategorySetting) {
                this.changes = this.makeChangesData();
                this.changes.requirements.roomName = this.changes.requirements.roomName ? undefined : { name: "" };
                this.onDataChange();
                return true;
            }
            if (MouseIn(324, 702, 115, 60) && !useGlobalCategorySetting && requirements.roomName) {
                this.changes = this.makeChangesData();
                this.changes.requirements.roomName.inverted = this.changes.requirements.roomName.inverted ? undefined : true;
                return true;
            }
            if (MouseIn(125, 780, 64, 64) && !useGlobalCategorySetting) {
                this.changes = this.makeChangesData();
                this.changes.requirements.role = this.changes.requirements.role ? undefined : { role: AccessLevel.mistress };
                return true;
            }
            if (MouseIn(324, 782, 115, 60) && !useGlobalCategorySetting && requirements.role) {
                this.changes = this.makeChangesData();
                this.changes.requirements.role.inverted = this.changes.requirements.role.inverted ? undefined : true;
                return true;
            }
            const roleSelection = (_d = (_c = requirements.role) === null || _c === void 0 ? void 0 : _c.role) !== null && _d !== void 0 ? _d : AccessLevel.mistress;
            if (MouseIn(324 + 115 + 14 + 274, 782, 106, 60) && !useGlobalCategorySetting && requirements.role) {
                this.changes = this.makeChangesData();
                this.changes.requirements.role.role = roleSelection > AccessLevel.clubowner ? roleSelection - 1 : AccessLevel.public;
                return true;
            }
            if (MouseIn(324 + 115 + 14 + 274 + 106, 782, 106, 60) && !useGlobalCategorySetting && requirements.role) {
                this.changes = this.makeChangesData();
                this.changes.requirements.role.role = roleSelection < AccessLevel.public ? roleSelection + 1 : AccessLevel.clubowner;
                return true;
            }
            if (MouseIn(125, 860, 64, 64) && !useGlobalCategorySetting) {
                this.changes = this.makeChangesData();
                this.changes.requirements.player = this.changes.requirements.player ? undefined : { memberNumber: 0 };
                this.onDataChange();
                return true;
            }
            if (MouseIn(324, 862, 115, 60) && !useGlobalCategorySetting && requirements.player) {
                this.changes = this.makeChangesData();
                this.changes.requirements.player.inverted = this.changes.requirements.player.inverted ? undefined : true;
                return true;
            }
            if (MouseIn(950, 862, 64, 64) && !useGlobalCategorySetting && requirements.player) {
                setSubscreen(new GuiMemberSelect(this.character, this, result => {
                    this.changes = this.makeChangesData();
                    this.changes.requirements.player.memberNumber = result;
                }));
                return true;
            }
            if (MouseIn(1210, 850, 64, 64)) {
                this.changes = this.makeChangesData();
                this.setUseGlobal(!!this.changes.requirements);
                this.onDataChange();
                return true;
            }
            return false;
        }
        Exit() {
            setSubscreen(this.back);
        }
        Unload() {
            ElementRemove("BCX_ConditionRoomName");
            ElementRemove("BCX_ConditionMemberNumber");
        }
    }

    class GuiConditionEditCurses extends GuiConditionEdit {
        constructor(character, conditionName, back) {
            super(character, "curses", conditionName, back);
            this.item = null;
            this.allowSettingsCurse = false;
        }
        headerText() {
            const group = AssetGroup.find(i => i.Name === this.conditionName);
            return `View / Edit the '${group ? getVisibleGroupName(group) : "[ERROR]"}' curse`;
        }
        setUseGlobal(useGlobal) {
            var _a;
            super.setUseGlobal(useGlobal);
            if (!this.changes || !this.conditionData || !this.conditionCategoryData)
                return;
            if ((_a = this.changes) === null || _a === void 0 ? void 0 : _a.data) {
                this.changes.data.itemRemove = useGlobal ? false : this.conditionCategoryData.data.itemRemove;
            }
        }
        onDataChange() {
            var _a, _b;
            super.onDataChange();
            if (!this.conditionCategoryData || !this.conditionData) {
                return;
            }
            if (this.conditionData.data) {
                this.item = AssetGet(this.character.Character.AssetFamily, this.conditionName, this.conditionData.data.Name);
                this.allowSettingsCurse = this.conditionData.data.curseProperties || !this.item || curseAllowItemCurseProperty(this.item);
            }
            else {
                this.item = null;
                this.allowSettingsCurse = false;
            }
            if (this.changes && ((_a = this.changes.data) === null || _a === void 0 ? void 0 : _a.Name) !== ((_b = this.conditionData.data) === null || _b === void 0 ? void 0 : _b.Name)) {
                this.changes.data = cloneDeep(this.conditionData.data);
            }
        }
        Run() {
            var _a, _b;
            if (super.Run() || this.conditionCategoryData === null || this.conditionData === null)
                return true;
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionData;
            const useGlobalCategorySetting = !data.requirements;
            const itemRemove = !!(useGlobalCategorySetting ? this.conditionCategoryData.data.itemRemove : (_b = data.data) === null || _b === void 0 ? void 0 : _b.itemRemove);
            const access = this.checkAccess();
            MainCanvas.textAlign = "left";
            if (data.data) {
                if (useGlobalCategorySetting) {
                    MainCanvas.fillStyle = "#0052A3";
                    MainCanvas.fillRect(1045, 100, 74, 74);
                }
                DrawCheckbox(1050, 105, 64, 64, "Remove the item when the curse", itemRemove, !access || useGlobalCategorySetting);
                MainCanvas.save();
                MainCanvas.font = CommonGetFont(28);
                DrawText("becomes inactive, removed, or is no longer", 1152, 185, "Black");
                DrawText("triggering - does not remove locked items", 1152, 225, "Black");
                MainCanvas.restore();
            }
            if (this.allowSettingsCurse && data.data) {
                DrawCheckbox(1050, 265, 64, 64, "Also curse the item's configuration", data.data.curseProperties, !access);
                MainCanvas.save();
                MainCanvas.font = CommonGetFont(28);
                DrawText(`Example: which rope tie is used`, 1151, 347, "Black", "");
                MainCanvas.restore();
                if (this.item && !curseDefaultItemCurseProperty(this.item)) {
                    MainCanvas.save();
                    MainCanvas.font = CommonGetFont(30);
                    DrawTextWrap("Warning: This item is not standardized and some or all of its configuration states could behave in unexpected ways " +
                        "if they are cursed with the above checkbox. Please assume most of them will not work correctly. " +
                        "Issues could range from respawning with a different configuration to the curse triggering randomly all the time. " +
                        "As some of these items do work (partially), the option to curse the configuration is still offered.", 1051 - 860 / 2, 365, 860, 400, "FireBrick");
                    MainCanvas.restore();
                }
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.ConditionsEditCurses]);
            }
            return false;
        }
        Click() {
            var _a;
            if (super.Click() || this.conditionCategoryData === null || this.conditionData === null)
                return true;
            if (!this.checkAccess())
                return false;
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionData;
            const useGlobalCategorySetting = !(this.changes ? this.changes.requirements : data.requirements);
            if (MouseIn(1050, 105, 64, 64) && data.data && !useGlobalCategorySetting) {
                this.changes = this.makeChangesData();
                this.changes.data.itemRemove = !this.changes.data.itemRemove;
                return true;
            }
            if (MouseIn(1050, 265, 64, 64) && this.allowSettingsCurse && data.data) {
                this.changes = this.makeChangesData();
                this.changes.data.curseProperties = !this.changes.data.curseProperties;
                return true;
            }
            return false;
        }
    }

    class GuiConditionGlobal extends GuiSubscreen {
        constructor(character, conditionCategory, back) {
            super();
            this.conditionCategoryData = null;
            this.failed = false;
            this.showHelp = false;
            this.changes = null;
            this.character = character;
            this.conditionCategory = conditionCategory;
            this.back = back;
        }
        makeChangesData() {
            var _a;
            if (!this.conditionCategoryData) {
                throw new Error("Data required");
            }
            return (_a = this.changes) !== null && _a !== void 0 ? _a : {
                requirements: cloneDeep(this.conditionCategoryData.requirements),
                timer: this.conditionCategoryData.timer,
                timerRemove: this.conditionCategoryData.timerRemove,
                data: cloneDeep(this.conditionCategoryData.data),
            };
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            this.character.conditionsGetByCategory(this.conditionCategory).then(res => {
                if (!this.active)
                    return;
                this.conditionCategoryData = res;
                if (!this.checkAccess()) {
                    this.changes = null;
                }
                this.failed = false;
                this.onDataChange();
            }, err => {
                console.error(`BCX: Failed to get condition info for ${this.conditionCategory} from ${this.character}`, err);
                this.conditionCategoryData = null;
                this.failed = true;
                this.onDataChange();
            });
        }
        onDataChange() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            let inputRoomName = document.getElementById("BCX_ConditionRoomName");
            let inputMemberNumber = document.getElementById("BCX_ConditionMemberNumber");
            if (!this.conditionCategoryData) {
                if (inputRoomName) {
                    inputRoomName.remove();
                }
                if (inputMemberNumber) {
                    inputMemberNumber.remove();
                }
                return;
            }
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionCategoryData;
            const requirements = data.requirements;
            const access = this.checkAccess();
            const disabled = !access;
            if (!inputRoomName) {
                inputRoomName = ElementCreateInput("BCX_ConditionRoomName", "text", (_c = (_b = requirements.roomName) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : "", "30");
                inputRoomName.oninput = () => {
                    this.changes = this.makeChangesData();
                    this.processInputs();
                };
            }
            if (!inputMemberNumber) {
                inputMemberNumber = ElementCreateInput("BCX_ConditionMemberNumber", "text", (_f = (_e = (_d = requirements.player) === null || _d === void 0 ? void 0 : _d.memberNumber) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : "0", "6");
                inputMemberNumber.inputMode = "numeric";
                inputMemberNumber.pattern = "[0-9]+";
                inputMemberNumber.oninput = () => {
                    this.changes = this.makeChangesData();
                    this.processInputs();
                };
            }
            inputRoomName.disabled = disabled || !requirements.roomName;
            inputMemberNumber.disabled = disabled || !requirements.player;
            if (!this.changes || disabled || !requirements.roomName) {
                inputRoomName.value = (_h = (_g = requirements.roomName) === null || _g === void 0 ? void 0 : _g.name) !== null && _h !== void 0 ? _h : "";
            }
            if (!this.changes || disabled || !requirements.player) {
                inputMemberNumber.value = (_l = (_k = (_j = requirements.player) === null || _j === void 0 ? void 0 : _j.memberNumber) === null || _k === void 0 ? void 0 : _k.toString()) !== null && _l !== void 0 ? _l : "0";
            }
        }
        processInputs() {
            var _a, _b, _c, _d, _e;
            const inputRoomName = document.getElementById("BCX_ConditionRoomName");
            const inputMemberNumber = document.getElementById("BCX_ConditionMemberNumber");
            if (this.changes && inputRoomName && inputMemberNumber) {
                if ((_a = this.changes.requirements) === null || _a === void 0 ? void 0 : _a.roomName) {
                    this.changes.requirements.roomName.name = inputRoomName.value;
                }
                if ((_b = this.changes.requirements) === null || _b === void 0 ? void 0 : _b.player) {
                    const memberNumber = inputMemberNumber.value;
                    if (!memberNumber)
                        return;
                    if (/^[0-9]+$/.test(memberNumber)) {
                        this.changes.requirements.player.memberNumber = Number.parseInt(memberNumber, 10);
                    }
                    else {
                        inputMemberNumber.value = ((_e = (_d = (_c = this.changes.requirements) === null || _c === void 0 ? void 0 : _c.player) === null || _d === void 0 ? void 0 : _d.memberNumber) !== null && _e !== void 0 ? _e : 0).toString();
                    }
                }
            }
        }
        checkAccess() {
            if (!this.conditionCategoryData)
                return false;
            return this.conditionCategoryData.access_configure;
        }
        Run() {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            MainCanvas.textAlign = "left";
            DrawText(`- ${this.headerText()} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            if (this.changes) {
                DrawButton(1815, 75, 90, 90, "", "White", "Icons/Accept.png", "Save all changes and go back");
                DrawButton(1815, 190, 90, 90, "", "White", "Icons/Cancel.png", "Go back without saving");
            }
            else {
                DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "Back");
                DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            }
            if (this.conditionCategoryData === null) {
                MainCanvas.textAlign = "center";
                DrawText(this.failed ? `Failed to get data from ${this.character.Name}. Maybe you have no access?` : "Loading...", 1000, 480, "Black");
                return true;
            }
            if (this.changes && this.changes.timer !== null && this.changes.timer <= 0) {
                this.changes.timer = null;
                this.changes.timerRemove = false;
            }
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionCategoryData;
            const requirements = data.requirements;
            const access = this.checkAccess();
            const disabled = !access;
            MainCanvas.beginPath();
            MainCanvas.moveTo(98, 272);
            MainCanvas.lineTo(960, 272);
            MainCanvas.strokeStyle = "Gray";
            MainCanvas.stroke();
            MainCanvas.beginPath();
            MainCanvas.moveTo(98, 540);
            MainCanvas.lineTo(960, 540);
            MainCanvas.stroke();
            MainCanvas.textAlign = "center";
            let statusText;
            if (data.timer === null) {
                statusText = "Timer disabled by default";
            }
            else {
                statusText = `Default timer: ${formatTimeInterval(data.timer)}`;
            }
            DrawText(statusText, 530, 311, "Black");
            if (data.timer === null) {
                DrawButton(120, 360, 820, 160, "Enable timer", "White");
                MainCanvas.textAlign = "left";
            }
            else {
                DrawButton(120, 360, 85, 60, "-1d", !access ? "#ddd" : "White", "", "Remove 1 day from the timer", !access);
                DrawButton(120 + 125, 360, 85, 60, "-1h", !access ? "#ddd" : "White", "", "Remove 1 hour from the timer", !access);
                DrawButton(120 + 2 * (125), 360, 85, 60, "-5m", !access ? "#ddd" : "White", "", "Remove 5 minutes from the timer", !access);
                DrawButton(120 + 3 * (125), 360, 70, 60, "∞", !access ? "#ddd" : "White", "", "Set lifetime to infinite", !access);
                DrawButton(105 + 4 * (125), 360, 85, 60, "+5m", !access ? "#ddd" : "White", "", "Add 5 minutes to the timer", !access);
                DrawButton(105 + 5 * (125), 360, 85, 60, "+1h", !access ? "#ddd" : "White", "", "Add 1 hour to the timer", !access);
                DrawButton(105 + 6 * (125), 360, 85, 60, "+1d", !access ? "#ddd" : "White", "", "Add 1 day to the timer", !access);
                MainCanvas.textAlign = "left";
                DrawCheckbox(125, 450, 64, 64, `Remove the ${this.conditionCategory.slice(0, -1)} when timer runs out`, data.timerRemove, !access);
            }
            DrawText(`${capitalizeFirstLetter(this.conditionCategory.slice(0, -1))} trigger conditions:`, 130, 580, "Black", "");
            MainCanvas.textAlign = "center";
            const hasAnyRequirement = !!(requirements.room || requirements.roomName || requirements.role || requirements.player);
            DrawButton(530, 550, 410, 60, hasAnyRequirement ? (requirements.orLogic ? "Any selected below" : "All selected below") : "Always in effect", disabled || !hasAnyRequirement ? "#ddd" : "White", "", "", disabled || !hasAnyRequirement);
            MainCanvas.textAlign = "left";
            MainCanvas.fillStyle = ConditionsEvaluateRequirements(requirements, this.conditionCategoryData.highestRoleInRoom) ? "#00FF22" : "#AA0000";
            MainCanvas.fillRect(75, 620, 15, 304);
            DrawCheckbox(125, 620, 64, 64, "when", !!requirements.room, disabled);
            MainCanvas.textAlign = "center";
            DrawButton(324, 622, 115, 60, ((_b = requirements.room) === null || _b === void 0 ? void 0 : _b.inverted) ? "not in" : "in", disabled || !requirements.room ? "#ddd" : "White", "", "", disabled || !requirements.room);
            DrawButton(324 + 115 + 14, 622, 130, 60, ((_c = requirements.room) === null || _c === void 0 ? void 0 : _c.type) === "private" ? "private" : "public", disabled || !requirements.room ? "#ddd" : "White", "", "", disabled || !requirements.room);
            MainCanvas.textAlign = "left";
            DrawText(`room`, 324 + 115 + 14 + 130 + 14, 620 + 32, "Black", "Gray");
            if (requirements.room) {
                const inChatroom = ServerPlayerIsInChatRoom();
                const chatroomPrivate = inChatroom && ChatRoomData && ChatRoomData.Private;
                const res = inChatroom &&
                    (requirements.room.type === "public" ? !chatroomPrivate : chatroomPrivate);
                MainCanvas.fillStyle = (requirements.room.inverted ? !res : res) ? "#00FF22" : "#AA0000";
                MainCanvas.fillRect(95, 620, 15, 64);
            }
            DrawCheckbox(125, 700, 64, 64, "when", !!requirements.roomName, disabled);
            MainCanvas.textAlign = "center";
            DrawButton(324, 702, 115, 60, ((_d = requirements.roomName) === null || _d === void 0 ? void 0 : _d.inverted) ? "not in" : "in", disabled || !requirements.roomName ? "#ddd" : "White", "", "", disabled || !requirements.roomName);
            MainCanvas.textAlign = "left";
            DrawText(`room named`, 324 + 115 + 14, 700 + 32, "Black", "Gray");
            ElementPosition("BCX_ConditionRoomName", 324 + 115 + 14 + 360, 700 + 26, 285, 60);
            if (requirements.roomName) {
                const inChatroom = ServerPlayerIsInChatRoom();
                const res = inChatroom &&
                    ChatRoomData &&
                    typeof ChatRoomData.Name === "string" &&
                    ChatRoomData.Name.toLocaleLowerCase() === requirements.roomName.name.toLocaleLowerCase();
                MainCanvas.fillStyle = (requirements.roomName.inverted ? !res : res) ? "#00FF22" : "#AA0000";
                MainCanvas.fillRect(95, 700, 15, 64);
            }
            DrawCheckbox(125, 780, 64, 64, "when", !!requirements.role, disabled);
            MainCanvas.textAlign = "center";
            DrawButton(324, 782, 115, 60, ((_e = requirements.role) === null || _e === void 0 ? void 0 : _e.inverted) ? "not in" : "in", disabled || !requirements.role ? "#ddd" : "White", "", "", disabled || !requirements.role);
            const roleSelection = (_g = (_f = requirements.role) === null || _f === void 0 ? void 0 : _f.role) !== null && _g !== void 0 ? _g : AccessLevel.mistress;
            const roleSelectionNext = roleSelection < AccessLevel.public ? roleSelection + 1 : AccessLevel.clubowner;
            const roleSelectionPrev = roleSelection > AccessLevel.clubowner ? roleSelection - 1 : AccessLevel.public;
            DrawBackNextButton(324 + 115 + 14 + 242, 782, 244, 60, capitalizeFirstLetter(AccessLevel[roleSelection]) + (roleSelection !== AccessLevel.clubowner ? " ↑" : ""), disabled || !requirements.role ? "#ddd" : "White", "", () => capitalizeFirstLetter(AccessLevel[roleSelectionPrev]), () => capitalizeFirstLetter(AccessLevel[roleSelectionNext]), disabled || !requirements.role);
            MainCanvas.textAlign = "left";
            DrawText(`room with role`, 324 + 115 + 14, 780 + 32, "Black", "Gray");
            if (requirements.role) {
                const res = this.conditionCategoryData.highestRoleInRoom != null && this.conditionCategoryData.highestRoleInRoom <= requirements.role.role;
                MainCanvas.fillStyle = (requirements.role.inverted ? !res : res) ? "#00FF22" : "#AA0000";
                MainCanvas.fillRect(95, 780, 15, 64);
            }
            DrawCheckbox(125, 860, 64, 64, "when", !!requirements.player, disabled);
            MainCanvas.textAlign = "center";
            DrawButton(324, 862, 115, 60, ((_h = requirements.player) === null || _h === void 0 ? void 0 : _h.inverted) ? "not in" : "in", disabled || !requirements.player ? "#ddd" : "White", "", "", disabled || !requirements.player);
            MainCanvas.textAlign = "left";
            DrawText(`room with member`, 324 + 115 + 14, 860 + 32, "Black", "Gray");
            ElementPositionFix("BCX_ConditionMemberNumber", 40, 768, 860, 162, 60);
            if (requirements.player) {
                const inChatroom = ServerPlayerIsInChatRoom();
                const res = inChatroom &&
                    getAllCharactersInRoom().some(c => c.MemberNumber === requirements.player.memberNumber);
                MainCanvas.fillStyle = (requirements.player.inverted ? !res : res) ? "#00FF22" : "#AA0000";
                MainCanvas.fillRect(95, 860, 15, 64);
                const input = document.getElementById("BCX_ConditionMemberNumber");
                if (input && document.activeElement === input) {
                    DrawHoverElements.push(() => {
                        if (!requirements.player)
                            return;
                        const Left = 957;
                        const Top = 858;
                        MainCanvas.fillStyle = "#FFFF88";
                        MainCanvas.fillRect(Left, Top, 450, 65);
                        MainCanvas.lineWidth = 2;
                        MainCanvas.strokeStyle = "black";
                        MainCanvas.strokeRect(Left, Top, 450, 65);
                        DrawTextFit(getCharacterName(requirements.player.memberNumber, "[unknown]"), Left + 225, Top + 33, 444, "black");
                    });
                }
            }
            MainCanvas.textAlign = "center";
            if (data.timer !== null && MouseIn(125, 450, 80, 64))
                DrawButtonHover(125, 450, 64, 64, `Removes ${this.conditionCategory.slice(0, -1)} instead of only deactivating it `);
            return false;
        }
        Click() {
            var _a, _b, _c;
            if (MouseIn(1815, 75, 90, 90)) {
                if (this.changes) {
                    this.processInputs();
                    this.character.conditionCategoryUpdate(this.conditionCategory, this.changes);
                }
                this.Exit();
                return true;
            }
            if (this.changes && MouseIn(1815, 190, 90, 90)) {
                this.Exit();
                return true;
            }
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return true;
            }
            if (this.conditionCategoryData === null)
                return true;
            if (!this.checkAccess())
                return false;
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionCategoryData;
            if (data.timer === null) {
                if (MouseIn(120, 360, 820, 160)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer = 5 * 60 * 1000;
                    return true;
                }
            }
            else {
                if (MouseIn(120, 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer -= 1 * 24 * 60 * 60 * 1000;
                    return true;
                }
                if (MouseIn(120 + 125, 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer -= 1 * 60 * 60 * 1000;
                    return true;
                }
                if (MouseIn(120 + 2 * (125), 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer -= 5 * 60 * 1000;
                    return true;
                }
                if (MouseIn(120 + 3 * (125), 360, 70, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer = null;
                    this.changes.timerRemove = false;
                    return true;
                }
                if (MouseIn(105 + 4 * (125), 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer += 5 * 60 * 1000;
                    return true;
                }
                if (MouseIn(105 + 5 * (125), 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer += 1 * 60 * 60 * 1000;
                    return true;
                }
                if (MouseIn(105 + 6 * (125), 360, 85, 60)) {
                    this.changes = this.makeChangesData();
                    this.changes.timer += 1 * 24 * 60 * 60 * 1000;
                    return true;
                }
                if (MouseIn(125, 450, 64, 64)) {
                    this.changes = this.makeChangesData();
                    this.changes.timerRemove = !this.changes.timerRemove;
                    return true;
                }
            }
            const requirements = data.requirements;
            if (MouseIn(530, 550, 410, 60)) {
                this.changes = this.makeChangesData();
                this.changes.requirements.orLogic = this.changes.requirements.orLogic ? undefined : true;
                return true;
            }
            if (MouseIn(125, 620, 64, 64)) {
                this.changes = this.makeChangesData();
                this.changes.requirements.room = this.changes.requirements.room ? undefined : { type: "public" };
                return true;
            }
            if (MouseIn(324, 622, 115, 60) && requirements.room) {
                this.changes = this.makeChangesData();
                this.changes.requirements.room.inverted = this.changes.requirements.room.inverted ? undefined : true;
                return true;
            }
            if (MouseIn(324 + 115 + 14, 622, 130, 60) && requirements.room) {
                this.changes = this.makeChangesData();
                this.changes.requirements.room.type = this.changes.requirements.room.type === "public" ? "private" : "public";
                return true;
            }
            if (MouseIn(125, 700, 64, 64)) {
                this.changes = this.makeChangesData();
                this.changes.requirements.roomName = this.changes.requirements.roomName ? undefined : { name: "" };
                this.onDataChange();
                return true;
            }
            if (MouseIn(324, 702, 115, 60) && requirements.roomName) {
                this.changes = this.makeChangesData();
                this.changes.requirements.roomName.inverted = this.changes.requirements.roomName.inverted ? undefined : true;
                return true;
            }
            if (MouseIn(125, 780, 64, 64)) {
                this.changes = this.makeChangesData();
                this.changes.requirements.role = this.changes.requirements.role ? undefined : { role: AccessLevel.mistress };
                return true;
            }
            if (MouseIn(324, 782, 115, 60) && requirements.role) {
                this.changes = this.makeChangesData();
                this.changes.requirements.role.inverted = this.changes.requirements.role.inverted ? undefined : true;
                return true;
            }
            const roleSelection = (_c = (_b = requirements.role) === null || _b === void 0 ? void 0 : _b.role) !== null && _c !== void 0 ? _c : AccessLevel.mistress;
            if (MouseIn(324 + 115 + 14 + 274, 782, 106, 60) && requirements.role) {
                this.changes = this.makeChangesData();
                this.changes.requirements.role.role = roleSelection > AccessLevel.clubowner ? roleSelection - 1 : AccessLevel.public;
                return true;
            }
            if (MouseIn(324 + 115 + 14 + 274 + 106, 782, 106, 60) && requirements.role) {
                this.changes = this.makeChangesData();
                this.changes.requirements.role.role = roleSelection < AccessLevel.public ? roleSelection + 1 : AccessLevel.clubowner;
                return true;
            }
            if (MouseIn(125, 860, 64, 64)) {
                this.changes = this.makeChangesData();
                this.changes.requirements.player = this.changes.requirements.player ? undefined : { memberNumber: 0 };
                this.onDataChange();
                return true;
            }
            if (MouseIn(324, 862, 115, 60) && requirements.player) {
                this.changes = this.makeChangesData();
                this.changes.requirements.player.inverted = this.changes.requirements.player.inverted ? undefined : true;
                return true;
            }
            return false;
        }
        Exit() {
            setSubscreen(this.back);
        }
        Unload() {
            ElementRemove("BCX_ConditionRoomName");
            ElementRemove("BCX_ConditionMemberNumber");
        }
    }

    class GuiConditionGlobalCurses extends GuiConditionGlobal {
        constructor(character, back) {
            super(character, "curses", back);
        }
        headerText() {
            return `View / Edit the global ${this.conditionCategory} configuration`;
        }
        Run() {
            var _a;
            if (super.Run() || this.conditionCategoryData === null)
                return true;
            MainCanvas.textAlign = "left";
            DrawText(`Note: Settings are applied to new curses and all existing ones set to the global config.`, 130, 210, "Black", "");
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionCategoryData;
            const access = this.checkAccess();
            if (data.data) {
                DrawCheckbox(1050, 267, 64, 64, "Remove the item when the curse", data.data.itemRemove, !access);
                MainCanvas.save();
                MainCanvas.font = CommonGetFont(28);
                DrawText("becomes inactive, removed, or is no longer", 1152, 347, "Black");
                DrawText("triggering - does not remove locked items", 1152, 387, "Black");
                MainCanvas.restore();
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.ConditionsGlobalCurses]);
            }
            return false;
        }
        Click() {
            var _a;
            if (super.Click() || this.conditionCategoryData === null)
                return true;
            if (!this.checkAccess())
                return false;
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionCategoryData;
            if (MouseIn(1050, 267, 64, 64) && data.data) {
                this.changes = this.makeChangesData();
                this.changes.data.itemRemove = !this.changes.data.itemRemove;
                return true;
            }
            return false;
        }
    }

    const PER_COLUMN_COUNT = 7;
    const PER_PAGE_COUNT$2 = PER_COLUMN_COUNT * 2;
    let alphabeticalSort$2 = false;
    let activeSort = false;
    class GuiConditionView extends GuiSubscreen {
        constructor(character, conditionCategory) {
            super();
            this.conditionEntries = [];
            this.conditionCategoryData = null;
            this.failed = false;
            this.page = 0;
            this.showHelp = false;
            this.filterInput = createInputElement("text", 30);
            this.character = character;
            this.conditionCategory = conditionCategory;
            this.conditionCategorySingular = conditionCategory.slice(0, -1);
            this.filterInput.addEventListener("input", ev => {
                this.onDataChange();
            });
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            this.character.conditionsGetByCategory(this.conditionCategory).then(res => {
                if (!this.active)
                    return;
                this.conditionCategoryData = res;
                this.failed = false;
                this.onDataChange();
            }, err => {
                console.error(`BCX: Failed to get condition info for ${this.conditionCategory} from ${this.character}`, err);
                this.conditionCategoryData = null;
                this.failed = true;
                this.onDataChange();
            });
        }
        onDataChange() {
            var _a;
            if (!this.active)
                return;
            this.conditionEntries = [];
            if (this.conditionCategoryData === null) {
                this.filterInput.remove();
                return;
            }
            if (!this.filterInput.parentElement) {
                document.body.appendChild(this.filterInput);
            }
            const filter = this.filterInput.value.trim().toLocaleLowerCase().split(" ").filter(Boolean);
            for (const [condition, data] of Object.entries(this.conditionCategoryData.conditions)) {
                const res = this.loadCondition(condition, data);
                if (res === null)
                    continue;
                const access = [this.conditionCategoryData.access_normal, this.conditionCategoryData.access_limited, false][(_a = this.conditionCategoryData.limits[condition]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal];
                if (filter.some(i => !condition.toLocaleLowerCase().includes(i) &&
                    !res[0].toLocaleLowerCase().includes(i)))
                    continue;
                this.conditionEntries.push({
                    condition,
                    access,
                    data,
                    displayName: res[0],
                    extra: res[1],
                });
            }
            this.conditionEntries = this.sortEntries(this.conditionEntries);
            this.page = clamp$1(this.page, 0, Math.ceil(this.conditionEntries.length / PER_PAGE_COUNT$2));
        }
        sortEntries(entries) {
            entries.sort((a, b) => (!a.data.favorite && b.data.favorite) ? 1 : ((a.data.favorite && !b.data.favorite) ? -1 : 0));
            if (alphabeticalSort$2) {
                entries.sort((a, b) => a.displayName.localeCompare(b.displayName));
            }
            if (activeSort) {
                entries.sort((a, b) => (((b.data.active ? 1 : 0) -
                    (a.data.active ? 1 : 0))));
            }
            return entries;
        }
        Run() {
            MainCanvas.textAlign = "left";
            DrawText(`- ${this.headerText()} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            if (this.conditionCategoryData === null) {
                MainCanvas.textAlign = "center";
                DrawText(this.failed ? `Failed to get data from ${this.character.Name}. Maybe you have no access?` : "Loading...", 1000, 480, "Black");
                return true;
            }
            MainCanvas.beginPath();
            MainCanvas.moveTo(953, 160);
            MainCanvas.lineTo(953, 780);
            MainCanvas.stroke();
            for (let off = 0; off < PER_PAGE_COUNT$2; off++) {
                const i = this.page * PER_PAGE_COUNT$2 + off;
                if (i >= this.conditionEntries.length)
                    break;
                const e = this.conditionEntries[i];
                const Y = 170 + (off % PER_COLUMN_COUNT) * 90;
                const X = 120 + Math.floor(off / PER_COLUMN_COUNT) * 865;
                const useGlobalCategorySetting = !e.data.requirements;
                if ((off + 1) % PER_COLUMN_COUNT === 0 ||
                    i === this.conditionEntries.length - 1 ?
                    MouseIn(X, Y, 440, 60) : MouseIn(X, Y, 440, 90)) {
                    DrawHoverElements.push(() => {
                        this.showDetailedDescriptionBackground(off < PER_COLUMN_COUNT ? 985 : 120);
                        if (MouseIn(X, Y, 440, 60)) {
                            this.showDetailedDescriptionText(off < PER_COLUMN_COUNT ? 985 : 120, e.condition, e);
                        }
                    });
                }
                MainCanvas.textAlign = "left";
                DrawButton(X, Y, 440, 60, "", "White");
                this.drawCategoryImage(X, Y, e);
                DrawTextFit(e.displayName, X + 65, Y + 30, 365, "Black");
                MainCanvas.textAlign = "center";
                DrawButton(X + 470, Y, 240, 60, "", e.data.active ? "#d8fed7" : "White");
                if (useGlobalCategorySetting) {
                    MainCanvas.beginPath();
                    MainCanvas.ellipse(X + 470 + 33, Y + 30, 22, 22, 360, 0, 360);
                    MainCanvas.fillStyle = "#0052A3";
                    MainCanvas.fill();
                }
                DrawImageEx("Icons/General.png", X + 480, Y + 7, {
                    Height: 46,
                    Width: 46,
                });
                let timeLeftText = "n/a";
                if (e.data.timer === null) {
                    timeLeftText = "∞";
                }
                else {
                    timeLeftText = formatTimeInterval(e.data.timer - Date.now(), "short");
                }
                DrawText(timeLeftText, X + 570, Y + 30, "Black", "");
                this.drawEntryExtra(X, Y, e);
                if (e.access) {
                    DrawButton(X + 740, Y, 60, 60, "X", "White", "", this.removeLabel);
                }
                if (MouseIn(X + 470, Y, 60, 60)) {
                    DrawHoverElements.push(() => {
                        DrawButtonHover(X + 470, Y, 60, 60, `Change this ${this.conditionCategorySingular}'s configuration`);
                    });
                }
                if (MouseIn(X + 531, Y, 78, 60)) {
                    DrawHoverElements.push(() => {
                        DrawButtonHover(X + 531, Y, 78, 60, `Remaining duration of the ${this.conditionCategorySingular}`);
                    });
                }
            }
            MainCanvas.textAlign = "center";
            const accessFull = this.conditionCategoryData.access_normal && this.conditionCategoryData.access_limited;
            DrawButton(678, 820, 170, 50, "", accessFull ? "White" : "#ddd", "", accessFull ? `Switch all added ${this.conditionCategory} to active` : "You have no permission to use this", !accessFull);
            DrawTextFit(`Activate all`, 680 + 170 / 2, 820 + 25, 145, "Black", "");
            DrawButton(678, 885, 170, 46, "", accessFull ? "White" : "#ddd", "", accessFull ? `Activate only global config ${this.conditionCategory}` : "You have no permission to use this", !accessFull);
            DrawTextFit(`A. only`, 684 + 115 / 2, 885 + 25, 90, "Black", "");
            MainCanvas.beginPath();
            MainCanvas.ellipse(675 + 120 + 22, 885 + 23, 21, 21, 360, 0, 360);
            MainCanvas.fillStyle = "#0052A3";
            MainCanvas.fill();
            DrawImageEx("Icons/General.png", 675 + 120, 885 + 1, {
                Height: 44,
                Width: 44,
            });
            DrawButton(870, 820, 170, 50, "Deactivate all", accessFull ? "White" : "#ddd", "", accessFull ? `Switch all added ${this.conditionCategory} to inactive` : "You have no permission to use this", !accessFull);
            DrawButton(870, 885, 170, 46, "", accessFull ? "White" : "#ddd", "", accessFull ? `Deactivate only global config ${this.conditionCategory}` : "You have no permission to use this", !accessFull);
            DrawTextFit(`D. only`, 876 + 115 / 2, 885 + 25, 90, "Black", "");
            MainCanvas.beginPath();
            MainCanvas.ellipse(868 + 120 + 22, 885 + 23, 21, 21, 360, 0, 360);
            MainCanvas.fillStyle = "#0052A3";
            MainCanvas.fill();
            DrawImageEx("Icons/General.png", 868 + 120, 885 + 1, {
                Height: 44,
                Width: 44,
            });
            DrawButton(1068, 820, 505, 90, "", this.conditionCategoryData.access_configure ? "White" : "#ddd", "", this.conditionCategoryData.access_configure ? `Existing ${this.conditionCategory} set to global ${this.conditionCategory} config are also changed` : "You have no permission to use this", !this.conditionCategoryData.access_configure);
            DrawTextFit(`Change global ${this.conditionCategory} config`, 1018 + 680 / 2, 865, 400, "Black", "");
            MainCanvas.beginPath();
            MainCanvas.ellipse(1068 + 10 + 35, 820 + 44, 34, 34, 360, 0, 360);
            MainCanvas.fillStyle = "#0052A3";
            MainCanvas.fill();
            DrawImageEx("Icons/General.png", 1068 + 10, 820 + 10, {
                Height: 70,
                Width: 70,
            });
            MainCanvas.textAlign = "left";
            positionElement(this.filterInput, 1200, 110, 500, 64);
            MainCanvas.textAlign = "center";
            if (this.filterInput.value) {
                DrawButton(1470, 82, 64, 64, "X", "White");
            }
            DrawButton(1583, 82, 64, 64, "", "White");
            DrawImageEx("Icons/Accept.png", 1583 + 3, 82 + 3, { Alpha: activeSort ? 1 : 0.2, Width: 58, Height: 58 });
            DrawButton(1683, 82, 64, 64, "", "White");
            DrawTextFit("A-Z", 1683 + 32, 82 + 32 + 1, 64 - 4, alphabeticalSort$2 ? "black" : "#bbb");
            const totalPages = Math.ceil(this.conditionEntries.length / PER_PAGE_COUNT$2);
            DrawBackNextButton(1605, 820, 300, 90, `Page ${this.page + 1} / ${Math.max(totalPages, 1)}`, "White", "", () => "", () => "");
            return false;
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90)) {
                this.Exit();
                return true;
            }
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return true;
            }
            if (this.conditionCategoryData === null)
                return true;
            for (let off = 0; off < PER_PAGE_COUNT$2; off++) {
                const i = this.page * PER_PAGE_COUNT$2 + off;
                if (i >= this.conditionEntries.length)
                    break;
                const e = this.conditionEntries[i];
                const Y = 170 + (off % PER_COLUMN_COUNT) * 90;
                const X = 120 + Math.floor(off / PER_COLUMN_COUNT) * 865;
                if (MouseIn(X, Y, 440, 60)) {
                    this.onDescriptionTextClick(e.condition, e);
                }
                if (MouseIn(X + 470, Y, 240, 60)) {
                    this.openEditSubscreen(e.condition);
                    return true;
                }
                if (e.access && MouseIn(X + 740, Y, 60, 60)) {
                    this.removeCondition(e.condition);
                    return true;
                }
            }
            const accessFull = this.conditionCategoryData.access_normal && this.conditionCategoryData.access_limited;
            if (accessFull && MouseIn(678, 820, 170, 50)) {
                this.character.conditionUpdateMultiple(this.conditionCategory, Object.entries(this.conditionCategoryData.conditions)
                    .filter(([c, d]) => !d.active)
                    .map(([c, d]) => c), { active: true });
                return true;
            }
            if (accessFull && MouseIn(678, 885, 170, 46)) {
                this.character.conditionUpdateMultiple(this.conditionCategory, Object.entries(this.conditionCategoryData.conditions)
                    .filter(([c, d]) => !d.active && d.requirements === null)
                    .map(([c, d]) => c), { active: true });
                return true;
            }
            if (accessFull && MouseIn(870, 820, 170, 50)) {
                this.character.conditionUpdateMultiple(this.conditionCategory, Object.entries(this.conditionCategoryData.conditions)
                    .filter(([c, d]) => d.active)
                    .map(([c, d]) => c), { active: false });
                return true;
            }
            if (accessFull && MouseIn(870, 885, 170, 46)) {
                this.character.conditionUpdateMultiple(this.conditionCategory, Object.entries(this.conditionCategoryData.conditions)
                    .filter(([c, d]) => d.active && d.requirements === null)
                    .map(([c, d]) => c), { active: false });
                return true;
            }
            if (this.conditionCategoryData.access_configure && MouseIn(1068, 820, 505, 90)) {
                this.openGlobalConfig();
                return true;
            }
            if (MouseIn(1470, 82, 64, 64)) {
                this.filterInput.value = "";
                this.onDataChange();
            }
            if (MouseIn(1583, 82, 64, 64)) {
                activeSort = !activeSort;
                this.onDataChange();
            }
            if (MouseIn(1683, 82, 64, 64)) {
                alphabeticalSort$2 = !alphabeticalSort$2;
                this.onDataChange();
            }
            const totalPages = Math.ceil(this.conditionEntries.length / PER_PAGE_COUNT$2);
            if (MouseIn(1605, 800, 150, 90)) {
                this.page--;
                if (this.page < 0) {
                    this.page = Math.max(totalPages - 1, 0);
                }
                return true;
            }
            else if (MouseIn(1755, 800, 150, 90)) {
                this.page++;
                if (this.page >= totalPages) {
                    this.page = 0;
                }
                return true;
            }
            return false;
        }
        Exit() {
            setSubscreen(new GuiMainMenu(this.character));
        }
        Unload() {
            this.filterInput.remove();
        }
    }

    const CATEGORIES = [
        {
            title: "Items",
            filter: g => g.Category === "Item",
            batchType: "items",
        },
        {
            title: "Clothing",
            filter: g => g.Category === "Appearance" && g.Clothing,
            batchType: "clothes",
        },
        {
            title: "Body",
            filter: g => g.Category === "Appearance" && !g.Clothing && g.AllowCustomize,
            batchType: "body",
        },
    ];
    class GuiCursesAdd extends GuiSubscreen {
        constructor(character) {
            super();
            this.curseData = null;
            this.failed = false;
            this.permissionMode = false;
            this.page = 0;
            this.showHelp = false;
            this.character = character;
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            this.character.conditionsGetByCategory("curses").then(res => {
                this.curseData = res;
                if (!this.curseData.access_changeLimits) {
                    this.permissionMode = false;
                }
                this.failed = false;
            }, err => {
                console.error(`BCX: Failed to get permission info for ${this.character}`, err);
                this.curseData = null;
                this.failed = true;
            });
        }
        Run() {
            var _a;
            MainCanvas.textAlign = "left";
            DrawText(`- Curses: Place new curses on ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "Back");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            if (this.curseData === null) {
                DrawText(this.failed ? `Failed to get curse data from ${this.character.Name}. Maybe you have no access?` : "Loading...", 1000, 480, "Black");
                return;
            }
            DrawButton(1815, 305, 90, 90, "", this.curseData.access_changeLimits ? "White" : "#ddd", this.permissionMode ? "Icons/Reset.png" : "Icons/Preference.png", this.curseData.access_changeLimits ?
                (this.permissionMode ? "Leave permission mode" : "Edit curse slot permissions") :
                "You have no permission to change limits", !this.curseData.access_changeLimits);
            for (let ciOffset = 0; ciOffset < 2; ciOffset++) {
                const ci = this.page * 2 + ciOffset;
                if (ci >= CATEGORIES.length)
                    break;
                const category = CATEGORIES[ci];
                const xOffset = ciOffset % 2 ? 845 : 0;
                MainCanvas.textAlign = "left";
                MainCanvas.fillStyle = "#cccccc";
                MainCanvas.fillRect(xOffset + 105, 165, 830, 64);
                DrawText(category.title, xOffset + 120, 165 + 34, "Black");
                MainCanvas.textAlign = "center";
                if (!this.permissionMode) {
                    DrawButton(xOffset + 440, 173, 265, 48, "Curse occupied", "White", undefined, "Curse all occupied slots at once");
                    DrawButton(xOffset + 720, 173, 200, 48, "Curse all", "White", undefined, "Curse all slots at once");
                }
                const AssetGroups = AssetGroup.filter(category.filter);
                for (let i = 0; i < AssetGroups.length; i++) {
                    const row = i % 10;
                    const column = Math.floor(i / 10);
                    const group = AssetGroups[i];
                    const currentItem = InventoryGet(this.character.Character, group.Name);
                    const itemIsCursed = this.curseData.conditions[group.Name] !== undefined;
                    const accessLevel = (_a = this.curseData.limits[group.Name]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
                    const allowCurse = [this.curseData.access_normal, this.curseData.access_limited, false][accessLevel];
                    let color;
                    let text;
                    if (this.permissionMode) {
                        color = ["#50ff56", "#f6fe78", "#ffa7a7"][accessLevel];
                        text = ["Normal", "Limited", "Blocked"][accessLevel];
                    }
                    else {
                        color = itemIsCursed ? "#88c" :
                            !allowCurse ? "#ccc" :
                                (currentItem ? "Gold" : "White");
                        text = itemIsCursed ? "Already cursed" :
                            !allowCurse ? "You have no permission to curse this" :
                                (currentItem ? currentItem.Asset.Description : "Nothing");
                    }
                    DrawButton(xOffset + 106 + 281 * column, 240 + 69 * row, 265, 54, getVisibleGroupName(group), color, undefined, text, itemIsCursed || !allowCurse || this.permissionMode);
                }
            }
            if (this.permissionMode) {
                MainCanvas.fillStyle = "#50ff56";
                MainCanvas.fillRect(1284, 75, 166, 64);
                MainCanvas.fillStyle = "#f6fe78";
                MainCanvas.fillRect(1284 + 1 * 166, 75, 166, 64);
                MainCanvas.fillStyle = "#ffa7a7";
                MainCanvas.fillRect(1284 + 2 * 166, 75, 165, 64);
                MainCanvas.textAlign = "center";
                DrawText(`Normal`, 1284 + 166 / 2, 75 + 34, "Black");
                DrawText(`Limited`, 1284 + 1 * 166 + 166 / 2, 75 + 34, "Black");
                DrawText(`Blocked`, 1284 + 2 * 166 + 166 / 2, 75 + 34, "Black");
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[this.permissionMode ? Views.CursesAddPermissionMode : Views.CursesAdd]);
            }
            const totalPages = Math.ceil(CATEGORIES.length / 2);
            DrawBackNextButton(1605, 865, 300, 90, `Page ${this.page + 1} / ${Math.max(totalPages, 1)}`, "White", "", () => "", () => "");
        }
        Click() {
            var _a;
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (this.curseData === null)
                return;
            if (MouseIn(1815, 305, 90, 90)) {
                this.permissionMode = this.curseData.access_changeLimits && !this.permissionMode;
                return;
            }
            for (let ciOffset = 0; ciOffset < 2; ciOffset++) {
                const ci = this.page * 2 + ciOffset;
                if (ci >= CATEGORIES.length)
                    break;
                const category = CATEGORIES[ci];
                const xOffset = ciOffset % 2 ? 845 : 0;
                if (MouseIn(xOffset + 440, 173, 265, 48) && !this.permissionMode) {
                    this.character.curseBatch(category.batchType, false);
                    return;
                }
                if (MouseIn(xOffset + 720, 173, 200, 48) && !this.permissionMode) {
                    this.character.curseBatch(category.batchType, true);
                    return;
                }
                const AssetGroups = AssetGroup.filter(category.filter);
                for (let i = 0; i < AssetGroups.length; i++) {
                    const row = i % 10;
                    const column = Math.floor(i / 10);
                    const group = AssetGroups[i];
                    const itemIsCursed = this.curseData.conditions[group.Name] !== undefined;
                    const accessLevel = (_a = this.curseData.limits[group.Name]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
                    const allowCurse = [this.curseData.access_normal, this.curseData.access_limited, false][accessLevel];
                    if (MouseIn(xOffset + 106 + 281 * column, 240 + 69 * row, 265, 54)) {
                        if (this.permissionMode) {
                            this.character.conditionSetLimit("curses", group.Name, (accessLevel + 1) % 3);
                        }
                        else if (!itemIsCursed && allowCurse) {
                            this.character.curseItem(group.Name, null);
                        }
                        return;
                    }
                }
            }
            const totalPages = Math.ceil(CATEGORIES.length / 2);
            if (MouseIn(1605, 865, 150, 90)) {
                this.page = clampWrap(this.page - 1, 0, totalPages - 1);
                return true;
            }
            else if (MouseIn(1755, 865, 150, 90)) {
                this.page = clampWrap(this.page + 1, 0, totalPages - 1);
                return true;
            }
        }
        Exit() {
            setSubscreen(new GuiConditionViewCurses(this.character));
        }
    }

    class GuiConditionViewCurses extends GuiConditionView {
        constructor(character) {
            super(character, "curses");
            this.removeLabel = "Lift curse";
        }
        Run() {
            if (super.Run() || this.conditionCategoryData === null)
                return true;
            DrawButton(120, 820, 250, 90, "Add new curse", "White", "", "Place new curses on body, items or clothes");
            const access = this.conditionCategoryData.access_normal || this.conditionCategoryData.access_limited;
            DrawButton(400, 820, 250, 90, "Lift all curses", access ? "White" : "#ddd", "", access ? "Remove all curses on body, items or clothes" : "You have no permission to use this", !access);
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.ConditionsViewCurses]);
            }
            return false;
        }
        Click() {
            if (super.Click() || this.conditionCategoryData === null)
                return true;
            if (MouseIn(120, 820, 250, 90)) {
                setSubscreen(new GuiCursesAdd(this.character));
                return true;
            }
            const access = this.conditionCategoryData.access_normal || this.conditionCategoryData.access_limited;
            if (access && MouseIn(400, 820, 250, 90)) {
                this.character.curseLiftAll();
                return true;
            }
            return false;
        }
        drawCategoryImage(X, Y, data) {
            DrawImageEx(data.extra.type === "body" ? "Icons/Character.png" : data.extra.type === "clothing" ? "Icons/Dress.png" : "Assets/Female3DCG/ItemArms/Preview/NylonRope.png", X + 6, Y + 6, {
                Height: 50,
                Width: 50,
            });
        }
        drawEntryExtra(X, Y, data) {
            var _a, _b;
            const useGlobalCategorySetting = !data.data.requirements;
            const itemRemove = useGlobalCategorySetting ? (_a = this.conditionCategoryData) === null || _a === void 0 ? void 0 : _a.data.itemRemove : (_b = data.data.data) === null || _b === void 0 ? void 0 : _b.itemRemove;
            if (itemRemove !== undefined && data.data.data) {
                DrawImageEx("Icons/Remove.png", X + 610, Y + 10, {
                    Height: 40,
                    Width: 40,
                    Alpha: itemRemove ? 1 : 0.2,
                });
                if (MouseIn(X + 610, Y + 6, 44, 44)) {
                    DrawHoverElements.push(() => {
                        DrawButtonHover(X + 610, Y + 6, 44, 44, itemRemove ? "Remove item when curse is dormant" : "Don't remove item when curse is dormant");
                    });
                }
            }
            if (data.extra.propertiesCursedShow) {
                DrawImageEx(data.extra.propertiesCursed ? "Icons/Lock.png" : "Icons/Unlock.png", X + 660, Y + 10, {
                    Height: 40,
                    Width: 40,
                    Alpha: data.extra.propertiesCursed ? 1 : 0.2,
                });
                if (MouseIn(X + 660, Y + 6, 44, 44)) {
                    DrawHoverElements.push(() => {
                        DrawButtonHover(X + 660, Y + 6, 44, 44, data.extra.propertiesCursed ? "Item configuration cursed" : "Item configuration not cursed");
                    });
                }
            }
        }
        headerText() {
            return `Curses: All active curses on ${this.character.Name}`;
        }
        loadCondition(condition, data) {
            var _a;
            const group = AssetGroup.find(g => g.Name === condition);
            if (!group) {
                console.warn(`BCX: Unknown group ${condition}`);
                return null;
            }
            if (data.data === null) {
                return [`Blocked: ${getVisibleGroupName(group)}`, {
                        type: group.Category === "Item" ? "item" : group.Clothing ? "clothing" : "body",
                    }];
            }
            else {
                const item = AssetGet(this.character.Character.AssetFamily, condition, data.data.Name);
                return [`${(_a = item === null || item === void 0 ? void 0 : item.Description) !== null && _a !== void 0 ? _a : data.data.Name} (${getVisibleGroupName(group)})`, {
                        type: group.Category === "Item" ? "item" : group.Clothing ? "clothing" : "body",
                        propertiesCursed: data.data.curseProperties,
                        propertiesCursedShow: data.data.curseProperties || !item || curseAllowItemCurseProperty(item),
                    }];
            }
        }
        showDetailedDescriptionBackground(X) {
            return;
        }
        showDetailedDescriptionText(X, condition, data) {
            return;
        }
        onDescriptionTextClick(condition, data) {
            return;
        }
        openEditSubscreen(condition) {
            setSubscreen(new GuiConditionEditCurses(this.character, condition, this));
        }
        removeCondition(condition) {
            this.character.curseLift(condition);
        }
        openGlobalConfig() {
            setSubscreen(new GuiConditionGlobalCurses(this.character, this));
        }
    }

    class GuiConditionEditRules extends GuiConditionEdit {
        constructor(character, conditionName, back) {
            super(character, "rules", conditionName, back);
            this.definition = RulesGetDisplayDefinition(conditionName);
        }
        headerText() {
            return `View / Edit the '${this.definition.name}' rule`;
        }
        onDataChange() {
            var _a, _b, _c;
            super.onDataChange();
            const active = !!this.conditionCategoryData && !!this.conditionData;
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionData;
            const access = this.checkAccess();
            if (this.definition.dataDefinition) {
                for (const [k, v] of Object.entries(this.definition.dataDefinition)) {
                    const handler = ruleCustomDataHandlers[v.type];
                    (_b = handler.onDataChange) === null || _b === void 0 ? void 0 : _b.call(handler, {
                        def: v,
                        active,
                        key: k,
                        onInput: () => {
                            this.changes = this.makeChangesData();
                            this.processInputs();
                        },
                        value: (_c = data === null || data === void 0 ? void 0 : data.data.customData[k]) !== null && _c !== void 0 ? _c : (typeof v.default === "function" ? v.default() : v.default),
                        access,
                    });
                }
            }
        }
        processInputs() {
            super.processInputs();
            if (this.changes && this.definition.dataDefinition) {
                for (const [k, v] of Object.entries(this.definition.dataDefinition)) {
                    const handler = ruleCustomDataHandlers[v.type];
                    if (handler.processInput) {
                        const res = handler.processInput({
                            def: v,
                            key: k,
                            value: this.changes.data.customData[k],
                        });
                        if (res !== undefined) {
                            if (!handler.validate(res, v)) {
                                console.error("processInput result failed to validate", res, v);
                                throw new Error("processInput result failed to validate");
                            }
                            this.changes.data.customData[k] = res;
                        }
                    }
                }
            }
        }
        Run() {
            var _a, _b;
            if (super.Run() || this.conditionCategoryData === null || this.conditionData === null)
                return true;
            const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionData;
            const access = this.checkAccess();
            MainCanvas.textAlign = "left";
            let Y = 175;
            if (this.definition.enforceable !== false) {
                DrawCheckbox(1050, Y, 64, 64, "Enforce this rule", data.data.enforce, !access);
                Y += 100;
            }
            if (this.definition.loggable !== false) {
                DrawCheckbox(1050, Y, 64, 64, "Behaviour log entry when rule is violated", data.data.log, !access);
                Y += 100;
            }
            Y += 45;
            if (this.definition.dataDefinition) {
                for (const [k, v] of Object.entries(this.definition.dataDefinition)) {
                    const handler = ruleCustomDataHandlers[v.type];
                    handler.run({
                        def: v,
                        value: data.data.customData[k],
                        Y: (_b = v.Y) !== null && _b !== void 0 ? _b : Y,
                        key: k,
                        target: this.character,
                        access,
                    });
                }
            }
            if (this.showHelp) {
                MainCanvas.fillStyle = "#ffff88";
                MainCanvas.fillRect(95, 80, 800, 600);
                MainCanvas.strokeStyle = "Black";
                MainCanvas.strokeRect(95, 80, 800, 600);
                MainCanvas.textAlign = "left";
                DrawTextWrap(HELP_TEXTS[Views.ConditionsEditRules], 115 - 760 / 2, 100, 760, 560, "black");
            }
            return false;
        }
        Click() {
            var _a, _b;
            if (super.Click() || this.conditionCategoryData === null || this.conditionData === null)
                return true;
            const access = this.checkAccess();
            let Y = 175;
            if (this.definition.enforceable !== false) {
                if (access && MouseIn(1050, Y, 64, 64)) {
                    this.changes = this.makeChangesData();
                    this.changes.data.enforce = !this.changes.data.enforce;
                    return true;
                }
                Y += 100;
            }
            if (this.definition.loggable !== false) {
                if (access && MouseIn(1050, Y, 64, 64)) {
                    this.changes = this.makeChangesData();
                    this.changes.data.log = !this.changes.data.log;
                    return true;
                }
                Y += 100;
            }
            Y += 45;
            if (this.definition.dataDefinition) {
                for (const [k, v] of Object.entries(this.definition.dataDefinition)) {
                    const handler = ruleCustomDataHandlers[v.type];
                    if (handler.click) {
                        const data = (_a = this.changes) !== null && _a !== void 0 ? _a : this.conditionData;
                        const res = handler.click({
                            def: v,
                            value: data.data.customData[k],
                            Y: (_b = v.Y) !== null && _b !== void 0 ? _b : Y,
                            key: k,
                            target: this.character,
                            access,
                        });
                        if (access && res !== undefined) {
                            this.changes = this.makeChangesData();
                            this.changes.data.customData[k] = res;
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        Unload() {
            if (this.definition.dataDefinition) {
                for (const [k, v] of Object.entries(this.definition.dataDefinition)) {
                    const handler = ruleCustomDataHandlers[v.type];
                    if (handler.unload) {
                        handler.unload({
                            def: v,
                            key: k,
                        });
                    }
                }
            }
            super.Unload();
        }
    }

    class GuiConditionGlobalRules extends GuiConditionGlobal {
        constructor(character, back) {
            super(character, "rules", back);
        }
        headerText() {
            return `View / Edit the global ${this.conditionCategory} configuration`;
        }
        Run() {
            if (super.Run() || this.conditionCategoryData === null)
                return true;
            MainCanvas.textAlign = "left";
            DrawText(`Note: Settings are applied to new rules and all existing ones set to the global config.`, 130, 210, "Black", "");
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.ConditionsGlobalRules]);
            }
            return false;
        }
        Click() {
            if (super.Click() || this.conditionCategoryData === null)
                return true;
            return false;
        }
    }

    class GuiRulesViewDescription extends GuiSubscreen {
        constructor(character, back, rule, allowAdd) {
            super();
            this.showFailedMsg = false;
            this.character = character;
            this.back = back;
            this.rule = rule;
            this.ruleDefinition = RulesGetDisplayDefinition(rule);
            this.allowAdd = allowAdd;
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.Exit();
            }
        }
        Run() {
            MainCanvas.textAlign = "left";
            DrawText(`- Rules: Description of the rule: "${this.ruleDefinition.name}"-`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "left";
            DrawTextWrap(dictionaryProcess(this.ruleDefinition.longDescription, { PLAYER_NAME: this.character.Name }), 125 - 1750 / 2, 220, 1750, 500, "Black");
            MainCanvas.textAlign = "center";
            if (this.showFailedMsg) {
                DrawText(`Adding this rule failed! Likely cause is that it does not exist on ${this.character.Name}'s BCX version.`, 1000, 750, "Red", "Gray");
            }
            if (this.allowAdd) {
                DrawButton(700, 800, 200, 80, "Add", "White");
                DrawButton(1100, 800, 200, 80, "Back", "White");
            }
            else {
                DrawButton(900, 800, 200, 80, "Back", "White");
            }
        }
        Click() {
            if (this.allowAdd) {
                if (MouseIn(700, 800, 200, 80)) {
                    this.character.ruleCreate(this.rule).then(result => {
                        if (result) {
                            setSubscreen(new GuiConditionEditRules(this.character, this.rule, new GuiConditionViewRules(this.character)));
                        }
                    }).catch((err) => {
                        this.showFailedMsg = true;
                        console.warn(`Error creating rule on ${this.character}: `, err);
                    });
                }
                if (MouseIn(1100, 800, 200, 80)) {
                    return this.Exit();
                }
            }
            else {
                if (MouseIn(900, 800, 200, 80)) {
                    this.Exit();
                }
            }
        }
        Exit() {
            setSubscreen(this.back);
        }
    }

    const PER_PAGE_COUNT$1 = 6;
    let alphabeticalSort$1 = false;
    let availabilitySort$1 = false;
    class GuiRulesAdd extends GuiSubscreen {
        constructor(character) {
            super();
            this.rulesData = null;
            this.failed = false;
            this.permissionMode = false;
            this.ruleList = [];
            this.page = 0;
            this.showHelp = false;
            this.filterInput = createInputElement("text", 30);
            this.filterRuleType = null;
            this.character = character;
            this.filterInput.addEventListener("input", ev => {
                this.rebuildList();
            });
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            this.character.conditionsGetByCategory("rules").then(res => {
                this.rulesData = res;
                if (!this.rulesData.access_changeLimits) {
                    this.permissionMode = false;
                }
                this.failed = false;
                this.rebuildList();
            }, err => {
                console.error(`BCX: Failed to get rules info for ${this.character}`, err);
                this.rulesData = null;
                this.failed = true;
                this.rebuildList();
            });
        }
        rebuildList() {
            if (!this.active)
                return;
            this.ruleList = [];
            if (this.rulesData === null) {
                this.filterInput.remove();
                return;
            }
            if (!this.filterInput.parentElement) {
                document.body.appendChild(this.filterInput);
            }
            const filter = this.filterInput.value.trim().toLocaleLowerCase().split(" ").filter(Boolean);
            for (const entry of RulesGetList()) {
                if (this.filterRuleType != null && this.filterRuleType !== entry[1].type) {
                    continue;
                }
                if (filter.some(i => {
                    var _a, _b;
                    return !entry[0].toLocaleLowerCase().includes(i) &&
                        !entry[1].name.toLocaleLowerCase().includes(i) &&
                        !((_a = entry[1].shortDescription) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase().includes(i)) &&
                        !((_b = entry[1].keywords) === null || _b === void 0 ? void 0 : _b.some(k => k.toLocaleLowerCase().includes(i)));
                }))
                    continue;
                this.ruleList.push({
                    name: entry[0],
                    definition: entry[1],
                });
            }
            const data = this.rulesData;
            if (alphabeticalSort$1) {
                this.ruleList.sort((a, b) => a.definition.name.localeCompare(b.definition.name));
            }
            if (availabilitySort$1) {
                this.ruleList.sort((a, b) => (((this.HasAccess(b) ? 1 : 0) -
                    (this.HasAccess(a) ? 1 : 0)) ||
                    ((data.conditions[a.name] ? 1 : 0) -
                        (data.conditions[b.name] ? 1 : 0))));
            }
            const totalPages = Math.ceil(this.ruleList.length / PER_PAGE_COUNT$1);
            if (this.page < 0) {
                this.page = Math.max(totalPages - 1, 0);
            }
            else if (this.page >= totalPages) {
                this.page = 0;
            }
        }
        Run() {
            var _a;
            MainCanvas.textAlign = "left";
            DrawText(`- Rules: Create new rules for ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "Back");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            if (this.rulesData === null) {
                DrawText(this.failed ? `Failed to get rules data from ${this.character.Name}. Maybe you have no access?` : "Loading...", 1000, 480, "Black");
                return;
            }
            DrawButton(1815, 305, 90, 90, "", this.rulesData.access_changeLimits ? "White" : "#ddd", this.permissionMode ? "Icons/Reset.png" : "Icons/Preference.png", this.rulesData.access_changeLimits ?
                (this.permissionMode ? "Leave permission mode" : "Edit rules permissions") :
                "You have no permission to change limits", !this.rulesData.access_changeLimits);
            MainCanvas.textAlign = "left";
            DrawText("Filter:", 130, 215, "Black");
            positionElement(this.filterInput, 550, 210, 600, 64);
            MainCanvas.textAlign = "center";
            if (this.filterInput.value) {
                DrawButton(870, 182, 64, 64, "X", "White");
            }
            DrawButton(1083, 182, 64, 64, "ALL", this.filterRuleType != null ? "White" : "#FEC5C5");
            DrawButton(1183, 82, 64, 64, "", this.filterRuleType === 0 ? "#FEC5C5" : "White");
            DrawImageEx(RULE_ICONS[0], 1183 + 3, 82 + 3, { Width: 58, Height: 58 });
            DrawButton(1283, 82, 64, 64, "", this.filterRuleType === 1 ? "#FEC5C5" : "White");
            DrawImageEx(RULE_ICONS[1], 1283 + 3, 82 + 3, { Width: 58, Height: 58 });
            DrawButton(1383, 82, 64, 64, "", this.filterRuleType === 2 ? "#FEC5C5" : "White");
            DrawImageEx(RULE_ICONS[2], 1383 + 3, 82 + 3, { Width: 58, Height: 58 });
            DrawButton(1183, 182, 64, 64, "", this.filterRuleType === 3 ? "#FEC5C5" : "White");
            DrawImageEx(RULE_ICONS[3], 1183 + 3, 182 + 3, { Width: 58, Height: 58 });
            DrawButton(1283, 182, 64, 64, "", this.filterRuleType === 4 ? "#FEC5C5" : "White");
            DrawImageEx(RULE_ICONS[4], 1283 + 3, 182 + 3, { Width: 58, Height: 58 });
            DrawButton(1383, 182, 64, 64, "", this.filterRuleType === 99 ? "#FEC5C5" : "White");
            DrawImageEx(RULE_ICONS[99], 1383 + 3, 182 + 3, { Width: 58, Height: 58 });
            DrawButton(1483, 132, 64, 64, "", "White", undefined, "Toggle availability-based sorting");
            DrawImageEx("Icons/LockMenu.png", 1483 + 3, 132 + 3, { Alpha: availabilitySort$1 ? 1 : 0.2, Width: 58, Height: 58 });
            DrawButton(1583, 132, 64, 64, "", "white", undefined, "Toggle alphabetical sorting");
            DrawTextFit("A-Z", 1583 + 32, 132 + 32 + 1, 64 - 4, alphabeticalSort$1 ? "black" : "#bbb");
            MainCanvas.textAlign = "left";
            for (let off = 0; off < PER_PAGE_COUNT$1; off++) {
                const i = this.page * PER_PAGE_COUNT$1 + off;
                if (i >= this.ruleList.length)
                    break;
                const e = this.ruleList[i];
                if (e === null)
                    continue;
                const Y = 275 + off * 100;
                const ruleIsCreated = this.rulesData.conditions[e.name] !== undefined;
                const accessLevel = (_a = this.rulesData.limits[e.name]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
                const allowAccess = this.HasAccess(e);
                DrawImageEx(RULE_ICONS[e.definition.type], 125, Y, {
                    Height: 64,
                    Width: 64,
                });
                let color;
                let text;
                if (this.permissionMode) {
                    color = ["#50ff56", "#f6fe78", "#ffa7a7"][accessLevel];
                    text = ["Normal", "Limited", "Blocked"][accessLevel];
                }
                else {
                    color = ruleIsCreated ? "#88c" :
                        !allowAccess ? "#ccc" : "White";
                    text = ruleIsCreated ? "Already applied" :
                        !allowAccess ? "You don't have permission to use this rule" : "";
                }
                DrawButton(200, Y, 1350, 64, "", color, "", "", ruleIsCreated || this.permissionMode);
                let description = e.definition.name;
                if (e.definition.shortDescription) {
                    description += ` (${dictionaryProcess(e.definition.shortDescription, { PLAYER_NAME: this.character.Name })})`;
                }
                DrawTextFit(description, 210, Y + 34, 1340, "Black");
                if (MouseIn(200, Y, 1350, 64)) {
                    DrawHoverElements.push(() => {
                        DrawButtonHover(1200, Y, 60, 60, text);
                    });
                }
            }
            const totalPages = Math.max(1, Math.ceil(this.ruleList.length / PER_PAGE_COUNT$1));
            MainCanvas.textAlign = "center";
            DrawBackNextButton(1605, 800, 300, 90, `${DialogFindPlayer("Page")} ${this.page + 1} / ${totalPages}`, "White", "", () => "", () => "");
            if (this.permissionMode) {
                MainCanvas.fillStyle = "#50ff56";
                MainCanvas.fillRect(1739, 574, 166, 64);
                MainCanvas.fillStyle = "#f6fe78";
                MainCanvas.fillRect(1739, 638, 166, 64);
                MainCanvas.fillStyle = "#ffa7a7";
                MainCanvas.fillRect(1739, 702, 166, 64);
                MainCanvas.textAlign = "center";
                DrawText(`Normal`, 1739 + 166 / 2, 574 + 34, "Black");
                DrawText(`Limited`, 1739 + 166 / 2, 638 + 34, "Black");
                DrawText(`Blocked`, 1739 + 166 / 2, 702 + 34, "Black");
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[this.permissionMode ? Views.RulesAddPermissionMode : Views.RulesAdd]);
            }
        }
        Click() {
            var _a;
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (this.rulesData === null)
                return;
            if (MouseIn(1815, 305, 90, 90)) {
                this.permissionMode = this.rulesData.access_changeLimits && !this.permissionMode;
                return;
            }
            if (MouseIn(870, 182, 64, 64)) {
                this.filterInput.value = "";
                this.rebuildList();
            }
            if (MouseIn(1083, 182, 64, 64)) {
                this.filterRuleType = null;
                this.rebuildList();
            }
            if (MouseIn(1183, 82, 64, 64)) {
                this.filterRuleType = 0;
                this.rebuildList();
            }
            if (MouseIn(1283, 82, 64, 64)) {
                this.filterRuleType = 1;
                this.rebuildList();
            }
            if (MouseIn(1383, 82, 64, 64)) {
                this.filterRuleType = 2;
                this.rebuildList();
            }
            if (MouseIn(1183, 182, 64, 64)) {
                this.filterRuleType = 3;
                this.rebuildList();
            }
            if (MouseIn(1283, 182, 64, 64)) {
                this.filterRuleType = 4;
                this.rebuildList();
            }
            if (MouseIn(1383, 182, 64, 64)) {
                this.filterRuleType = 99;
                this.rebuildList();
            }
            if (MouseIn(1483, 132, 64, 64)) {
                availabilitySort$1 = !availabilitySort$1;
                this.rebuildList();
            }
            if (MouseIn(1583, 132, 64, 64)) {
                alphabeticalSort$1 = !alphabeticalSort$1;
                this.rebuildList();
            }
            for (let off = 0; off < PER_PAGE_COUNT$1; off++) {
                const i = this.page * PER_PAGE_COUNT$1 + off;
                if (i >= this.ruleList.length)
                    break;
                const e = this.ruleList[i];
                if (e === null)
                    continue;
                const Y = 275 + off * 100;
                const ruleIsCreated = this.rulesData.conditions[e.name] !== undefined;
                const accessLevel = (_a = this.rulesData.limits[e.name]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
                const allowAccess = [this.rulesData.access_normal, this.rulesData.access_limited, false][accessLevel];
                if (MouseIn(200, Y, 1350, 64)) {
                    const ruleName = e.name;
                    if (this.permissionMode) {
                        this.character.conditionSetLimit("rules", e.name, (accessLevel + 1) % 3);
                    }
                    else if (!ruleIsCreated) {
                        setSubscreen(new GuiRulesViewDescription(this.character, this, ruleName, allowAccess));
                    }
                    return;
                }
            }
            const totalPages = Math.ceil(this.ruleList.length / PER_PAGE_COUNT$1);
            if (MouseIn(1605, 800, 150, 90)) {
                this.page--;
                if (this.page < 0) {
                    this.page = Math.max(totalPages - 1, 0);
                }
            }
            else if (MouseIn(1755, 800, 150, 90)) {
                this.page++;
                if (this.page >= totalPages) {
                    this.page = 0;
                }
            }
        }
        HasAccess(item) {
            var _a;
            if (!this.rulesData) {
                throw new Error(`BCX: Rules data was unexpectedly 'null'`);
            }
            const accessLevel = (_a = this.rulesData.limits[item.name]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
            return [this.rulesData.access_normal, this.rulesData.access_limited, false][accessLevel];
        }
        Exit() {
            setSubscreen(new GuiConditionViewRules(this.character));
        }
        Unload() {
            this.filterInput.remove();
        }
    }

    class GuiConditionViewRules extends GuiConditionView {
        constructor(character) {
            super(character, "rules");
            this.removeLabel = "Remove rule";
        }
        Run() {
            if (super.Run() || this.conditionCategoryData === null)
                return true;
            DrawButton(120, 820, 384, 90, "Add new rule", "White", "", "...from the list of yet unestablished rules");
            if (this.showHelp) {
                showHelp(HELP_TEXTS[Views.ConditionsViewRules]);
            }
            return false;
        }
        Click() {
            if (super.Click() || this.conditionCategoryData === null)
                return true;
            if (MouseIn(120, 820, 384, 90)) {
                setSubscreen(new GuiRulesAdd(this.character));
                return true;
            }
            return false;
        }
        drawCategoryImage(X, Y, entry) {
            DrawImageEx(RULE_ICONS[entry.extra.definition.type], X + 6, Y + 6, {
                Height: 50,
                Width: 50,
            });
        }
        drawEntryExtra(X, Y, entry) {
            if (entry.extra.definition.enforceable !== false) {
                DrawImageEx("Icons/Management.png", X + 610, Y + 10, {
                    Height: 40,
                    Width: 40,
                    Alpha: entry.data.data.enforce ? 1 : 0.2,
                });
                if (MouseIn(X + 610, Y + 6, 44, 44)) {
                    DrawHoverElements.push(() => {
                        DrawButtonHover(X + 610, Y + 6, 44, 44, entry.data.data.enforce ? "Rule will be enforced" : "Rule will not be enforced");
                    });
                }
            }
            if (entry.extra.definition.loggable !== false) {
                DrawImageEx("Icons/Title.png", X + 660, Y + 10, {
                    Height: 40,
                    Width: 40,
                    Alpha: entry.data.data.log ? 1 : 0.2,
                });
                if (MouseIn(X + 660, Y + 6, 44, 44)) {
                    DrawHoverElements.push(() => {
                        DrawButtonHover(X + 660, Y + 6, 44, 44, entry.data.data.log ? "Rule violations will be logged" : "Rule violations will not be logged");
                    });
                }
            }
        }
        headerText() {
            return `Rules: All active rules on ${this.character.Name}`;
        }
        loadCondition(condition, data) {
            const definition = RulesGetDisplayDefinition(condition);
            return [definition.name, { definition }];
        }
        showDetailedDescriptionBackground(X) {
            const backgroundY = 170;
            MainCanvas.fillStyle = "White";
            MainCanvas.fillRect(X, backgroundY, 801, 600);
            MainCanvas.strokeStyle = "Black";
            MainCanvas.strokeRect(X, backgroundY, 801, 600);
        }
        showDetailedDescriptionText(X, condition, data) {
            const backgroundY = 170;
            MainCanvas.textAlign = "left";
            DrawTextWrap(dictionaryProcess(data.extra.definition.longDescription, { PLAYER_NAME: this.character.Name }), X + 20 - 760 / 2, backgroundY + 20, 760, 560, "black");
        }
        onDescriptionTextClick(condition, data) {
            setSubscreen(new GuiRulesViewDescription(this.character, this, condition, false));
        }
        openEditSubscreen(condition) {
            setSubscreen(new GuiConditionEditRules(this.character, condition, this));
        }
        removeCondition(condition) {
            this.character.ruleDelete(condition);
        }
        openGlobalConfig() {
            setSubscreen(new GuiConditionGlobalRules(this.character, this));
        }
    }

    class GuiWelcomeSelection extends GuiSubscreen {
        constructor(character) {
            super();
            this.selectedPreset = -1;
            this.character = character;
        }
        Run() {
            MainCanvas.textAlign = "center";
            DrawButton(800, 66, 400, 54, "<< Back to the tutorial", "White");
            DrawText(`Please choose a preset, which sets your default experience, permissions and configuration.`, 1000, 150, "Black");
            DrawText(`Note: You can change the defaults, but changing to another preset is not possible without resetting BCX fully.`, 1000, 200, "FireBrick");
            const width = 400;
            const texts = ["Dominant", "Switch/Exploring", "Submissive", "Slave"];
            const images = ["Icons/Management.png", "Icons/Swap.png", "Icons/Kneel.png", icon_OwnerList];
            const descriptionDominant = `This preset is for dominants who\n` +
                `never intend to submit. Therefore,\n` +
                `most modules are not loaded at\n` +
                `start. That said, you can still use\n` +
                `the BCX graphical user interface\n` +
                `on other BCX users to use actions,\n` +
                `you have permission for, on them,\n` +
                `same as with all other presets.`;
            const descriptionSwitch = `This preset is for switches who\n` +
                `are sometimes dominant and\n` +
                `sometimes submissive, enabling\n` +
                `them to explore BCX slowly, while\n` +
                `having full control over all of its\n` +
                `settings and features.`;
            const descriptionSubmissive = `This preset is for submissives,\n` +
                `who want to give some of their\n` +
                `control to selected dominants and\n` +
                `lovers, giving only them authority\n` +
                `over some of BCX's settings. You\n` +
                `can irreversably give away more\n` +
                `and more control, when you want.`;
            const descriptionSlave = `This preset is a much more\n` +
                `extreme submissive experience,\n` +
                `not leaving much control over the\n` +
                `settings and permissions to you,\n` +
                `thus enabling others to use many\n` +
                `of BCX's features on you. Owners\n` +
                `can even unblock the most extreme\n` +
                `settings, if they desire so.`;
            const descriptions = [descriptionDominant, descriptionSwitch, descriptionSubmissive, descriptionSlave];
            for (let i = 0; i < 4; i++) {
                const X = 125 + i * (width + 50);
                if (MouseIn(X, 250, width, 575)) {
                    DrawRect(X, 250, width, 575, "#ddd");
                }
                DrawEmptyRect(X, 250, width, 575, "Black");
                if (i === this.selectedPreset) {
                    const border = 10;
                    DrawEmptyRect(X - border, 250 - border, width + 2 * border, 575 + 2 * border, "Cyan", 5);
                    DrawButton(X + 20, 850, width - 40, 65, "Confirm", "White");
                }
                DrawImageEx(images[i], X + width / 2 - 43, 275);
                DrawText(texts[i], X + width / 2, 400, "Black");
                MainCanvas.font = CommonGetFont(24);
                let texty = 475;
                for (const line of descriptions[i].split("\n")) {
                    DrawText(line, X + width / 2, texty, "Black");
                    texty += 36;
                }
                if (i === 1) {
                    DrawText("Easily try out all features", X + width / 2, 775, "Black");
                }
                else if (i === 2) {
                    DrawText("Similar to Ace's Cursed Script", X + width / 2, 775, "Black");
                }
                MainCanvas.font = CommonGetFont(36);
            }
        }
        Click() {
            const width = 400;
            for (let i = 0; i < 4; i++) {
                const X = 125 + i * (width + 50);
                if (MouseIn(X, 250, width, 575)) {
                    this.selectedPreset = i;
                    return;
                }
                if (i === this.selectedPreset && MouseIn(X + 20, 850, width - 40, 65)) {
                    applyPreset(i);
                    setSubscreen(new GuiMainMenu(getPlayerCharacter()));
                }
            }
            if (MouseIn(800, 66, 400, 54))
                setSubscreen(new GuiTutorial(this.character, true));
        }
        Exit() {
        }
    }

    const TUTORIAL_PAGES = [
        {
            name: "Welcome",
            image: "welcome.png",
            afterDraw() {
                DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png", "", true);
                MainCanvas.save();
                MainCanvas.font = '28px "Arial", sans-serif';
                MainCanvas.textAlign = "left";
                DrawText(`Dear ${Player.Name},`, 285, 510, "Black");
                DrawTextWrap(`we are happy you are interested in our extension for the Bondage Club (BC) in which we invest a lot of our free time and love. If you have any questions, suggestions, or encounter any bugs, please feel free to get in touch with us on Discord. A button linking to it is in the main menu.`, 285 - 940 / 2, 544, 940, 160, "black");
                MainCanvas.restore();
            },
        },
        {
            name: "Quick overview",
            image: "quick_overview.png",
        },
        {
            name: "New chat room icons",
            image: "status_icons.png",
            afterDraw() {
                DrawCharacter(Player, 130, 100, 0.82, true, MainCanvas);
                drawIcon(MainCanvas, icon_heart, 450, 70, 50, 50, 50, 1, 4, "#6e6eff");
                const tick = Date.now() % 10000;
                if (tick < 4000 || tick > 6000 && tick < 9000) {
                    drawTypingIndicatorSpeechBubble(MainCanvas, 450, 128, 50, 48, 1);
                }
            },
        },
        {
            name: "Introduction to roles and permissions",
            image: "basic_roles_permissions.png",
        },
        {
            name: "End of introduction",
            image: "basic_end.png",
            afterDraw() {
                DrawCharacter(Player, 220, 160, 0.78, true, MainCanvas);
            },
        },
        {
            name: "Logging module screen",
            image: "log_part1.png",
        },
        {
            name: "Logging configuration screen",
            image: "log_part2.png",
        },
        {
            name: "Curses module overview",
            image: "curses1.png",
        },
        {
            name: "Adding curses",
            image: "curses2.png",
        },
        {
            name: "Rules module overview",
            image: "rules1.png",
        },
        {
            name: "Adding a rule",
            image: "rules2.png",
        },
        {
            name: "Limiting curse slots / rules",
            image: "limit_system.png",
        },
        {
            name: "Commands module overview",
            image: "commands.png",
        },
        {
            name: "Trigger conditions",
            image: "trigger_conditions.png",
        },
        {
            name: "Permission system overview",
            image: "permissions1.png",
        },
        {
            name: "Permission system base principles",
            image: "permissions2.png",
        },
        {
            name: "General permission examples",
            image: "permissions3.png",
        },
        {
            name: "Permission setup example 1",
            image: "permissions4.png",
        },
        {
            name: "Permission setup example 2",
            image: "permissions5.png",
        },
        {
            name: "Chat commands",
            image: "chat_commands.png",
        },
    ];
    const TUTORIAL_BASIC_END = TUTORIAL_PAGES.findIndex(i => i.name === "End of introduction");
    class GuiTutorial extends GuiSubscreen {
        constructor(character, firstRun) {
            super();
            this.page = 0;
            this.character = character;
            this.firstRun = firstRun;
        }
        Load() {
            this.page = 0;
        }
        Run() {
            const currentPage = TUTORIAL_PAGES[this.page];
            MainCanvas.textAlign = "center";
            DrawText(`BCX TUTORIAL: ${currentPage.name}`, 1000, 125, "Black", "Gray");
            DrawButton(1500, 830, 300, 90, (this.firstRun && this.page < TUTORIAL_BASIC_END) ? "Skip tutorial" : "Close tutorial", "White");
            if (currentPage.image) {
                if (!DrawImageBCX("tutorial/" + currentPage.image, 200, 180)) {
                    DrawText("Loading...", 1000, 500, "Black");
                }
            }
            if (currentPage.afterDraw) {
                currentPage.afterDraw();
            }
            DrawBackNextButton(850, 830, 300, 90, `Page ${this.page + 1}/${TUTORIAL_PAGES.length}`, "White", undefined, () => "", () => "");
        }
        Click() {
            if (MouseIn(1500, 830, 300, 90))
                return this.Exit();
            if (MouseIn(850, 830, 150, 90)) {
                this.page = clampWrap(this.page - 1, 0, TUTORIAL_PAGES.length - 1);
            }
            if (MouseIn(1000, 830, 150, 90)) {
                this.page = clampWrap(this.page + 1, 0, TUTORIAL_PAGES.length - 1);
            }
        }
        Exit() {
            setSubscreen(this.firstRun ? new GuiWelcomeSelection(this.character) : new GuiMainMenu(this.character));
        }
    }

    var backgroundList = [
    	"AbandonedBuilding",
    	"AbandonedSideRoom",
    	"AlchemistOffice",
    	"AmandaCollarIntro",
    	"AmandaIntro",
    	"AncientRuins",
    	"AsylumBedroom",
    	"AsylumEntrance",
    	"AsylumGGTSRoom",
    	"AsylumGGTSRoomAlert",
    	"AsylumMeeting",
    	"AsylumTherapy",
    	"BDSMRoomBlue",
    	"BDSMRoomPurple",
    	"BDSMRoomRed",
    	"BackAlley",
    	"BalconyNight",
    	"Bar",
    	"BarRestaurant",
    	"Beach",
    	"BeachCafe",
    	"BeachHotel",
    	"BeachSunset",
    	"Bedroom",
    	"BondageBedChamber",
    	"Boudoir",
    	"BoutiqueBack",
    	"BoutiqueMain",
    	"BrickWall",
    	"CaptainCabin",
    	"Castle",
    	"Cell",
    	"Cellar",
    	"CeremonialVenue",
    	"ChillRoom",
    	"CollegeCafeteria",
    	"CollegeClass",
    	"CollegeClass2",
    	"CollegeDetention",
    	"CollegeEntrance",
    	"CollegeTeacherLounge",
    	"CollegeTennis",
    	"CollegeTennisPlay",
    	"CollegeTheater",
    	"Confessions",
    	"CosyChalet",
    	"CozyLivingRoom",
    	"CraftingWorkshop",
    	"CreepyBasement",
    	"DeepForest",
    	"Desert",
    	"DesolateVillage",
    	"DiningRoom",
    	"Dressing",
    	"Dungeon",
    	"DungeonRuin",
    	"DystopianCity",
    	"EgyptianExhibit",
    	"EgyptianTomb",
    	"EmptyWarehouse",
    	"ForestCave",
    	"ForestPath",
    	"Gambling",
    	"Gardens",
    	"Gymnasium",
    	"HeavenEntrance",
    	"HellEntrance",
    	"HorseStable",
    	"HorseStableLight",
    	"HotelBedroom",
    	"HotelBedroom2",
    	"HouseBasement1",
    	"HouseBasement2",
    	"HouseBasement3",
    	"HouseInterior1",
    	"HouseInterior2",
    	"HouseInterior3",
    	"HypnoSpiral2",
    	"HypnoticSpiral",
    	"IndoorPool",
    	"Industrial",
    	"Infiltration",
    	"Introduction",
    	"JungleTemple",
    	"Kennels",
    	"KidnapLeague",
    	"Kitchen",
    	"LatexRoom",
    	"LeatherChamber",
    	"LingerieShop",
    	"LockerRoom",
    	"LostVages",
    	"Magic",
    	"MagicSchoolEscape",
    	"MagicSchoolLaboratory",
    	"MaidCafe",
    	"MaidQuarters",
    	"MainHall",
    	"Management",
    	"MedinaMarket",
    	"MiddletownSchool",
    	"MovieStudio",
    	"NightClub",
    	"Nursery",
    	"Office1",
    	"Office2",
    	"OldFarm",
    	"Onsen",
    	"Orig/Dressing",
    	"Orig/Entrance",
    	"Orig/KidnapLeague",
    	"Orig/Lounge",
    	"Orig/MaidQuarters",
    	"Orig/MainHall",
    	"Orig/Shibari",
    	"Orig/Shop",
    	"Orig/buhne-dekorativ-kino-276179",
    	"OutdoorPool",
    	"OutdoorPool2",
    	"OutsideCells",
    	"PaddedCell",
    	"PaddedCell2",
    	"Pandora/Ground/Entrance",
    	"Pandora/Second/Cell0",
    	"Pandora/Second/Cell1",
    	"Pandora/Second/Cell2",
    	"Pandora/Second/Cell3",
    	"Pandora/Second/Cell4",
    	"Pandora/Second/Cell5",
    	"Pandora/Second/Cell6",
    	"Pandora/Second/Entrance",
    	"Pandora/Second/Fork0",
    	"Pandora/Second/Fork1",
    	"Pandora/Second/Fork2",
    	"Pandora/Second/Fork3",
    	"Pandora/Second/Fork4",
    	"Pandora/Second/Fork5",
    	"Pandora/Second/Fork6",
    	"Pandora/Second/Rest0",
    	"Pandora/Second/Tunnel0",
    	"Pandora/Second/Tunnel1",
    	"Pandora/Second/Tunnel2",
    	"Pandora/Second/Tunnel3",
    	"Pandora/Second/Tunnel4",
    	"Pandora/Second/Tunnel5",
    	"Pandora/Second/Tunnel6",
    	"Pandora/Underground/Cell0",
    	"Pandora/Underground/Cell1",
    	"Pandora/Underground/Cell2",
    	"Pandora/Underground/Cell3",
    	"Pandora/Underground/Cell4",
    	"Pandora/Underground/Cell5",
    	"Pandora/Underground/Cell6",
    	"Pandora/Underground/Entrance",
    	"Pandora/Underground/Fork0",
    	"Pandora/Underground/Fork1",
    	"Pandora/Underground/Fork2",
    	"Pandora/Underground/Fork3",
    	"Pandora/Underground/Fork4",
    	"Pandora/Underground/Fork5",
    	"Pandora/Underground/Fork6",
    	"Pandora/Underground/Rest0",
    	"Pandora/Underground/Tunnel0",
    	"Pandora/Underground/Tunnel1",
    	"Pandora/Underground/Tunnel2",
    	"Pandora/Underground/Tunnel3",
    	"Pandora/Underground/Tunnel4",
    	"Pandora/Underground/Tunnel5",
    	"Pandora/Underground/Tunnel6",
    	"ParkDay",
    	"ParkNight",
    	"ParkWinter",
    	"PartyBasement",
    	"PirateIsland",
    	"PirateIslandNight",
    	"PoolBottom",
    	"Prison",
    	"PrisonHall",
    	"Private",
    	"PublicBath",
    	"RainyForestPathDay",
    	"RainyForstPathNight",
    	"RainyStreetDay",
    	"RainyStreetNight",
    	"Ranch",
    	"ResearchPrep",
    	"ResearchProgress",
    	"Restaurant1",
    	"Restaurant2",
    	"RhythmGame",
    	"RhythmGameLoading",
    	"RooftopParty",
    	"RustySaloon",
    	"SarahBedroom0",
    	"SarahBedroom1",
    	"SarahBedroom2",
    	"SarahBedroom3",
    	"SarahCollarIntro",
    	"SarahIntro",
    	"SchoolHallway",
    	"SchoolHospital",
    	"SchoolRuins",
    	"SciFiCell",
    	"SciFiOutdoors",
    	"SciFiRed",
    	"SecretChamber",
    	"Sheet",
    	"SheetWhite",
    	"SheikhPrivate",
    	"SheikhTent",
    	"Shibari",
    	"ShipDeck",
    	"Shipwreck",
    	"Shop",
    	"SlaveMarket",
    	"SlipperyClassroom",
    	"SlumApartment",
    	"SlumCellar",
    	"SlumRuins",
    	"SnowyChaletDay",
    	"SnowyChaletNight",
    	"SnowyDeepForest",
    	"SnowyForestPathDay",
    	"SnowyForestPathNight",
    	"SnowyLakeNight",
    	"SnowyStreet",
    	"SnowyStreetDay1",
    	"SnowyStreetDay2",
    	"SnowyStreetNight2",
    	"SnowyTown1",
    	"SnowyTown2",
    	"SophieIntro",
    	"SpaceCaptainBedroom",
    	"SpookyForest",
    	"StreetNight",
    	"SunTemple",
    	"SynthWave",
    	"ThroneRoom",
    	"TiledBathroom",
    	"UnderwaterOne",
    	"VaultCorridor",
    	"Wagons",
    	"WeddingArch",
    	"WeddingBeach",
    	"WeddingRoom",
    	"WesternStreet",
    	"White",
    	"WitchWood",
    	"WoodenCabin",
    	"WrestlingRing",
    	"XmasDay",
    	"XmasEve",
    	"Yacht1",
    	"Yacht2",
    	"Yacht3",
    	"grey"
    ];

    function initCommands_definitions() {
        const eyesExpressions = {
            open: null,
            close: "Closed",
            up: "Lewd",
            down: "Shy",
        };
        const eyesTexts = {
            open: "SENDER_NAME (SENDER_NUMBER) made you open your eyes",
            close: "SENDER_NAME (SENDER_NUMBER) made you close your eyes",
            up: "SENDER_NAME (SENDER_NUMBER) made you look up",
            down: "SENDER_NAME (SENDER_NUMBER) made you look down",
        };
        registerCommand("eyes", {
            name: "Eyes",
            helpDescription: `<${Object.keys(eyesExpressions).join(" | ")}>`,
            shortDescription: "Control PLAYER_NAME's eyes",
            longDescription: `This command forces PLAYER_NAME's eyes into the specified state, but they can still manually change it.\n` +
                `Usage:\n` +
                `!eyes HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.normal,
            playerUsable: true,
            trigger: (argv, sender, respond, state) => {
                if (argv.length !== 1) {
                    respond(Command_fixExclamationMark(sender, `!eyes usage:\n` +
                        `!eyes ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                const expression = eyesExpressions[argv[0].toLowerCase()];
                if (expression === undefined) {
                    respond(`Bad value: ${argv[0].toLowerCase()} is not one of '${Object.keys(eyesExpressions).join("', '")}'`);
                    return false;
                }
                CharacterSetFacialExpression(Player, "Eyes", expression);
                if (!sender.isPlayer()) {
                    const text = eyesTexts[argv[0].toLowerCase()];
                    if (text) {
                        ChatRoomSendLocal(dictionaryProcess(text, {
                            SENDER_NAME: sender.Nickname,
                            SENDER_NUMBER: `${sender.MemberNumber}`,
                        }), undefined, sender.MemberNumber);
                    }
                }
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], Object.keys(eyesExpressions));
                }
                return [];
            },
        });
        const mouthExpressions = {
            close: null,
            open: "HalfOpen",
            openwide: "Moan",
            tongue: "Ahegao",
            smile: "Smirk",
        };
        const mouthTexts = {
            close: "SENDER_NAME (SENDER_NUMBER) made you close your mouth",
            open: "SENDER_NAME (SENDER_NUMBER) made you open your mouth",
            openwide: "SENDER_NAME (SENDER_NUMBER) made you open your mouth wide",
            tongue: "SENDER_NAME (SENDER_NUMBER) made you stick out your tongue",
            smile: "SENDER_NAME (SENDER_NUMBER) made you smile",
        };
        registerCommand("mouth", {
            name: "Mouth",
            helpDescription: `<${Object.keys(mouthExpressions).join(" | ")}>`,
            shortDescription: "Control PLAYER_NAME's mouth",
            longDescription: `This command forces PLAYER_NAME's mouth into the specified state, but they can still manually change it.\n` +
                `Usage:\n` +
                `!mouth HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.normal,
            playerUsable: true,
            trigger: (argv, sender, respond, state) => {
                if (argv.length !== 1) {
                    respond(Command_fixExclamationMark(sender, `!mouth usage:\n` +
                        `!mouth ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                const expression = mouthExpressions[argv[0].toLowerCase()];
                if (expression === undefined) {
                    respond(`Bad value: ${argv[0].toLowerCase()} is not one of '${Object.keys(mouthExpressions).join("', '")}'`);
                    return false;
                }
                CharacterSetFacialExpression(Player, "Mouth", expression);
                if (!sender.isPlayer()) {
                    const text = mouthTexts[argv[0].toLowerCase()];
                    if (text) {
                        ChatRoomSendLocal(dictionaryProcess(text, {
                            SENDER_NAME: sender.Nickname,
                            SENDER_NUMBER: `${sender.MemberNumber}`,
                        }), undefined, sender.MemberNumber);
                    }
                }
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], Object.keys(mouthExpressions));
                }
                return [];
            },
        });
        const posesArms = {
            down: "BaseUpper",
            spread: "Yoked",
            up: "OverTheHead",
            back: "BackBoxTie",
            elbows: "BackElbowTouch",
            wrists: "BackCuffs",
        };
        const posesLegs = {
            normal: "BaseLower",
            kneel: "Kneel",
            kneelspread: "KneelingSpread",
            close: "LegsClosed",
        };
        const armsTexts = {
            down: "SENDER_NAME (SENDER_NUMBER) made you relax your arms",
            spread: "SENDER_NAME (SENDER_NUMBER) made you spread your hands",
            up: "SENDER_NAME (SENDER_NUMBER) made you raise your hands",
            back: "SENDER_NAME (SENDER_NUMBER) made you put your hands behind your back",
            elbows: "SENDER_NAME (SENDER_NUMBER) made you put your elbows together behind your back",
            wrists: "SENDER_NAME (SENDER_NUMBER) made you put your wrists together behind your back",
        };
        const legsTexts = {
            normal: "SENDER_NAME (SENDER_NUMBER) made you put your legs into a relaxed standing stance",
            kneel: "SENDER_NAME (SENDER_NUMBER) made you kneel with closed legs",
            kneelspread: "SENDER_NAME (SENDER_NUMBER) made you kneel with spread legs",
            close: "SENDER_NAME (SENDER_NUMBER) made you close your legs while standing",
        };
        registerCommand("arms", {
            name: "Arms",
            helpDescription: `<${Object.keys(posesArms).join(" | ")}>`,
            shortDescription: "Control PLAYER_NAME's arm poses",
            longDescription: `This command forces PLAYER_NAME's arms into the specified pose, but they can still manually change it. Some may be unavailable, due to restricting items, etc.\n` +
                `Usage:\n` +
                `!arms HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.normal,
            playerUsable: true,
            trigger: (argv, sender, respond, state) => {
                var _a;
                if (argv.length !== 1) {
                    respond(Command_fixExclamationMark(sender, `!arms usage:\n` +
                        `!arms ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                const pose = posesArms[argv[0].toLowerCase()];
                if (pose === undefined) {
                    respond(`Bad value: ${argv[0].toLowerCase()} is not one of '${Object.keys(posesArms).join("', '")}'`);
                    return false;
                }
                if (Array.isArray(Player.ActivePose) && Player.ActivePose.includes(pose)) {
                    respond(`This character is already in the chosen pose.`);
                    return false;
                }
                const ruleState = RulesGetRuleState("block_restrict_allowed_poses");
                if (sender.isPlayer() && ruleState.isEnforced && ((_a = ruleState.customData) === null || _a === void 0 ? void 0 : _a.poseButtons.includes(pose))) {
                    respond(`You cannot change into this pose as the rule '${ruleState.ruleDefinition.name}' forbids it.`);
                    return false;
                }
                CharacterSetActivePose(Player, pose);
                ServerSend("ChatRoomCharacterPoseUpdate", { Pose: Player.ActivePose });
                if (!sender.isPlayer()) {
                    const text = armsTexts[argv[0].toLowerCase()];
                    if (text) {
                        ChatRoomSendLocal(dictionaryProcess(text, {
                            SENDER_NAME: sender.Nickname,
                            SENDER_NUMBER: `${sender.MemberNumber}`,
                        }), undefined, sender.MemberNumber);
                    }
                }
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], Object.keys(posesArms));
                }
                return [];
            },
        });
        registerCommand("legs", {
            name: "Legs",
            helpDescription: `<${Object.keys(posesLegs).join(" | ")}>`,
            shortDescription: "Control PLAYER_NAME's leg poses",
            longDescription: `This command forces PLAYER_NAME's legs into the specified pose, but they can still manually change it. Some may be unavailable, due to restricting items, etc.\n` +
                `Usage:\n` +
                `!legs HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.normal,
            playerUsable: true,
            trigger: (argv, sender, respond, state) => {
                var _a;
                if (argv.length !== 1) {
                    respond(Command_fixExclamationMark(sender, `!legs usage:\n` +
                        `!legs ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                const pose = posesLegs[argv[0].toLowerCase()];
                if (pose === undefined) {
                    respond(`Bad value: ${argv[0].toLowerCase()} is not one of '${Object.keys(posesLegs).join("', '")}'`);
                    return false;
                }
                if (Array.isArray(Player.ActivePose) && Player.ActivePose.includes(pose)) {
                    respond(`This character is already in the chosen pose.`);
                    return false;
                }
                const ruleState = RulesGetRuleState("block_restrict_allowed_poses");
                if (sender.isPlayer() && ruleState.isEnforced && ((_a = ruleState.customData) === null || _a === void 0 ? void 0 : _a.poseButtons.includes(pose))) {
                    respond(`You cannot change into this pose as the rule '${ruleState.ruleDefinition.name}' forbids it.`);
                    return false;
                }
                CharacterSetActivePose(Player, pose);
                ServerSend("ChatRoomCharacterPoseUpdate", { Pose: Player.ActivePose });
                if (!sender.isPlayer()) {
                    const text = legsTexts[argv[0].toLowerCase()];
                    if (text) {
                        ChatRoomSendLocal(dictionaryProcess(text, {
                            SENDER_NAME: sender.Nickname,
                            SENDER_NUMBER: `${sender.MemberNumber}`,
                        }), undefined, sender.MemberNumber);
                    }
                }
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], Object.keys(posesLegs));
                }
                return [];
            },
        });
        registerCommand("allfours", {
            name: "Allfours",
            helpDescription: ``,
            shortDescription: "Make PLAYER_NAME get on all fours",
            longDescription: `This command forces PLAYER_NAME's to get on all fours, but they can still manually change their pose. This pose requires specific items to work.\n` +
                `Usage:\n` +
                `!allfours`,
            defaultLimit: ConditionsLimit.normal,
            playerUsable: true,
            trigger: (argv, sender, respond, state) => {
                var _a;
                if (argv.length !== 0) {
                    respond(Command_fixExclamationMark(sender, `!allfours expects no arguments.`));
                    return false;
                }
                const pose = "AllFours";
                if (Array.isArray(Player.ActivePose) && Player.ActivePose.includes(pose)) {
                    respond(`This character is already in the chosen pose.`);
                    return false;
                }
                if (!Player.AllowedActivePose.includes(pose)) {
                    respond(`You cannot change into this pose as this pose requires items that support it to work.`);
                    return false;
                }
                const ruleState = RulesGetRuleState("block_restrict_allowed_poses");
                if (sender.isPlayer() && ruleState.isEnforced && ((_a = ruleState.customData) === null || _a === void 0 ? void 0 : _a.poseButtons.includes(pose))) {
                    respond(`You cannot change into this pose as the rule '${ruleState.ruleDefinition.name}' forbids it.`);
                    return false;
                }
                CharacterSetActivePose(Player, pose);
                ServerSend("ChatRoomCharacterPoseUpdate", { Pose: Player.ActivePose });
                if (!sender.isPlayer()) {
                    const text = "SENDER_NAME (SENDER_NUMBER) made you get on all fours";
                    if (text) {
                        ChatRoomSendLocal(dictionaryProcess(text, {
                            SENDER_NAME: sender.Nickname,
                            SENDER_NUMBER: `${sender.MemberNumber}`,
                        }), undefined, sender.MemberNumber);
                    }
                }
                return true;
            },
        });
        registerCommand("goandwait", {
            name: "Go and wait",
            helpDescription: `<public|private> <background name> <room name>`,
            shortDescription: "Makes PLAYER_NAME leave and wait in another chat room.",
            longDescription: `This command forces PLAYER_NAME to leave the current room and join an existing chat room or otherwise create a new public or private one with the given background name and room name. PLAYER_NAME is not prevented from leaving that room, if she is able to. Tip: If you want to make PLAYER_NAME wait in a certain way, the pose command could for instance be used before this one.\n` +
                `Usage:\n` +
                `!goandwait HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.blocked,
            playerUsable: false,
            trigger: (argv, sender, respond, state) => {
                if (argv.length < 1 || (argv[0] !== "public" && argv[0] !== "private")) {
                    respond(Command_fixExclamationMark(sender, `!goandwait usage:\n` +
                        `!goandwait ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                if (argv.length < 2) {
                    respond(`The second argument needs to be the name of a background (for example: 'BDSMRoomRed' or 'BondageBedChamber')`);
                    return false;
                }
                const Background = backgroundList.find(i => i.toLocaleLowerCase() === argv[1].toLocaleLowerCase());
                if (!Background) {
                    respond(`Invalid/unknown background. Example of correct ones: 'BDSMRoomRed' or 'BondageBedChamber'`);
                    return false;
                }
                if (argv.length < 3) {
                    respond(`Please add a room name behind the room background name.`);
                    return false;
                }
                const Name = argv.slice(2).join(" ");
                const Private = argv[0] === "private";
                const playerNumber = Player.MemberNumber;
                const Admin = [playerNumber, sender.MemberNumber];
                if (!playerNumber) {
                    console.error("Player member number was unexpectedly undefined.");
                    return false;
                }
                if (!/^[A-Za-z0-9\s]*$/.test(Name)) {
                    respond(`The room name part of the command contains characters that are not A-Z, numbers or whitespaces.`);
                    return false;
                }
                else if (Name.length > 20) {
                    respond(`The room name part of the command cannot be longer than 20 characters.`);
                    return false;
                }
                InfoBeep(`You got ordered by ${sender} to wait in another room.`, 8000);
                ChatRoomActionMessage(`TargetCharacterName received an order by SourceCharacter (${sender.MemberNumber}) to wait in another room.`, null, [
                    { Tag: "TargetCharacterName", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    { Tag: "SourceCharacter", MemberNumber: sender.MemberNumber, Text: CharacterNickname(sender.Character) },
                ]);
                DialogLentLockpicks = false;
                ChatRoomClearAllElements();
                ServerSend("ChatRoomLeave", "");
                ChatRoomSetLastChatRoom("");
                ChatRoomLeashPlayer = null;
                CommonSetScreen("Online", "ChatSearch");
                CharacterDeleteAllOnline();
                ChatRoomPlayerCanJoin = true;
                ServerSend("ChatRoomCreate", {
                    Name,
                    Description: "",
                    Background,
                    Private,
                    Locked: false,
                    Space: "",
                    Game: "",
                    Admin,
                    Ban: [],
                    Limit: 10,
                    BlockCategory: [],
                });
                ServerSend("ChatRoomJoin", { Name });
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], ["public", "private"]);
                }
                if (argv.length === 2) {
                    return Command_pickAutocomplete(argv[1], backgroundList);
                }
                return [];
            },
        });
        registerCommand("cell", {
            name: "Send to cell",
            helpDescription: `<time>`,
            shortDescription: "Lock PLAYER_NAME in a singleplayer isolation cell",
            longDescription: `This command sends PLAYER_NAME to the timer cell for up to 60 minutes. There is no way for you to get her out before the time is up.\n` +
                `IMPORTANT: The effects of this command is not going away if BCX is turned off or not activated after reloading. This is because this command uses a function present in the base game.\n` +
                `Usage:\n` +
                `!cell HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.blocked,
            playerUsable: false,
            trigger: (argv, sender, respond, state) => {
                if (argv.length < 1) {
                    respond(Command_fixExclamationMark(sender, `!cell usage:\n` +
                        `!cell ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                let time = 0;
                for (const v of argv) {
                    const i = Command_parseTime(v);
                    if (typeof i === "string") {
                        respond(i);
                        return false;
                    }
                    time += i;
                }
                const minutes = time / 60000;
                if (minutes < 1 || minutes > 60) {
                    respond(`Time needs to be between 1 minute and 1 hour`);
                    return false;
                }
                InfoBeep(`Two maids locked you into a timer cell, following ${sender}'s command.`, 8000);
                ChatRoomActionMessage(`TargetCharacterName gets grabbed by two maids and locked in a timer cell, following SourceCharacter's (${sender.MemberNumber}) command.`, null, [
                    { Tag: "TargetCharacterName", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    { Tag: "SourceCharacter", MemberNumber: sender.MemberNumber, Text: CharacterNickname(sender.Character) },
                ]);
                DialogLentLockpicks = false;
                ChatRoomClearAllElements();
                ServerSend("ChatRoomLeave", "");
                CharacterDeleteAllOnline();
                CellLock(minutes);
                return true;
            },
        });
        registerCommand("asylum", {
            name: "Send to asylum",
            helpDescription: `<time> | cancel`,
            shortDescription: "Lock PLAYER_NAME into the aslyum",
            longDescription: `This command sends and locks PLAYER_NAME into the asylum for up to 1 week, where she can freely walk around, but cannot leave the area. You can free PLAYER_NAME early by visiting her in the aslyum and using '.asylum cancel'.\n` +
                `IMPORTANT: The effects of this command is not going away if BCX is turned off or not activated after reloading. This is because this command uses a function present in the base game.\n` +
                `Usage:\n` +
                `!asylum HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.blocked,
            playerUsable: false,
            trigger: (argv, sender, respond, state) => {
                if (argv.length < 1) {
                    respond(Command_fixExclamationMark(sender, `!asylum usage:\n` +
                        `!asylum ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                if (argv[0] === "cancel") {
                    LogDelete("Committed", "Asylum", true);
                    respond(`You freed ${Player.Name}. She can now leave the Asylum again.`);
                    ChatRoomSendLocal(`${sender.toNicknamedString()} freed you. You are now able to leave the Asylum again.`);
                    return true;
                }
                let time = 0;
                for (const v of argv) {
                    const i = Command_parseTime(v);
                    if (typeof i === "string") {
                        respond(i);
                        return false;
                    }
                    time += i;
                }
                if (time < 60 * 1000 || time > 7 * 24 * 60 * 60 * 1000) {
                    respond(`Time needs to be between 1 minute and 1 week`);
                    return false;
                }
                InfoBeep(`Two nurses locked you in the Asylum, following ${sender}'s command.`, 8000);
                ChatRoomActionMessage(`TargetCharacterName gets grabbed by two nurses and locked in the Asylum, following SourceCharacter's (${sender.MemberNumber}) command.`, null, [
                    { Tag: "TargetCharacterName", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    { Tag: "SourceCharacter", MemberNumber: sender.MemberNumber, Text: CharacterNickname(sender.Character) },
                ]);
                DialogLentLockpicks = false;
                ChatRoomClearAllElements();
                ServerSend("ChatRoomLeave", "");
                CharacterDeleteAllOnline();
                LogAdd("Committed", "Asylum", CurrentTime + time, true);
                CommonSetScreen("Room", "AsylumEntrance");
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], ["cancel"]);
                }
                return [];
            },
        });
        registerCommand("keydeposit", {
            name: "Deposit all keys",
            helpDescription: `<time> | cancel`,
            shortDescription: "Store away PLAYER_NAME's keys",
            longDescription: `This command removes all of PLAYER_NAME's keys for up to 1 week. You can give them back to her early by using '.keydeposit cancel'.\n` +
                `IMPORTANT: The effects of this command is not going away if BCX is turned off or not activated after reloading. This is because this command uses a function present in the base game.\n` +
                `Usage:\n` +
                `!keydeposit HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.limited,
            playerUsable: false,
            trigger: (argv, sender, respond, state) => {
                if (argv.length < 1) {
                    respond(Command_fixExclamationMark(sender, `!keydeposit usage:\n` +
                        `!keydeposit ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                if (argv[0] === "cancel") {
                    LogDelete("KeyDeposit", "Cell", true);
                    respond(`You let ${Player.Name} have her keys back.`);
                    ChatRoomSendLocal(`${sender.toNicknamedString()} let you have your keys back.`);
                    return true;
                }
                let time = 0;
                for (const v of argv) {
                    const i = Command_parseTime(v);
                    if (typeof i === "string") {
                        respond(i);
                        return false;
                    }
                    time += i;
                }
                if (time < 60 * 1000 || time > 7 * 24 * 60 * 60 * 1000) {
                    respond(`Time needs to be between 1 minute and 1 week`);
                    return false;
                }
                ChatRoomActionMessage(`A nurse took all keys from TargetCharacterName, following SourceCharacter's (${sender.MemberNumber}) command. The keys will be deposited for ${formatTimeInterval(time)}.`, null, [
                    { Tag: "TargetCharacterName", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    { Tag: "SourceCharacter", MemberNumber: sender.MemberNumber, Text: CharacterNickname(sender.Character) },
                ]);
                LogAdd("KeyDeposit", "Cell", CurrentTime + time, true);
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], ["cancel"]);
                }
                return [];
            },
        });
        registerCommand("timeleft", {
            name: "Show remaining time",
            helpDescription: `asylum | ggts | keydeposit`,
            shortDescription: "Remaining time of keyhold, asylum stay, or GGTS training",
            longDescription: `This command shows the remaining time of either having all of PLAYER_NAME's keys deposited, her being locked in the asylum, or having to do GGTS training sessions in the asylum.\n` +
                `Usage:\n` +
                `!timeleft HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.normal,
            playerUsable: true,
            trigger: (argv, sender, respond, state) => {
                if (argv.length !== 1 || (argv[0] !== "asylum" && argv[0] !== "keydeposit" && argv[0] !== "ggts")) {
                    respond(Command_fixExclamationMark(sender, `!timeleft usage:\n` +
                        `!timeleft ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                let time;
                let response;
                if (argv[0] === "asylum") {
                    time = LogValue("Committed", "Asylum");
                    response = `${Player.Name} can leave the asylum in`;
                }
                else if (argv[0] === "ggts") {
                    time = LogValue("ForceGGTS", "Asylum");
                    response = `${Player.Name} still has to undergo this amount of GGTS training time:`;
                }
                else {
                    time = LogValue("KeyDeposit", "Cell");
                    response = `${Player.Name} will get her keys back in`;
                }
                if (time && time > 0 && argv[0] === "ggts") {
                    respond(`${response} ${formatTimeInterval(time)}.`);
                }
                else if (time && CurrentTime < time) {
                    respond(`${response} ${formatTimeInterval(time - CurrentTime)}.`);
                }
                else {
                    respond(`${Player.Name} is not under the effect of the '${argv[0]}'-command currently.`);
                    return false;
                }
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], ["asylum", "ggts", "keydeposit"]);
                }
                return [];
            },
        });
        registerCommand("servedrinks", {
            name: "Send to serve drinks",
            helpDescription: "",
            shortDescription: "Force PLAYER_NAME to do bound maid work",
            longDescription: `This command sends PLAYER_NAME to sell 5 drinks as a maid in multiplayer chat rooms. She must be a maid recognized by the maid sorority and be able to walk and talk, to be taken in by the maid.\n` +
                `Usage:\n` +
                `!servedrinks`,
            defaultLimit: ConditionsLimit.blocked,
            playerUsable: false,
            trigger: (argv, sender, respond) => {
                if (ReputationCharacterGet(Player, "Maid") < 1) {
                    respond(`${Player.Name} must be a maid recognized by the maid sorority to be taken in for the job.`);
                    return false;
                }
                if (!Player.CanWalk() || !Player.CanTalk()) {
                    respond(`${Player.Name} must be able to walk and talk or the maids will not take her in for the job.`);
                    return false;
                }
                CharacterSetActivePose(Player, null);
                const D = `(Two maids grab you and escort you to their quarters.  Another maid addresses you.)  ${sender.Name} sent you here to work.`;
                ChatRoomActionMessage(`TargetCharacterName gets grabbed by two maids and escorted to the maid quarters to serve drinks, following SourceCharacter's (${sender.MemberNumber}) command.`, null, [
                    { Tag: "TargetCharacterName", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    { Tag: "SourceCharacter", MemberNumber: sender.MemberNumber, Text: CharacterNickname(sender.Character) },
                ]);
                ChatRoomClearAllElements();
                ServerSend("ChatRoomLeave", "");
                CommonSetScreen("Room", "MaidQuarters");
                CharacterSetCurrent(MaidQuartersMaid);
                MaidQuartersMaid.CurrentDialog = D;
                MaidQuartersMaid.Stage = "205";
                MaidQuartersOnlineDrinkFromOwner = true;
                return true;
            },
        });
        registerCommand("orgasm", {
            name: "Manipulate the arousal meter",
            helpDescription: "<number from 1 to 100> | forced | ruined | stop",
            shortDescription: "Controls PLAYER_NAME's orgasms directly",
            longDescription: `This command controls PLAYER_NAME's arousal meter directly, allowing four things:\n1. Setting the bar directly to a number from 1 to 100, whereas 100 triggers a normal orgasm.\n2. Triggering a forced orgasm that cannot be resisted.\n3. Triggering an orgasm that gets ruined.\n4. Stopping an orgasm already triggered (e.g. by a toy).\n` +
                `Usage:\n` +
                `!orgasm HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.limited,
            playerUsable: false,
            trigger: (argv, sender, respond, state) => {
                if (argv.length < 1) {
                    respond(Command_fixExclamationMark(sender, `!orgasm usage:\n` +
                        `!orgasm ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                if (argv[0] === "stop") {
                    if (!Player.ArousalSettings || !Player.ArousalSettings.OrgasmTimer) {
                        respond("There is no orgasm to stop currently.");
                        return false;
                    }
                    ActivityOrgasmRuined = true;
                    return true;
                }
                if (Player.ArousalSettings && Player.ArousalSettings.OrgasmTimer) {
                    respond("This is not possible right now.");
                    return false;
                }
                if (argv[0] === "forced") {
                    ActivitySetArousal(Player, 99);
                    ActivityOrgasmGameResistCount = 496.5;
                    ActivityOrgasmPrepare(Player);
                    return true;
                }
                if (argv[0] === "ruined") {
                    ActivitySetArousal(Player, 99);
                    const backup = Player.Effect;
                    Player.Effect = backup.concat("DenialMode", "RuinOrgasms");
                    ActivityOrgasmPrepare(Player, true);
                    Player.Effect = backup;
                    return true;
                }
                const progress = /^[0-9]+$/.test(argv[0]) && Number.parseInt(argv[0], 10);
                if (!progress || progress < 0 || progress > 100) {
                    respond(Command_fixExclamationMark(sender, `!orgasm usage:\n` +
                        `!orgasm ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                ActivitySetArousal(Player, progress);
                if (progress > 99) {
                    ActivityOrgasmPrepare(Player);
                }
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], ["forced", "ruined", "stop"]);
                }
                return [];
            },
        });
        const emoticonExpressions = {
            none: null,
            afk: "Afk",
            whisper: "Whisper",
            sleep: "Sleep",
            hearts: "Hearts",
            sweatdrop: "Tear",
            ear: "Hearing",
            question: "Confusion",
            exclamation: "Exclamation",
            angry: "Annoyed",
            book: "Read",
            hand: "RaisedHand",
            eye: "Spectator",
            thumbsdown: "ThumbsDown",
            thumbsup: "ThumbsUp",
            rope: "LoveRope",
            gag: "LoveGag",
            lock: "LoveLock",
            wardrobe: "Wardrobe",
            game: "Gaming",
        };
        registerCommand("emoticon", {
            name: "Emoticon",
            helpDescription: `<${Object.keys(emoticonExpressions).join(" | ")}>`,
            shortDescription: "Control PLAYER_NAME's emoticon",
            longDescription: `This command changes PLAYER_NAME's emoticon into the specified state, but the player can still manually change it.\n` +
                `Usage:\n` +
                `!emoticon HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.normal,
            playerUsable: true,
            trigger: (argv, sender, respond, state) => {
                if (argv.length !== 1) {
                    respond(Command_fixExclamationMark(sender, `!emoticon usage:\n` +
                        `!emoticon ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                const blockRule = RulesGetRuleState("block_changing_emoticon");
                if (blockRule.isEnforced && sender.isPlayer()) {
                    blockRule.triggerAttempt();
                    return false;
                }
                else if (blockRule.inEffect && sender.isPlayer()) {
                    blockRule.trigger();
                }
                const expression = emoticonExpressions[argv[0].toLowerCase()];
                if (expression === undefined) {
                    respond(`Bad value: ${argv[0].toLowerCase()} is not one of '${Object.keys(emoticonExpressions).join("', '")}'`);
                    return false;
                }
                CharacterSetFacialExpression(Player, "Emoticon", expression);
                if (!sender.isPlayer()) {
                    const text = "SENDER_NAME (SENDER_NUMBER) changed your emoticon.";
                    ChatRoomSendLocal(dictionaryProcess(text, {
                        SENDER_NAME: sender.Nickname,
                        SENDER_NUMBER: `${sender.MemberNumber}`,
                    }), undefined, sender.MemberNumber);
                }
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1) {
                    return Command_pickAutocomplete(argv[0], Object.keys(emoticonExpressions));
                }
                return [];
            },
        });
    }

    function initCommands_speech() {
        registerCommand("forcesay", {
            name: "Forced say",
            helpDescription: `<text>`,
            shortDescription: "Makes PLAYER_NAME instantly say the text",
            longDescription: `This command forces PLAYER_NAME to directly say the given text loudly in the chat room, without any way to react to it. The command is intentionally not supporting emotes, whispers or OOC text.\n` +
                `Usage:\n` +
                `!forcesay HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.blocked,
            playerUsable: false,
            trigger: (argv, sender, respond, state) => {
                if (argv.length < 1) {
                    respond(Command_fixExclamationMark(sender, `!forcesay usage:\n` +
                        `!forcesay ${state.commandDefinition.helpDescription}`));
                    return false;
                }
                const sentence = argv.join(" ").trim();
                if (sentence.includes("(")) {
                    respond(`The text after '.forcesay' must not contain OOC parts in round brackets`);
                    return false;
                }
                if (/^[*!/.]/.test(sentence[0])) {
                    respond(`The text after '.forcesay' must not start with '*', '/', '!', or '.'`);
                    return false;
                }
                ServerSend("ChatRoomChat", { Content: sentence, Type: "Chat" });
                return true;
            },
        });
        let lastRoomName = "";
        let senderNumber = null;
        let sayText = "";
        let count = 0;
        registerCommand("say", {
            name: "Say",
            helpDescription: `<text> | cancel`,
            shortDescription: "Blocks PLAYER_NAME until she typed the text",
            longDescription: `This command makes PLAYER_NAME unable to say anything else than the given text loudly in the chat (she can still use emotes and whispers). The blocking lasts until the command giver cancels it with 'say cancel' command, leaves the room or until PLAYER_NAME leaves the room. The text is supposed to be typed out manually, otherwise the giver of the command will be notified of this. The command is intentionally not supporting emotes, whispers or OOC text.\n` +
                `Usage:\n` +
                `!say HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.blocked,
            playerUsable: false,
            load() {
                hookFunction("ChatRoomSync", 0, (args, next) => {
                    const data = args[0];
                    if (data.Name !== lastRoomName) {
                        sayText = "";
                        senderNumber = null;
                    }
                    next(args);
                }, ModuleCategory.Commands);
                hookFunction("CommonKeyDown", 4, (args, next) => {
                    if (sayText) {
                        count++;
                    }
                    next(args);
                }, ModuleCategory.Commands);
            },
            init() {
                const check = (msg) => {
                    var _a;
                    return (((_a = msg.noOOCMessage) !== null && _a !== void 0 ? _a : msg.originalMessage).toLocaleLowerCase() === sayText.trim().toLocaleLowerCase() &&
                        msg.type === "Chat");
                };
                registerSpeechHook({
                    allowSend: (msg) => {
                        if (sayText &&
                            msg.type === "Chat") {
                            if (ChatRoomData === null || ChatRoomData === void 0 ? void 0 : ChatRoomData.Name) {
                                lastRoomName = ChatRoomData.Name;
                            }
                            if (!getAllCharactersInRoom().some(c => c.MemberNumber === senderNumber)) {
                                sayText = "";
                                senderNumber = null;
                                return 0;
                            }
                            if (check(msg)) {
                                if (senderNumber && sayText.length >= count) {
                                    ChatRoomActionMessage(`Note: SourceCharacter did not type out the text '${sayText}' fully and likely ` +
                                        `used copy & paste or the chat history instead.`, senderNumber, [
                                        { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                                    ]);
                                    ChatRoomSendLocal(`Note: It appears you didn't type out the text '${sayText}' fully and likely` +
                                        `used copy & paste or the chat history instead. The giver of the command has been notified of this.`);
                                }
                                sayText = "";
                                senderNumber = null;
                                return 2;
                            }
                            else {
                                ChatRoomSendLocal(`You are ordered to say '${sayText}'.`);
                                return 1;
                            }
                        }
                        return 0;
                    },
                });
            },
            trigger: (argv, sender, respond, state) => {
                if (sayText && argv.length === 1 && argv[0].toLowerCase() === "cancel") {
                    respond(`You canceled ${Player.Name}'s say-command. She is now able to chat normally again.`);
                    ChatRoomSendLocal(`${sender.toNicknamedString()} canceled your say-command. You are now able to chat normally again.`);
                    sayText = "";
                    senderNumber = null;
                    return true;
                }
                if (sayText) {
                    respond(`${Player.Name} is already ordered to say something else. Please wait until she is done or cancel the current say-command with '.say cancel'.`);
                    return false;
                }
                if (typeTaskText) {
                    respond(`${Player.Name} cannot receive a say-command, while still dealing with a typing task command.`);
                    return false;
                }
                const sentence = argv.join(" ").trim();
                if (!sentence || argv.length < 1) {
                    respond(Command_fixExclamationMark(sender, `!say usage:\n` +
                        `!say ${state.commandDefinition.helpDescription}\n` +
                        `!say cancel - Cancel the last unfulfilled say-command and stop ${Player.Name}'s chat block.`));
                    return false;
                }
                if (sentence.includes("(")) {
                    respond(`The text after '.say' must not contain OOC parts in round brackets`);
                    return false;
                }
                if (/^[*!/.]/.test(sentence[0])) {
                    respond(`The text after '.say' must not start with '*', '/', '!', or '.'`);
                    return false;
                }
                count = 0;
                sayText = sentence;
                senderNumber = sender.MemberNumber;
                ChatRoomSendLocal(`${sender.toNicknamedString()} orders you to loudly say '${sayText}'.`);
                return true;
            },
            autoCompleter: (argv) => {
                if (argv.length === 1 && sayText) {
                    return Command_pickAutocomplete(argv[0], ["cancel"]);
                }
                return [];
            },
        });
        let typeTaskText = "";
        let typeTaskForce = false;
        let repetitions = false;
        let repCounter = 0;
        function resetTypeTask() {
            typeTaskText = "";
            typeTaskForce = false;
            senderNumber = null;
            repCounter = 0;
            repetitions = false;
        }
        function TypeTaskLoad() {
            hookFunction("ChatRoomSync", 0, (args, next) => {
                const data = args[0];
                if (data.Name !== lastRoomName) {
                    resetTypeTask();
                }
                next(args);
            }, ModuleCategory.Commands);
            hookFunction("CommonKeyDown", 4, (args, next) => {
                if (typeTaskText) {
                    count++;
                }
                next(args);
            }, ModuleCategory.Commands);
        }
        function TypeTaskInit() {
            const check = (msg) => {
                var _a;
                return (((_a = msg.noOOCMessage) !== null && _a !== void 0 ? _a : msg.originalMessage).toLocaleLowerCase() === typeTaskText.trim().toLocaleLowerCase() &&
                    msg.type === "Whisper" && (ChatRoomTargetMemberNumber === senderNumber));
            };
            registerSpeechHook({
                allowSend: (msg) => {
                    if (typeTaskText &&
                        typeof repetitions === "number" &&
                        senderNumber &&
                        (msg.type === "Chat" || msg.type === "Whisper")) {
                        if (ChatRoomData === null || ChatRoomData === void 0 ? void 0 : ChatRoomData.Name) {
                            lastRoomName = ChatRoomData.Name;
                        }
                        if (!getAllCharactersInRoom().some(c => c.MemberNumber === senderNumber)) {
                            ChatRoomSendLocal(`Your current typing task ended prematurely, as the task giver is no longer in the room.`);
                            resetTypeTask();
                            return 0;
                        }
                        if (check(msg)) {
                            if (senderNumber && typeTaskText.length >= count) {
                                if (typeTaskForce) {
                                    ChatRoomActionMessage(`SourceCharacter failed one instance of her typing task, since she did not type out the required text fully and likely ` +
                                        `used copy & paste or the chat history instead.`, senderNumber, [
                                        { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                                    ]);
                                    ChatRoomSendLocal(`You are required to type the text out fully yourself. This try did not count!`);
                                    return 1;
                                }
                                ChatRoomActionMessage(`SourceCharacter failed the typing task as she did not type out the required text '${typeTaskText}' fully and likely ` +
                                    `used copy & paste or the chat history instead.`, senderNumber, [
                                    { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                                ]);
                                ChatRoomSendLocal(`You failed the typing task as you did not type out the text fully`);
                                resetTypeTask();
                            }
                            else if (repCounter >= repetitions) {
                                ChatRoomActionMessage(`SourceCharacter completed the typing task successfully`, senderNumber, [
                                    { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                                ]);
                                ChatRoomSendLocal(`You completed the typing task successfully.`);
                                resetTypeTask();
                            }
                            else {
                                ChatRoomSendLocal(`Success: ${repCounter} of ${repetitions} times`);
                                count = 0;
                                repCounter++;
                            }
                            return 2;
                        }
                        else {
                            if (ChatRoomTargetMemberNumber !== senderNumber) {
                                ChatRoomSendLocal(`You are not allowed to whisper to someone else than ${getCharacterNickname(senderNumber, "[unknown name]")} (${senderNumber}) while you have not finished your typing task.`);
                                return 1;
                            }
                            if (msg.type === "Chat") {
                                ChatRoomSendLocal(`You are not allowed to speak loudly in the room until you complete your typing task by whispering the required text to ${getCharacterName(senderNumber, "[unknown name]")} (${senderNumber}).`);
                                return 1;
                            }
                            if (typeTaskForce) {
                                ChatRoomActionMessage(`SourceCharacter typed the required text incorrectly. This try did not count.`, senderNumber, [
                                    { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                                ]);
                                ChatRoomSendLocal(`You did not type out the correct text '${typeTaskText}'. This try did not count!`);
                                return 1;
                            }
                            ChatRoomActionMessage(`SourceCharacter typed the required text incorrectly and failed her task after ${repCounter} ${repCounter === 1 ? "time" : "times"} out of ${repetitions}.`, senderNumber, [
                                { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                            ]);
                            ChatRoomSendLocal(`You typed the required text incorrectly and failed your task after ${repCounter} ${repCounter === 1 ? "time" : "times"} out of ${repetitions}.`);
                            resetTypeTask();
                            return 0;
                        }
                    }
                    return 0;
                },
            });
        }
        function TypeTaskTrigger(argv, sender, respond, isForced) {
            if (typeTaskText && typeTaskForce !== isForced) {
                respond(`Currently ${Player.Name} has a ${typeTaskForce ? "forced" : "non-forced"} typetask-command ordered. These two commands cannot be combined.`);
                return false;
            }
            if (typeTaskText && argv.length === 1 && argv[0] === "cancel") {
                respond(`You canceled ${Player.Name}'s typetask-command. She is now able to chat normally again.`);
                ChatRoomSendLocal(`${sender.toNicknamedString()} canceled your typetask-command. You are now able to chat normally again.`);
                resetTypeTask();
                return true;
            }
            if (typeTaskText) {
                respond(`${Player.Name} already has a typing task currently. Please wait until she is done or cancel the current one with '.typetask cancel'.`);
                return false;
            }
            if (sayText) {
                respond(`${Player.Name} cannot receive a typing task, while still blocked from a recent say-command.`);
                return false;
            }
            if (argv.length === 0) {
                respond(Command_fixExclamationMark(sender, `!typetask usage:\n` +
                    `!typetask <number> <text>\n` +
                    `!typetask cancel - Cancel the last unfulfilled say-command and stop ${Player.Name}'s chat block.`));
                return false;
            }
            repetitions = /^[0-9]+$/.test(argv[0]) && Number.parseInt(argv[0], 10);
            if (!repetitions || repetitions === 0) {
                respond(`Needs a number (at least '1') for how often typing the text needs to be repeated after '.typetask' or specifically '.typetask cancel' to cancel the last unfulfilled typetask-command and stop ${Player.Name}'s chat and whisper block.'`);
                return false;
            }
            const sentence = argv.slice(1).join(" ").trim();
            if (argv.length < 2 || !sentence) {
                respond(`Needs a word or sentence after the number which is the text that needs to be repeatedly typed`);
                return false;
            }
            if (sentence.includes("(")) {
                respond(`The text after '.typetask' must not contain OOC parts in round brackets`);
                return false;
            }
            if (/^[*!/.]/.test(sentence[0])) {
                respond(`The text after '.typetask' must not start with '*', '/', '!', or '.'`);
                return false;
            }
            count = 0;
            repCounter = 1;
            typeTaskText = sentence;
            typeTaskForce = isForced;
            senderNumber = sender.MemberNumber;
            respond(`Successfully gave a new typing task to ${Player.Name}.`);
            ChatRoomSendLocal(`${sender.toNicknamedString()} gives you the task of typing '${typeTaskText}' ${repetitions} times in a whisper to her.`);
            return true;
        }
        function TypeTaskAutoCompleter(argv, isForced) {
            if (argv.length === 1 && typeTaskText && typeTaskForce === isForced) {
                return Command_pickAutocomplete(argv[0], ["cancel"]);
            }
            return [];
        }
        registerCommand("typetask", {
            name: "Typing task",
            helpDescription: `<number> <text> | cancel`,
            shortDescription: "Orders PLAYER_NAME to type a text several times or until she makes a mistake",
            longDescription: `This command gives PLAYER_NAME the task to type the given text in a whisper to the task giver for the number of times defined in the command. This will block PLAYER_NAME from chatting or whispering to anyone other than the task giver (she can still use emotes). This state lasts until the task giver cancels it with 'typetask cancel' command, leaves the room or until PLAYER_NAME either makes a mistake or leaves the room. The command is intentionally not supporting emotes, whispers or OOC text.\n` +
                `Usage:\n` +
                `!typetask HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.blocked,
            playerUsable: false,
            load() {
                TypeTaskLoad();
            },
            init() {
                TypeTaskInit();
            },
            trigger: (argv, sender, respond, state) => {
                return TypeTaskTrigger(argv, sender, respond, false);
            },
            autoCompleter: (argv) => {
                return TypeTaskAutoCompleter(argv, false);
            },
        });
        registerCommand("forcetypetask", {
            name: "Forced typing task",
            helpDescription: `<number> <text> | cancel`,
            shortDescription: "Orders PLAYER_NAME to type a text a set number of times",
            longDescription: `This command gives PLAYER_NAME the task to type the given text in a whisper to the task giver for the number of times defined in the command. This will block PLAYER_NAME from chatting or whispering to anyone other than the task giver (she can still use emotes). This state lasts until the task giver cancels it with 'typetask cancel' command, leaves the room or until PLAYER_NAME either finishes the whole task successfully or leaves the room. The command is intentionally not supporting emotes, whispers or OOC text.\n` +
                `Usage:\n` +
                `!forcetypetask HELP_DESCRIPTION`,
            defaultLimit: ConditionsLimit.blocked,
            playerUsable: false,
            load() {
            },
            init() {
            },
            trigger: (argv, sender, respond, state) => {
                return TypeTaskTrigger(argv, sender, respond, true);
            },
            autoCompleter: (argv) => {
                return TypeTaskAutoCompleter(argv, true);
            },
        });
    }

    const COMMANDS_ANTILOOP_RESET_INTERVAL = 60000;
    const COMMANDS_ANTILOOP_THRESHOLD = 10;
    const COMMANDS_ANTILOOP_SUSPEND_TIME = 600000;
    function guard_BCX_Command(name) {
        return typeof name === "string" && commands.has(name);
    }
    function guard_CommandCustomData(command, data) {
        return false;
    }
    const commands = new Map();
    const commandsList = [];
    function registerCommand(name, data) {
        if (moduleInitPhase !== ModuleInitPhase.init) {
            throw new Error("Commands can be registered only during init");
        }
        if (commands.has(name)) {
            throw new Error(`Command "${name}" already defined!`);
        }
        commands.set(name, {
            ...data,
            state: new CommandState(name, data),
        });
        commandsList.push(name);
    }
    function CommandsGetDisplayDefinition(command) {
        const data = commands.get(command);
        if (!data) {
            throw new Error(`Attempt to get display definition for unknown command '${command}'`);
        }
        return {
            name: data.name,
            shortDescription: data.shortDescription,
            longDescription: data.longDescription,
            helpDescription: data.helpDescription,
            playerUsable: data.playerUsable,
            defaultLimit: data.defaultLimit,
        };
    }
    function CommandsGetCommandState(command) {
        const data = commands.get(command);
        if (!data) {
            throw new Error(`Attempt to get state for unknown command '${command}'`);
        }
        return data.state;
    }
    function parseCommandName(selector, filter) {
        selector = selector.toLocaleLowerCase();
        const command = Array.from(commands.entries())
            .filter(c => !filter || filter(c[0]))
            .find(([commandName, data]) => commandName.toLocaleLowerCase() === selector || data.name.toLocaleLowerCase() === selector);
        return command ? [true, command[0]] : [false, `Unknown command "${selector}".`];
    }
    function autocompleteCommandName(selector, filter) {
        selector = selector.toLocaleLowerCase();
        let options = Array.from(commands.entries())
            .filter(c => c[1].name.toLocaleLowerCase().startsWith(selector) && (!filter || filter(c[0])))
            .map(c => c[1].name);
        if (options.length === 0) {
            options = Array.from(commands.entries())
                .filter(c => c[0].toLocaleLowerCase().startsWith(selector) && (!filter || filter(c[0])))
                .map(c => c[0]);
        }
        return options;
    }
    function CommandsGetList() {
        return commandsList.map(command => [command, CommandsGetDisplayDefinition(command)]);
    }
    function CommandsTrigger(command, argv, character, respond) {
        if (!moduleIsEnabled(ModuleCategory.Commands))
            return false;
        if (character && !ConditionsCheckAccess("commands", command, character))
            return false;
        const definition = commands.get(command);
        if (!definition) {
            throw new Error(`Attempt to trigger unknown command '${command}'`);
        }
        return definition.trigger(argv, character, respond, definition.state);
    }
    class CommandState {
        constructor(command, definition) {
            this.command = command;
            this.commandDefinition = definition;
        }
    }
    class ModuleCommandsModule extends BaseModule {
        constructor() {
            super(...arguments);
            this.resetTimer = null;
            this.triggerCounts = new Map();
            this.suspendedUntil = null;
        }
        init() {
            registerPermission("commands_normal", {
                name: "Allows controlling non-limited commands",
                category: ModuleCategory.Commands,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.lover],
                    [Preset.switch]: [true, AccessLevel.lover],
                    [Preset.submissive]: [false, AccessLevel.mistress],
                    [Preset.slave]: [false, AccessLevel.mistress],
                },
            });
            registerPermission("commands_limited", {
                name: "Allows controlling limited commands",
                category: ModuleCategory.Commands,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.owner],
                    [Preset.switch]: [true, AccessLevel.owner],
                    [Preset.submissive]: [false, AccessLevel.lover],
                    [Preset.slave]: [false, AccessLevel.lover],
                },
            });
            registerPermission("commands_change_limits", {
                name: "Allows to limit/block specific commands",
                category: ModuleCategory.Commands,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.self],
                    [Preset.slave]: [false, AccessLevel.owner],
                },
            });
            queryHandlers.commandTrigger = (sender, data) => {
                if (!Array.isArray(data) || !data.every(i => typeof i === "string") || data.length < 1) {
                    return undefined;
                }
                const command = data.shift();
                if (guard_BCX_Command(command)) {
                    return CommandsTrigger(command, data, sender, () => { });
                }
                else {
                    return undefined;
                }
            };
            registerWhisperCommand("modules", "commands", "- Manage the commands module", (argv, sender, respond) => {
                if (!moduleIsEnabled(ModuleCategory.Commands)) {
                    return respond(`Commands module is disabled.`);
                }
                const subcommand = (argv[0] || "").toLocaleLowerCase();
                if (subcommand === "setlimit") {
                    return ConditionsRunSubcommand("commands", argv, sender, respond);
                }
                else if (subcommand === "listall") {
                    let result = "List of commands:";
                    for (const [command] of CommandsGetList()) {
                        const resultItem = `\n${command}`;
                        if (result.length + resultItem.length >= 990) {
                            result += "\n...";
                            respond(result);
                            result = "List of commands (continued):";
                        }
                        result += resultItem;
                    }
                    respond(result);
                }
                else if (subcommand === "description") {
                    const result = parseCommandName(argv[1] || "");
                    if (!result[0]) {
                        return respond(result[1]);
                    }
                    const data = CommandsGetDisplayDefinition(result[1]);
                    respond(dictionaryProcess(data.longDescription, {
                        PLAYER_NAME: Player.Name,
                        HELP_DESCRIPTION: data.helpDescription,
                    }));
                }
                else {
                    respond(Command_fixExclamationMark(sender, `!commands usage:\n` +
                        `!commands listall - List all commands\n` +
                        `!commands description <command> - Show the command's description\n` +
                        `!commands setlimit <command> <normal/limited/blocked> - Set a limit on certain <command>\n` +
                        `\nNote: The commands can also be listed with '.help commands'. To use them on other BCX users, whisper the command with a leading '!' instead of '.'`));
                }
            }, (argv, sender) => {
                if (!moduleIsEnabled(ModuleCategory.Commands)) {
                    return [];
                }
                if (argv.length <= 1) {
                    return Command_pickAutocomplete(argv[0], ["listall", "description", "setlimit"]);
                }
                const subcommand = argv[0].toLocaleLowerCase();
                if (subcommand === "setlimit") {
                    return ConditionsAutocompleteSubcommand("commands", argv, sender);
                }
                return [];
            });
            ConditionsRegisterCategory("commands", {
                category: ModuleCategory.Commands,
                permission_normal: "commands_normal",
                permission_limited: "commands_limited",
                permission_changeLimits: "commands_change_limits",
                loadValidateConditionKey: command => guard_BCX_Command(command),
                loadValidateCondition: (command) => {
                    console.error(`BCX: Removing unexpected command condition ${command}`);
                    return false;
                },
                loadCategorySpecificGlobalData: () => undefined,
                stateChangeHandler: () => { },
                tickHandler: this.commandTick.bind(this),
                makePublicData: () => undefined,
                validateCategorySpecificGlobalData: () => true,
                validatePublicData: () => true,
                updateCondition: () => false,
                parseConditionName: (selector, onlyExisting) => {
                    return parseCommandName(selector, onlyExisting ? (command => onlyExisting.includes(command)) : undefined);
                },
                autocompleteConditionName: (selector, onlyExisting) => {
                    return autocompleteCommandName(selector, onlyExisting ? (command => onlyExisting.includes(command)) : undefined);
                },
                logLimitChange: (command, character, newLimit) => {
                    const definition = CommandsGetDisplayDefinition(command);
                    logMessage("command_change", LogEntryType.plaintext, `${character} changed ${Player.Name}'s '${definition.name}' command permission to ${ConditionsLimit[newLimit]}`);
                    if (!character.isPlayer()) {
                        ChatRoomSendLocal(`${character.toNicknamedString()} changed '${definition.name}' command permission to ${ConditionsLimit[newLimit]}`, undefined, character.MemberNumber);
                    }
                },
                logConditionUpdate: () => { },
                logCategoryUpdate: () => { },
                getDefaultLimits: () => {
                    const res = {};
                    for (const [k, v] of commands.entries()) {
                        res[k] = v.defaultLimit;
                    }
                    return res;
                },
                commandConditionSelectorHelp: "command",
            });
            initCommands_definitions();
            initCommands_speech();
            for (const [command, data] of commands.entries()) {
                if (data.init) {
                    data.init(data.state);
                }
                const autoCompleter = data.autoCompleter;
                registerWhisperCommand("commands", command, data.shortDescription != null ? `${data.helpDescription} - ${dictionaryProcess(data.shortDescription, {})}` : data.helpDescription, (argv, sender, respond) => {
                    if (!sender.isPlayer() || !data.playerUsable) {
                        if (!moduleIsEnabled(ModuleCategory.Commands) ||
                            !ConditionsCheckAccess("commands", command, sender)) {
                            respond(COMMAND_GENERIC_ERROR);
                            return;
                        }
                    }
                    data.trigger(argv, sender, respond, data.state);
                }, autoCompleter ? (argv, sender) => {
                    if (!sender.isPlayer() || !data.playerUsable) {
                        if (!moduleIsEnabled(ModuleCategory.Commands) ||
                            !ConditionsCheckAccess("commands", command, sender)) {
                            return [];
                        }
                    }
                    return autoCompleter(argv, sender);
                } : undefined, !!data.playerUsable);
            }
        }
        load() {
            if (!moduleIsEnabled(ModuleCategory.Commands)) {
                return;
            }
            for (const command of commands.values()) {
                if (command.load) {
                    command.load(command.state);
                }
            }
        }
        run() {
            if (!moduleIsEnabled(ModuleCategory.Commands))
                return;
            this.resetTimer = BCX_setInterval(() => {
                this.triggerCounts.clear();
            }, COMMANDS_ANTILOOP_RESET_INTERVAL);
        }
        unload() {
            if (this.resetTimer !== null) {
                clearInterval(this.resetTimer);
                this.resetTimer = null;
            }
            for (const command of commands.values()) {
                if (command.unload) {
                    command.unload();
                }
            }
        }
        reload() {
            this.unload();
            this.load();
            this.run();
        }
        commandTick(command, condition) {
            var _a;
            if (this.suspendedUntil !== null) {
                if (Date.now() >= this.suspendedUntil) {
                    this.suspendedUntil = null;
                    this.triggerCounts.clear();
                    ChatRoomActionMessage(`All of SourceCharacter's temporarily blocked commands can be used again.`, null, [
                        { Tag: "SourceCharacter", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                    ]);
                }
                else {
                    return;
                }
            }
            const commandDefinition = commands.get(command);
            if (!commandDefinition) {
                throw new Error(`Definition for command ${command} not found`);
            }
            if (commandDefinition.tick) {
                if (commandDefinition.tick(commandDefinition.state)) {
                    const counter = ((_a = this.triggerCounts.get(command)) !== null && _a !== void 0 ? _a : 0) + 1;
                    this.triggerCounts.set(command, counter);
                    if (counter >= COMMANDS_ANTILOOP_THRESHOLD) {
                        ChatRoomActionMessage("Protection triggered: Commands have been blocked for 10 minutes. Please refrain from using commands so rapidly, as it creates strain on the server and may lead to unwanted side effects! If you believe this message was triggered by a bug, please report it to BCX Discord.");
                        this.suspendedUntil = Date.now() + COMMANDS_ANTILOOP_SUSPEND_TIME;
                    }
                }
            }
        }
    }

    class GuiCommandsModuleViewDetails extends GuiSubscreen {
        constructor(character, back, command) {
            super();
            this.character = character;
            this.back = back;
            this.command = command;
            this.commandDefinition = CommandsGetDisplayDefinition(command);
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.Exit();
            }
        }
        Run() {
            MainCanvas.textAlign = "left";
            DrawText(`- Commands: Description of the command: "${this.commandDefinition.name}" -`, 125, 125, "Black", "Gray");
            BCXDrawTextWrap(dictionaryProcess(this.commandDefinition.longDescription, {
                PLAYER_NAME: this.character.Name,
                HELP_DESCRIPTION: this.commandDefinition.helpDescription,
            }), 125, 220, 1750, 500, "Black");
            MainCanvas.textAlign = "center";
            DrawButton(900, 800, 200, 80, "Back", "White");
        }
        Click() {
            if (MouseIn(900, 800, 200, 80)) {
                this.Exit();
            }
        }
        Exit() {
            setSubscreen(this.back);
        }
    }

    const PER_PAGE_COUNT = 6;
    let alphabeticalSort = false;
    let availabilitySort = false;
    class GuiCommandsModule extends GuiSubscreen {
        constructor(character) {
            super();
            this.commandsData = null;
            this.failed = false;
            this.permissionMode = false;
            this.commandList = [];
            this.page = 0;
            this.showHelp = false;
            this.filterInput = createInputElement("text", 30);
            this.character = character;
            this.filterInput.addEventListener("input", ev => {
                this.rebuildList();
            });
        }
        Load() {
            this.requestData();
        }
        onChange(sender) {
            if (sender === this.character.MemberNumber) {
                this.requestData();
            }
        }
        requestData() {
            this.character.conditionsGetByCategory("commands").then(res => {
                this.commandsData = res;
                if (!this.commandsData.access_changeLimits) {
                    this.permissionMode = false;
                }
                this.failed = false;
                this.rebuildList();
            }, err => {
                console.error(`BCX: Failed to get commands info for ${this.character}`, err);
                this.commandsData = null;
                this.failed = true;
                this.rebuildList();
            });
        }
        rebuildList() {
            if (!this.active)
                return;
            this.commandList = [];
            if (this.commandsData === null) {
                this.filterInput.remove();
                return;
            }
            if (!this.filterInput.parentElement) {
                document.body.appendChild(this.filterInput);
            }
            const filter = this.filterInput.value.trim().toLocaleLowerCase().split(" ").filter(Boolean);
            for (const entry of CommandsGetList()) {
                if (filter.some(i => {
                    var _a;
                    return !entry[0].toLocaleLowerCase().includes(i) &&
                        !entry[1].name.toLocaleLowerCase().includes(i) &&
                        !((_a = entry[1].shortDescription) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase().includes(i));
                }))
                    continue;
                this.commandList.push({
                    name: entry[0],
                    definition: entry[1],
                });
            }
            const data = this.commandsData;
            if (alphabeticalSort) {
                this.commandList.sort((a, b) => a.definition.name.localeCompare(b.definition.name));
            }
            if (availabilitySort) {
                this.commandList.sort((a, b) => (((this.HasAccess(b) ? 1 : 0) -
                    (this.HasAccess(a) ? 1 : 0)) ||
                    ((data.conditions[a.name] ? 1 : 0) -
                        (data.conditions[b.name] ? 1 : 0))));
            }
            const totalPages = Math.ceil(this.commandList.length / PER_PAGE_COUNT);
            if (this.page < 0) {
                this.page = Math.max(totalPages - 1, 0);
            }
            else if (this.page >= totalPages) {
                this.page = 0;
            }
        }
        Run() {
            var _a;
            MainCanvas.textAlign = "left";
            DrawText(`- Commands: List all commands for ${this.character.Name} -`, 125, 125, "Black", "Gray");
            MainCanvas.textAlign = "center";
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png", "BCX main menu");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png");
            if (this.commandsData === null) {
                DrawText(this.failed ? `Failed to get commands data from ${this.character.Name}. Maybe you have no access?` : "Loading...", 1000, 480, "Black");
                return;
            }
            DrawButton(1815, 305, 90, 90, "", this.commandsData.access_changeLimits ? "White" : "#ddd", this.permissionMode ? "Icons/Reset.png" : "Icons/Preference.png", this.commandsData.access_changeLimits ?
                (this.permissionMode ? "Leave permission mode" : "Edit commands permissions") :
                "You have no permission to change limits", !this.commandsData.access_changeLimits);
            MainCanvas.textAlign = "left";
            DrawText("Filter:", 130, 215, "Black");
            positionElement(this.filterInput, 550, 210, 600, 64);
            MainCanvas.textAlign = "center";
            if (this.filterInput.value) {
                DrawButton(870, 182, 64, 64, "X", "White");
            }
            DrawButton(1483, 182, 64, 64, "", "White", undefined, "Toggle availability-based sorting");
            DrawImageEx("Icons/LockMenu.png", 1483 + 3, 182 + 3, { Alpha: availabilitySort ? 1 : 0.2, Width: 58, Height: 58 });
            DrawButton(1583, 182, 64, 64, "", "white", undefined, "Toggle alphabetical sorting");
            DrawTextFit("A-Z", 1583 + 32, 182 + 32 + 1, 64 - 4, alphabeticalSort ? "black" : "#bbb");
            MainCanvas.textAlign = "left";
            for (let off = 0; off < PER_PAGE_COUNT; off++) {
                const i = this.page * PER_PAGE_COUNT + off;
                if (i >= this.commandList.length)
                    break;
                const e = this.commandList[i];
                if (e === null)
                    continue;
                const Y = 275 + off * 100;
                const accessLevel = (_a = this.commandsData.limits[e.name]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
                const allowAccess = this.HasAccess(e);
                let color;
                let text;
                if (this.permissionMode) {
                    color = ["#50ff56", "#f6fe78", "#ffa7a7"][accessLevel];
                    text = ["Normal", "Limited", "Blocked"][accessLevel];
                }
                else {
                    color = !allowAccess ? "#ccc" : "White";
                    text = !allowAccess ? "You don't have permission to use this rule" : "";
                }
                DrawButton(130, Y, 1350, 64, "", color, "", "", this.permissionMode);
                let description = e.definition.name;
                if (e.definition.shortDescription) {
                    description += ` (${dictionaryProcess(e.definition.shortDescription, { PLAYER_NAME: this.character.Name })})`;
                }
                DrawTextFit(description, 140, Y + 34, 1340, "Black");
                if (MouseIn(130, Y, 1350, 64)) {
                    DrawHoverElements.push(() => {
                        DrawButtonHover(1200, Y, 60, 60, text);
                    });
                }
            }
            const totalPages = Math.max(1, Math.ceil(this.commandList.length / PER_PAGE_COUNT));
            MainCanvas.textAlign = "center";
            DrawBackNextButton(1605, 800, 300, 90, `${DialogFindPlayer("Page")} ${this.page + 1} / ${totalPages}`, "White", "", () => "", () => "");
            if (this.permissionMode) {
                MainCanvas.fillStyle = "#50ff56";
                MainCanvas.fillRect(1739, 574, 166, 64);
                MainCanvas.fillStyle = "#f6fe78";
                MainCanvas.fillRect(1739, 638, 166, 64);
                MainCanvas.fillStyle = "#ffa7a7";
                MainCanvas.fillRect(1739, 702, 166, 64);
                MainCanvas.textAlign = "center";
                DrawText(`Normal`, 1739 + 166 / 2, 574 + 34, "Black");
                DrawText(`Limited`, 1739 + 166 / 2, 638 + 34, "Black");
                DrawText(`Blocked`, 1739 + 166 / 2, 702 + 34, "Black");
            }
            if (this.showHelp) {
                showHelp(HELP_TEXTS[this.permissionMode ? Views.CommandsPermissionMode : Views.Commands]);
            }
        }
        Click() {
            var _a;
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                this.showHelp = !this.showHelp;
                return;
            }
            if (this.commandsData === null)
                return;
            if (MouseIn(1815, 305, 90, 90)) {
                this.permissionMode = this.commandsData.access_changeLimits && !this.permissionMode;
                return;
            }
            if (MouseIn(870, 182, 64, 64)) {
                this.filterInput.value = "";
                this.rebuildList();
            }
            if (MouseIn(1483, 182, 64, 64)) {
                availabilitySort = !availabilitySort;
                this.rebuildList();
            }
            if (MouseIn(1583, 182, 64, 64)) {
                alphabeticalSort = !alphabeticalSort;
                this.rebuildList();
            }
            for (let off = 0; off < PER_PAGE_COUNT; off++) {
                const i = this.page * PER_PAGE_COUNT + off;
                if (i >= this.commandList.length)
                    break;
                const e = this.commandList[i];
                if (e === null)
                    continue;
                const Y = 275 + off * 100;
                const accessLevel = (_a = this.commandsData.limits[e.name]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
                if (MouseIn(130, Y, 1350, 64)) {
                    const commandName = e.name;
                    if (this.permissionMode) {
                        this.character.conditionSetLimit("commands", e.name, (accessLevel + 1) % 3);
                    }
                    else {
                        setSubscreen(new GuiCommandsModuleViewDetails(this.character, this, commandName));
                    }
                    return;
                }
            }
            const totalPages = Math.ceil(this.commandList.length / PER_PAGE_COUNT);
            if (MouseIn(1605, 800, 150, 90)) {
                this.page--;
                if (this.page < 0) {
                    this.page = Math.max(totalPages - 1, 0);
                }
            }
            else if (MouseIn(1755, 800, 150, 90)) {
                this.page++;
                if (this.page >= totalPages) {
                    this.page = 0;
                }
            }
        }
        HasAccess(item) {
            var _a;
            if (!this.commandsData) {
                throw new Error(`BCX: Commands data was unexpectedly 'null'`);
            }
            const accessLevel = (_a = this.commandsData.limits[item.name]) !== null && _a !== void 0 ? _a : ConditionsLimit.normal;
            return [this.commandsData.access_normal, this.commandsData.access_limited, false][accessLevel];
        }
        Exit() {
            setSubscreen(new GuiMainMenu(this.character));
        }
        Unload() {
            this.filterInput.remove();
        }
    }

    const MAIN_MENU_ITEMS = [
        {
            module: ModuleCategory.Global,
            onclick: (C) => {
                setSubscreen(new GuiGlobal(C));
            },
        },
        {
            module: ModuleCategory.Authority,
            onclick: (C) => {
                setSubscreen(new GuiAuthorityRoles(C));
            },
        },
        {
            module: ModuleCategory.Log,
            onclick: (C) => {
                setSubscreen(new GuiLog(C));
            },
        },
        {
            module: ModuleCategory.Curses,
            onclick: (C) => {
                setSubscreen(new GuiConditionViewCurses(C));
            },
        },
        {
            module: ModuleCategory.Rules,
            onclick: (C) => {
                setSubscreen(new GuiConditionViewRules(C));
            },
        },
        {
            module: ModuleCategory.Commands,
            onclick: (C) => {
                setSubscreen(new GuiCommandsModule(C));
            },
        },
        {
            module: ModuleCategory.Relationships,
            onclick: (C) => {
                setSubscreen(new GuiRelationships(C));
            },
        },
        {
            module: ModuleCategory.ExportImport,
            onclick: (C) => {
                setSubscreen(new GuiExportImportMain(C));
            },
        },
        {
            module: ModuleCategory.Misc,
            onclick: (C) => {
                setSubscreen(new GuiMisc(C));
            },
        },
    ];
    class GuiMainMenu extends GuiSubscreen {
        constructor(character) {
            super();
            this.disabledModules = TOGGLEABLE_MODULES;
            this.character = character;
        }
        Load() {
            this.character.getDisabledModules(5000).then(data => {
                this.disabledModules = data;
            }).catch(e => {
                this.disabledModules = [];
                console.error(`BCX: error getting disabled modules`, e);
            });
        }
        onChange(source) {
            if (source === this.character.MemberNumber) {
                this.Load();
            }
        }
        Run() {
            var _a;
            let heartSteps;
            DrawText("- Bondage Club Extended -", 125, 125, "Black", "Gray");
            DrawButton(1815, 75, 90, 90, "", "White", "Icons/Exit.png");
            DrawButton(1815, 190, 90, 90, "", "White", "Icons/Question.png", "Show the BCX tutorial again");
            if (this.character.supporterStatus === "supporter") {
                DrawText("BCX Supporter", 690, 125, "#DAA520", "#FFD700");
                heartSteps = [
                    [0.7, "#fff3b3"],
                    [0.75, "#ffef99"],
                    [0.8, "#ffeb80"],
                    [0.85, "#ffe766"],
                    [0.9, "#ffe34d"],
                    [0.95, "#ffdf33"],
                    [1, "#ffdb19"],
                    [1, "#FFD700"],
                    [1, "#FFD700"],
                    [1, "#FFD700"],
                    [1, "#FFD700"],
                ];
            }
            else if (this.character.supporterStatus === "developer") {
                DrawText("BCX Developer", 690, 125, "#6e6eff", "Black");
                heartSteps = [
                    [1, "#37377f"],
                    [1, "#424299"],
                    [1, "#4d4db2"],
                    [1, "#5858cc"],
                    [1, "#6363e5"],
                    [1, "#6e6eff"],
                    [1, "#6e6eff"],
                    [1, "#6e6eff"],
                    [1, "#6e6eff"],
                ];
            }
            if (this.character.supporterStatus !== undefined && heartSteps) {
                const heartTick = Math.floor((Date.now() / 60) % (2 * heartSteps.length));
                const heartStep = heartSteps[(heartTick < heartSteps.length) ? heartTick : (2 * heartSteps.length - 1 - heartTick)];
                drawIcon(MainCanvas, icon_heart, 630, 100, 50, 50, 50, heartStep[0], 4, heartStep[1]);
            }
            if (this.character.isPlayer() && modStorage.menuShouldDisplayTutorialHelp) {
                MainCanvas.beginPath();
                MainCanvas.rect(950, 190, 850, 90);
                MainCanvas.fillStyle = "Black";
                MainCanvas.fill();
                DrawText(`New advanced tutorial pages are now available ►`, 980, 190 + 45, "White");
            }
            for (let i = 0; i < MAIN_MENU_ITEMS.length; i++) {
                const e = MAIN_MENU_ITEMS[i];
                const PX = Math.floor(i / 6);
                const PY = i % 6;
                const isDisabled = this.disabledModules.includes(e.module);
                DrawButton(150 + 430 * PX, 190 + 120 * PY, 400, 90, "", isDisabled ? "#ddd" : "White", MODULE_ICONS[e.module], isDisabled ? "Module is deactivated" : "", isDisabled);
                DrawTextFit(MODULE_NAMES[e.module], 250 + 430 * PX, 235 + 120 * PY, 310, "Black");
            }
            MainCanvas.textAlign = "center";
            if (this.character.isPlayer()) {
                DrawText(`Your BCX version: ${VERSION$1.replace(/-[0-f]+$/i, "")}`, 1450 + 400 / 2, 500, "Black", "");
                DrawButton(1450, 590, 400, 90, "", "White", "", "Open changelog on GitHub");
                if (versionCheckNewAvailable === true) {
                    const tick = Date.now() % 6000;
                    if (tick < 3000) {
                        DrawText(`New version available`, 1450 + 400 / 2, 555, "Red", "Black");
                    }
                    else {
                        DrawText(`Login again to upgrade`, 1450 + 400 / 2, 555, "Red", "Black");
                    }
                }
                else if (versionCheckNewAvailable === false) {
                    DrawText(`This is the latest version`, 1450 + 400 / 2, 555, "Black", "");
                }
                DrawText(`View changelog`, 1450 + 350 / 2, 635, "Black", "");
                DrawImageEx(icon_ExternalLink, 1770, 620, { Width: 30, Height: 30 });
                DrawButton(1450, 700, 400, 90, "", "White", "", "For saying 'thank you' with a tip");
                MainCanvas.textAlign = "left";
                DrawText(`BCX Patreon`, 1450 + 90, 745, "Black", "");
                drawIcon(MainCanvas, icon_patreon, 1450 + 10, 693 + 17, 70, 70, 180, 1, 0, "Black", "");
                DrawImageEx(icon_ExternalLink, 1770, 730, { Width: 30, Height: 30 });
                DrawButton(1450, 810, 400, 90, "", "White", "", "Open invite to BCX Discord server");
                DrawText(`BCX Discord`, 1455 + 90, 855, "Black", "");
                drawIcon(MainCanvas, icon_discord, 1450 + 10, 810 + 17, 1, 1, 1, 1, 0, "#5865F2", "");
                DrawImageEx(icon_ExternalLink, 1770, 840, { Width: 30, Height: 30 });
                MainCanvas.textAlign = "center";
            }
            else {
                DrawText(`Your BCX version: ${VERSION$1.replace(/-[0-f]+$/i, "")}`, 1450 + 400 / 2, 765, "Black", "");
                DrawText(`${this.character.Name}'s BCX version: ${(_a = this.character.BCXVersion) === null || _a === void 0 ? void 0 : _a.replace(/-[0-f]+$/i, "")}`, 1450 + 400 / 2, 845, "Black", "");
            }
        }
        Click() {
            if (MouseIn(1815, 75, 90, 90))
                return this.Exit();
            if (MouseIn(1815, 190, 90, 90)) {
                if (modStorage.menuShouldDisplayTutorialHelp) {
                    delete modStorage.menuShouldDisplayTutorialHelp;
                    modStorageSync();
                }
                setSubscreen(new GuiTutorial(this.character, false));
            }
            if (MouseIn(1450, 590, 400, 90) && this.character.isPlayer()) {
                window.open(`https://github.com/Jomshir98/bondage-club-extended/blob/${BCX_DEVEL ? "master" : "stable"}/CHANGELOG.md`, "_blank");
            }
            if (MouseIn(1450, 700, 400, 90) && this.character.isPlayer()) {
                window.open(`https://patreon.com/Jomshir98`, "_blank");
            }
            if (MouseIn(1450, 810, 400, 90) && this.character.isPlayer()) {
                window.open("https://discord.gg/SHJMjEh9VH", "_blank");
            }
            for (let i = 0; i < MAIN_MENU_ITEMS.length; i++) {
                const e = MAIN_MENU_ITEMS[i];
                const PX = Math.floor(i / 6);
                const PY = i % 6;
                if (MouseIn(150 + 430 * PX, 190 + 120 * PY, 400, 90) && !this.disabledModules.includes(e.module)) {
                    return e.onclick(this.character);
                }
            }
        }
    }

    function getCurrentSubscreen() {
        return ModuleGUI.instance && ModuleGUI.instance.currentSubscreen;
    }
    function setSubscreen(subscreen) {
        if (!ModuleGUI.instance) {
            throw new Error("Attempt to set subscreen before init");
        }
        ModuleGUI.instance.currentSubscreen = subscreen;
    }
    class ModuleGUI extends BaseModule {
        get currentSubscreen() {
            return this._currentSubscreen;
        }
        set currentSubscreen(subscreen) {
            if (this._currentSubscreen) {
                this._currentSubscreen.Unload();
            }
            this._currentSubscreen = subscreen;
            if (this._currentSubscreen) {
                this._currentSubscreen.Load();
            }
            ChatroomSM.UpdateStatus();
        }
        constructor() {
            super();
            this._currentSubscreen = null;
            if (ModuleGUI.instance) {
                throw new Error("Duplicate initialization");
            }
            ModuleGUI.instance = this;
        }
        getInformationSheetCharacter() {
            const C = InformationSheetSelection;
            if (!C || typeof C.MemberNumber !== "number")
                return null;
            return getChatroomCharacter(C.MemberNumber);
        }
        init() {
            changeHandlers.push(source => {
                if (this._currentSubscreen) {
                    this._currentSubscreen.onChange(source);
                }
            });
        }
        load() {
            patchFunction("InformationSheetRun", {
                "DrawButton(1815, 765, 90, 90,": "DrawButton(1815, 800, 90, 90,",
            });
            patchFunction("InformationSheetClick", {
                "MouseIn(1815, 765, 90, 90)": "MouseIn(1815, 800, 90, 90)",
            });
            hookFunction("InformationSheetRun", 10, (args, next) => {
                if (this._currentSubscreen) {
                    MainCanvas.textAlign = "left";
                    this._currentSubscreen.Run();
                    MainCanvas.textAlign = "center";
                    if (developmentMode) {
                        if (MouseX > 0 || MouseY > 0) {
                            MainCanvas.save();
                            MainCanvas.lineWidth = 1;
                            MainCanvas.strokeStyle = "red";
                            MainCanvas.beginPath();
                            MainCanvas.moveTo(0, MouseY);
                            MainCanvas.lineTo(2000, MouseY);
                            MainCanvas.moveTo(MouseX, 0);
                            MainCanvas.lineTo(MouseX, 1000);
                            MainCanvas.stroke();
                            MainCanvas.fillStyle = "black";
                            MainCanvas.strokeStyle = "white";
                            MainCanvas.fillRect(0, 950, 250, 50);
                            MainCanvas.strokeRect(0, 950, 250, 50);
                            DrawText(`X: ${MouseX} Y: ${MouseY}`, 125, 975, "white");
                            MainCanvas.restore();
                        }
                    }
                    return;
                }
                next(args);
                const C = this.getInformationSheetCharacter();
                if (firstTimeInit) {
                    if (C && C.isPlayer()) {
                        DrawButton(1815, 685, 90, 90, "", "White", icon_BCX);
                        MainCanvas.beginPath();
                        MainCanvas.rect(1300, 685, 500, 90);
                        MainCanvas.fillStyle = "Black";
                        MainCanvas.fill();
                        DrawText(`You can find BCX here ►`, 1550, 685 + 45, "White");
                    }
                }
                else if (C && C.BCXVersion !== null) {
                    const playerHasAccessToCharacter = C.playerHasAccessToCharacter();
                    DrawButton(1815, 685, 90, 90, "", playerHasAccessToCharacter ? "White" : "#ddd", icon_BCX, playerHasAccessToCharacter ? "BCX" : "Needs BC item permission", !playerHasAccessToCharacter);
                }
            });
            hookFunction("InformationSheetClick", 10, (args, next) => {
                if (this._currentSubscreen) {
                    return this._currentSubscreen.Click();
                }
                const C = this.getInformationSheetCharacter();
                if (MouseIn(1815, 685, 90, 90)) {
                    if (firstTimeInit) {
                        if (C && C.isPlayer()) {
                            ServerBeep = { Message: "", Timer: 0 };
                            this.currentSubscreen = new GuiTutorial(C, true);
                        }
                    }
                    else if (C && C.BCXVersion !== null && C.playerHasAccessToCharacter()) {
                        this.currentSubscreen = new GuiMainMenu(C);
                    }
                }
                else {
                    return next(args);
                }
            });
            hookFunction("InformationSheetExit", 10, (args, next) => {
                if (this._currentSubscreen) {
                    return this._currentSubscreen.Exit();
                }
                return next(args);
            });
        }
        unload() {
            this.currentSubscreen = null;
        }
    }
    ModuleGUI.instance = null;

    var ChatRoomStatusManagerStatusType;
    (function (ChatRoomStatusManagerStatusType) {
        ChatRoomStatusManagerStatusType["None"] = "None";
        ChatRoomStatusManagerStatusType["Typing"] = "Typing";
        ChatRoomStatusManagerStatusType["Emote"] = "Emote";
        ChatRoomStatusManagerStatusType["Whisper"] = "Whisper";
        ChatRoomStatusManagerStatusType["DMS1"] = "DMS1";
        ChatRoomStatusManagerStatusType["DMS2"] = "DMS2";
        ChatRoomStatusManagerStatusType["Color"] = "Color";
        ChatRoomStatusManagerStatusType["Wardrobe"] = "Wardrobe";
        ChatRoomStatusManagerStatusType["Profile"] = "Profile";
        ChatRoomStatusManagerStatusType["Action"] = "Action";
        ChatRoomStatusManagerStatusType["Afk"] = "Afk";
    })(ChatRoomStatusManagerStatusType || (ChatRoomStatusManagerStatusType = {}));
    const CharacterStatuses = new WeakMap();
    class ChatRoomStatusManager {
        constructor() {
            this.InputTimeoutMs = 3000;
            this.StatusTypes = {};
            this.InputElement = null;
            this.InputTimeout = null;
            this.Status = ChatRoomStatusManagerStatusType.None;
            this.StatusTarget = null;
            this.DMS = 0;
            this.DMSUnlock = false;
            this.TypingStatus = ChatRoomStatusManagerStatusType.None;
            this.WhisperTarget = null;
        }
        GetCharacterStatus(C) {
            return C.ID === 0 ? ChatroomSM.Status : CharacterStatuses.get(C);
        }
        SetInputElement(elem) {
            if (this.InputElement !== elem) {
                this.InputElement = elem;
                if (elem !== null) {
                    elem.addEventListener("blur", this.InputEnd.bind(this));
                    elem.addEventListener("input", this.InputChange.bind(this));
                }
            }
        }
        GetStatus() {
            if (this.DMS === 2) {
                this.DMSUnlock = true;
                return ChatRoomStatusManagerStatusType.DMS2;
            }
            if (this.DMS === 1 && this.DMSUnlock)
                return ChatRoomStatusManagerStatusType.DMS1;
            if (modStorage.screenIndicatorEnable) {
                if (CurrentScreen === "Appearance")
                    return ChatRoomStatusManagerStatusType.Wardrobe;
                if (CurrentScreen === "OnlineProfile" || getCurrentSubscreen() != null)
                    return ChatRoomStatusManagerStatusType.Profile;
                if (ItemColorItem != null)
                    return ChatRoomStatusManagerStatusType.Color;
            }
            if (modStorage.typingIndicatorEnable)
                return this.TypingStatus;
            return ChatRoomStatusManagerStatusType.None;
        }
        UpdateStatus() {
            const oldStatus = this.Status;
            const oldStatusTarget = this.StatusTarget;
            this.Status = this.GetStatus();
            this.StatusTarget = this.Status === ChatRoomStatusManagerStatusType.Whisper ? this.WhisperTarget : null;
            if (this.Status !== oldStatus || this.StatusTarget !== oldStatusTarget) {
                if (this.StatusTarget !== oldStatusTarget && oldStatus !== ChatRoomStatusManagerStatusType.None) {
                    this.SendUpdate(ChatRoomStatusManagerStatusType.None, oldStatusTarget);
                    if (this.Status === ChatRoomStatusManagerStatusType.None)
                        return;
                }
                this.SendUpdate(this.Status, this.StatusTarget);
            }
        }
        SendUpdate(type, target = null) {
            sendHiddenMessage("ChatRoomStatusEvent", { Type: type, Target: target }, target);
            const NMod = isNModClient();
            if (NMod)
                ServerSend("ChatRoomStatusEvent", { Type: type, Target: target });
        }
        InputChange() {
            var _a;
            const value = (_a = this.InputElement) === null || _a === void 0 ? void 0 : _a.value;
            if (typeof value === "string" && value.length > 1) {
                this.TypingStatus = ChatRoomStatusManagerStatusType.Typing;
                this.WhisperTarget = null;
                if (value.startsWith("*") || value.startsWith("/me ") || value.startsWith("/emote ") || value.startsWith("/action ")) {
                    this.TypingStatus = ChatRoomStatusManagerStatusType.Emote;
                }
                else if ((value.startsWith("/") && !value.startsWith("//")) ||
                    (value.startsWith(".") && !value.startsWith(".."))) {
                    return this.InputEnd();
                }
                else if (ChatRoomTargetMemberNumber !== null) {
                    this.TypingStatus = ChatRoomStatusManagerStatusType.Whisper;
                    this.WhisperTarget = ChatRoomTargetMemberNumber;
                }
                if (this.InputTimeout !== null) {
                    clearTimeout(this.InputTimeout);
                }
                this.InputTimeout = BCX_setTimeout(this.InputEnd.bind(this), this.InputTimeoutMs);
                this.UpdateStatus();
            }
            else {
                this.InputEnd();
            }
        }
        InputEnd() {
            if (this.InputTimeout !== null) {
                clearTimeout(this.InputTimeout);
                this.InputTimeout = null;
            }
            this.TypingStatus = ChatRoomStatusManagerStatusType.None;
            this.UpdateStatus();
        }
        unload() {
            this.DMS = 0;
            this.InputEnd();
        }
    }
    function DMSKeydown(ev) {
        if (ev.altKey && ev.code === "NumpadEnter") {
            ev.preventDefault();
            ev.stopImmediatePropagation();
            if (document.activeElement instanceof HTMLElement) {
                document.activeElement.blur();
            }
            ChatroomSM.DMS = 2;
            ChatroomSM.UpdateStatus();
        }
        else if (ev.altKey && ChatroomSM.DMS === 0) {
            ChatroomSM.DMS = 1;
            ChatroomSM.UpdateStatus();
        }
    }
    function DMSKeyup(ev) {
        if (ChatroomSM.DMS > 0 && (ev.key === "Alt" || ev.code === "NumpadEnter")) {
            ev.preventDefault();
            ev.stopImmediatePropagation();
            ChatroomSM.DMS = ev.altKey ? 1 : 0;
            ChatroomSM.UpdateStatus();
        }
    }
    function DMSBlur() {
        if (ChatroomSM.DMS > 0) {
            ChatroomSM.DMS = 0;
            ChatroomSM.UpdateStatus();
        }
    }
    let ChatroomSM;
    function queryAnnounce() {
        announceSelf(true);
    }
    class ModuleChatroom extends BaseModule {
        constructor() {
            super(...arguments);
            this.o_ChatRoomSM = null;
        }
        init() {
            ChatroomSM = new ChatRoomStatusManager();
        }
        load() {
            if (typeof modStorage.typingIndicatorEnable !== "boolean") {
                modStorage.typingIndicatorEnable = true;
            }
            if (typeof modStorage.typingIndicatorHideBC !== "boolean") {
                modStorage.typingIndicatorHideBC = true;
            }
            if (typeof modStorage.screenIndicatorEnable !== "boolean") {
                modStorage.screenIndicatorEnable = true;
            }
            hiddenMessageHandlers.set("hello", (sender, message) => {
                const char = getChatroomCharacter(sender);
                if (!char) {
                    console.warn(`BCX: Hello from character not found in room`, sender);
                    return;
                }
                if (typeof (message === null || message === void 0 ? void 0 : message.version) !== "string" ||
                    (message.supporterStatus !== undefined && typeof message.supporterStatus !== "string") ||
                    (message.supporterSecret !== undefined && typeof message.supporterSecret !== "string")) {
                    console.warn(`BCX: Invalid hello`, sender, message);
                    return;
                }
                char.BCXVersion = message.version;
                const effects = isObject$1(message.effects) ? message.effects : {};
                char.Effects = cloneDeep(defaultBCXEffects);
                if (Array.isArray(effects.Effect) && effects.Effect.every(i => typeof i === "string")) {
                    char.Effects.Effect = effects.Effect;
                }
                CharacterRefresh(char.Character, false);
                if (typeof message.typingIndicatorEnable === "boolean") {
                    char.typingIndicatorEnable = message.typingIndicatorEnable;
                }
                if (typeof message.screenIndicatorEnable === "boolean") {
                    char.screenIndicatorEnable = message.screenIndicatorEnable;
                }
                updateOtherSupporterStatus(sender, message.supporterStatus, message.supporterSecret);
                if (message.request === true) {
                    announceSelf(false);
                }
            });
            hiddenMessageHandlers.set("goodbye", (sender) => {
                const char = getChatroomCharacter(sender);
                if (char) {
                    char.BCXVersion = null;
                    char.Effects = cloneDeep(defaultBCXEffects);
                    CharacterRefresh(char.Character, false);
                }
            });
            hookFunction("ChatRoomMessage", 10, (args, next) => {
                const data = args[0];
                if ((data === null || data === void 0 ? void 0 : data.Type) === "Action" && data.Content === "ServerEnter") {
                    announceSelf(false);
                }
                return next(args);
            });
            patchFunction("ChatRoomDrawCharacterOverlay", {
                'DrawImageResize("Icons/Small/Admin.png", CharX + 390 * Zoom, CharY, 40 * Zoom, 40 * Zoom);': 'DrawImageResize("Icons/Small/Admin.png", CharX + 400 * Zoom, CharY, 40 * Zoom, 40 * Zoom);',
            });
            hookFunction("ChatRoomDrawCharacterOverlay", 0, (args, next) => {
                var _a, _b;
                next(args);
                const [C, CharX, CharY, Zoom] = args;
                const Char = getChatroomCharacter(C.MemberNumber);
                const Friend = C.ID === 0 || ((_a = Player.FriendList) !== null && _a !== void 0 ? _a : []).includes(C.MemberNumber);
                const Ghosted = ((_b = Player.GhostList) !== null && _b !== void 0 ? _b : []).includes(C.MemberNumber);
                if ((Char === null || Char === void 0 ? void 0 : Char.BCXVersion) &&
                    !Ghosted &&
                    ChatRoomHideIconState === 0 &&
                    !modStorage.chatroomIconHidden) {
                    if (Friend) {
                        drawIcon(MainCanvas, icon_heart, CharX + 375 * Zoom, CharY + 5, 30 * Zoom, 30 * Zoom, 50, 0.7, 4, "#6e6eff");
                    }
                    else {
                        drawIcon(MainCanvas, icon_BCX_cross, CharX + 375 * Zoom, CharY + 5, 30 * Zoom, 30 * Zoom, 50, 0.5, 3, "#6e6eff");
                    }
                }
            });
            const NMod = isNModClient();
            if (!NMod) {
                hookFunction("ChatRoomCreateElement", 0, (args, next) => {
                    next(args);
                    ChatroomSM.SetInputElement(document.getElementById("InputChat"));
                });
            }
            hookFunction("ChatRoomDrawCharacterOverlay", 0, (args, next) => {
                next(args);
                if (ChatRoomHideIconState >= 2)
                    return;
                const [C, CharX, CharY, Zoom] = args;
                switch (ChatroomSM.GetCharacterStatus(C)) {
                    case ChatRoomStatusManagerStatusType.Typing:
                        drawTypingIndicatorSpeechBubble(MainCanvas, CharX + 375 * Zoom, CharY + 54 * Zoom, 50 * Zoom, 48 * Zoom, 1);
                        break;
                    case ChatRoomStatusManagerStatusType.Whisper:
                        drawTypingIndicatorSpeechBubble(MainCanvas, CharX + 375 * Zoom, CharY + 54 * Zoom, 50 * Zoom, 48 * Zoom, 0.5);
                        break;
                    case ChatRoomStatusManagerStatusType.Emote:
                        drawTypingIndicatorSpeechBubble(MainCanvas, CharX + 375 * Zoom, CharY + 54 * Zoom, 50 * Zoom, 48 * Zoom, 1, true);
                        break;
                    case ChatRoomStatusManagerStatusType.DMS1:
                        DrawRect(CharX + 380 * Zoom, CharY + 53 * Zoom, 40 * Zoom, 40 * Zoom, "White");
                        break;
                    case ChatRoomStatusManagerStatusType.DMS2:
                        DrawRect(CharX + 380 * Zoom, CharY + 53 * Zoom, 40 * Zoom, 40 * Zoom, "White");
                        DrawImageEx("Icons/Import.png", CharX + 375 * Zoom, CharY + 50 * Zoom, {
                            Width: 50 * Zoom,
                            Height: 50 * Zoom,
                        });
                        break;
                    case ChatRoomStatusManagerStatusType.Color:
                        DrawImageEx("Assets/Female3DCG/Emoticon/Spectator/Icon.png", CharX + 375 * Zoom, CharY + 50 * Zoom, {
                            Width: 50 * Zoom,
                            Height: 50 * Zoom,
                        });
                        DrawImageEx("Icons/ColorPick.png", CharX + 380 * Zoom, CharY + 51 * Zoom, {
                            Width: 40 * Zoom,
                            Height: 40 * Zoom,
                        });
                        break;
                    case ChatRoomStatusManagerStatusType.Wardrobe:
                        DrawImageEx("Assets/Female3DCG/Emoticon/Wardrobe/Icon.png", CharX + 375 * Zoom, CharY + 50 * Zoom, {
                            Width: 50 * Zoom,
                            Height: 50 * Zoom,
                        });
                        break;
                    case ChatRoomStatusManagerStatusType.Profile:
                        DrawImageEx("Assets/Female3DCG/Emoticon/Read/Icon.png", CharX + 375 * Zoom, CharY + 50 * Zoom, {
                            Width: 50 * Zoom,
                            Height: 50 * Zoom,
                        });
                        break;
                }
            });
            window.addEventListener("keydown", DMSKeydown);
            window.addEventListener("keyup", DMSKeyup);
            window.addEventListener("blur", DMSBlur);
            hookFunction("ChatRoomStatusUpdate", 10, (args, next) => {
                if (args[0] === "Talk") {
                    const text = ElementValue("InputChat");
                    if (text && text.startsWith(".") && !text.startsWith("..")) {
                        args[0] = null;
                    }
                }
                return next(args);
            });
            hookFunction("DrawStatus", 10, (args, next) => {
                const C = args[0];
                const char = getChatroomCharacter(C.MemberNumber);
                if ((char === null || char === void 0 ? void 0 : char.BCXVersion) != null &&
                    char.typingIndicatorEnable &&
                    modStorage.typingIndicatorHideBC &&
                    C.Status === "Talk") {
                    return;
                }
                if ((char === null || char === void 0 ? void 0 : char.BCXVersion) != null &&
                    char.screenIndicatorEnable &&
                    modStorage.typingIndicatorHideBC &&
                    C.Status === "Wardrobe") {
                    return;
                }
                return next(args);
            });
            hookFunction("ChatRoomSendChat", 0, (args, next) => {
                next(args);
                ChatroomSM.InputEnd();
            });
            hookFunction("ChatRoomClearAllElements", 0, (args, next) => {
                next(args);
                ChatroomSM.SetInputElement(null);
            });
            hookFunction("CommonSetScreen", 0, (args, next) => {
                next(args);
                ChatroomSM.UpdateStatus();
            });
            hookFunction("ItemColorStateBuild", 0, (args, next) => {
                next(args);
                ChatroomSM.UpdateStatus();
            });
            hookFunction("ItemColorReset", 0, (args, next) => {
                next(args);
                ChatroomSM.UpdateStatus();
            });
            hookFunction("ServerSend", 5, (args, next) => {
                if (modStorage.screenIndicatorEnable &&
                    args[0] === "ChatRoomCharacterExpressionUpdate" &&
                    isObject$1(args[1]) &&
                    args[1].Group === "Emoticon" &&
                    args[1].Name === "Wardrobe")
                    return;
                next(args);
            });
            hookFunction("ChatSearchLoad", 5, (args, next) => {
                next(args);
                const field = document.getElementById("InputSearch");
                if (field && modStorage.roomSearchAutoFill && ChatSearchMode === "") {
                    field.value = modStorage.roomSearchAutoFill;
                }
            });
            hiddenMessageHandlers.set("ChatRoomStatusEvent", (src, data) => {
                for (const char of ChatRoomCharacter) {
                    if (char.MemberNumber === src) {
                        CharacterStatuses.set(char, data.Target == null || data.Target === Player.MemberNumber ? data.Type : "None");
                    }
                }
            });
            if (NMod) {
                this.o_ChatRoomSM = window.ChatRoomSM;
                window.ChatRoomSM = ChatroomSM;
                ServerSocket.on("ChatRoomMessageSync", queryAnnounce);
            }
        }
        run() {
            if (document.getElementById("InputChat") != null) {
                ChatroomSM.SetInputElement(document.getElementById("InputChat"));
            }
            queryAnnounce();
        }
        unload() {
            ChatroomSM.unload();
            if (this.o_ChatRoomSM) {
                window.ChatRoomSM = this.o_ChatRoomSM;
            }
            ServerSocket.off("ChatRoomMessageSync", queryAnnounce);
            sendHiddenMessage("goodbye", undefined);
            window.removeEventListener("keydown", DMSKeydown);
            window.removeEventListener("keyup", DMSKeyup);
            window.removeEventListener("blur", DMSBlur);
        }
    }
    function announceSelf(request = false) {
        const player = getPlayerCharacter();
        const msg = {
            version: VERSION$1,
            request,
            effects: player.Effects,
            typingIndicatorEnable: modStorage.typingIndicatorEnable,
            screenIndicatorEnable: modStorage.screenIndicatorEnable,
        };
        if (supporterStatus && supporterSecret && !modStorage.supporterHidden) {
            msg.supporterStatus = supporterStatus;
            msg.supporterSecret = supporterSecret;
        }
        sendHiddenMessage("hello", msg);
    }

    var StorageLocations;
    (function (StorageLocations) {
        StorageLocations[StorageLocations["OnlineSettings"] = 0] = "OnlineSettings";
        StorageLocations[StorageLocations["LocalStorage"] = 1] = "LocalStorage";
    })(StorageLocations || (StorageLocations = {}));
    let modStorage = {};
    let deletionPending = false;
    let firstTimeInit = false;
    let modStorageLocation = StorageLocations.OnlineSettings;
    function finalizeFirstTimeInit() {
        if (!firstTimeInit)
            return;
        firstTimeInit = false;
        modStorage.chatShouldDisplayFirstTimeHelp = true;
        modStorageSync();
        console.log("BCX: First time init finalized");
        announceSelf(true);
    }
    function getLocalStorageName() {
        return `BCX_${Player.MemberNumber}`;
    }
    function getLocalStorageNameBackup() {
        return `BCX_${Player.MemberNumber}_backup`;
    }
    function storageClearData() {
        if (Player.OnlineSettings) {
            delete Player.OnlineSettings.BCX;
            Player.OnlineSettings.BCXDataCleared = Date.now();
        }
        localStorage.removeItem(getLocalStorageName());
        localStorage.removeItem(getLocalStorageNameBackup());
        ServerAccountUpdate.QueueData({ OnlineSettings: Player.OnlineSettings }, true);
    }
    function switchStorageLocation(location) {
        if (location !== StorageLocations.LocalStorage && location !== StorageLocations.OnlineSettings) {
            throw new Error(`Unknown storage location`);
        }
        if (modStorageLocation === location)
            return;
        console.info(`BCX: Switching storage location to: ${StorageLocations[location]}`);
        modStorageLocation = location;
        storageClearData();
        modStorageSync();
    }
    function modStorageSync() {
        if (moduleInitPhase !== ModuleInitPhase.ready && moduleInitPhase !== ModuleInitPhase.destroy)
            return;
        if (deletionPending || firstTimeInit)
            return;
        if (!Player.OnlineSettings) {
            console.error("BCX: Player OnlineSettings not defined during storage sync!");
            return;
        }
        const serializedData = LZString.compressToBase64(JSON.stringify(modStorage));
        try {
            if (typeof serializedData !== "string") {
                throw new Error("Data compression failed");
            }
            const checkParsedData = JSON.parse(LZString.decompressFromBase64(serializedData));
            if (!isMatch(modStorage, checkParsedData)) {
                console.warn("Current data:\n", modStorage, "\nSaved data:\n", checkParsedData);
                throw new Error("Saved data differs after load");
            }
        }
        catch (error) {
            reportManualError("Save data failed to validate!", error);
            return;
        }
        if (modStorageLocation === StorageLocations.OnlineSettings) {
            Player.OnlineSettings.BCX = serializedData;
            ServerAccountUpdate.QueueData({ OnlineSettings: Player.OnlineSettings });
        }
        else if (modStorageLocation === StorageLocations.LocalStorage) {
            localStorage.setItem(getLocalStorageName(), serializedData);
        }
        else {
            throw new Error(`Unknown StorageLocation`);
        }
        localStorage.setItem(getLocalStorageNameBackup(), serializedData);
    }
    function clearAllData() {
        deletionPending = true;
        storageClearData();
        sendHiddenBeep("clearData", true, VERSION_CHECK_BOT, true);
        BCX_setTimeout(() => {
            window.location.reload();
        }, 2000);
    }
    class ModuleStorage extends BaseModule {
        init() {
            let saved = null;
            saved = localStorage.getItem(getLocalStorageName());
            if (typeof saved === "string") {
                console.info(`BCX: Detected storage location: local storage`);
                modStorageLocation = StorageLocations.LocalStorage;
            }
            if (typeof saved !== "string") {
                if (!isObject$1(Player.OnlineSettings)) {
                    console.error("BCX: Missing OnlineSettings during load");
                    alert("BCX: Failed to load data, please see console for more details");
                    return false;
                }
                saved = Player.OnlineSettings.BCX;
                modStorageLocation = StorageLocations.OnlineSettings;
            }
            if (typeof saved !== "string") {
                const backupSave = localStorage.getItem(getLocalStorageNameBackup());
                if (typeof backupSave === "string" &&
                    confirm("BCX: Error loading saved data, but found local backup.\nDo you want to load the backup?")) {
                    saved = backupSave;
                }
            }
            if (typeof saved === "string") {
                try {
                    const storage = JSON.parse(LZString.decompressFromBase64(saved));
                    if (!isObject$1(storage)) {
                        throw new Error("Bad data");
                    }
                    modStorage = storage;
                }
                catch (error) {
                    console.error("BCX: Error while loading saved data, full reset.", error);
                    if (confirm(`BCX Failed to load saved data! Continue anyway, resetting all data?\n(${error})`)) {
                        firstTimeInit = true;
                    }
                    else {
                        return false;
                    }
                }
            }
            else if (saved !== undefined) {
                console.error("BCX: Unknown save data type:", saved);
                alert("BCX: Failed to load data, please see console for more details");
                return false;
            }
            else {
                console.log("BCX: First time init");
                firstTimeInit = true;
            }
            return true;
        }
        run() {
            modStorageSync();
        }
    }

    const hiddenMessageHandlers = new Map();
    const hiddenBeepHandlers = new Map();
    const queryHandlers = {};
    const changeHandlers = [];
    function sendHiddenMessage(type, message, Target = null) {
        if (!ServerPlayerIsInChatRoom() || firstTimeInit)
            return;
        ServerSend("ChatRoomChat", {
            Content: "BCXMsg",
            Type: "Hidden",
            Target,
            Dictionary: { type, message },
        });
    }
    function sendHiddenBeep(type, message, target, asLeashBeep = false) {
        ServerSend("AccountBeep", {
            MemberNumber: target,
            BeepType: asLeashBeep ? "Leash" : "BCX",
            Message: {
                BCX: { type, message },
            },
        });
    }
    const pendingQueries = new Map();
    function sendQuery(type, data, target, timeout = 10000) {
        if (firstTimeInit) {
            return Promise.reject("Unavailable during init");
        }
        return new Promise((resolve, reject) => {
            const id = uuidv4();
            const info = {
                target,
                resolve,
                reject,
                timeout: BCX_setTimeout(() => {
                    console.warn("BCX: Query timed out", target, type);
                    pendingQueries.delete(id);
                    reject("Timed out");
                }, timeout),
            };
            pendingQueries.set(id, info);
            const playerCharacter = getPlayerCharacter();
            if (target === playerCharacter.MemberNumber) {
                handleQuery(playerCharacter, cloneDeep({
                    id,
                    query: type,
                    data,
                }))
                    .then(result => {
                    handleQueryAnswer(playerCharacter.MemberNumber, result);
                }, error => {
                    handleQueryAnswer(playerCharacter.MemberNumber, {
                        id,
                        ok: false,
                        data: error,
                    });
                });
            }
            else {
                sendHiddenMessage("query", {
                    id,
                    query: type,
                    data,
                }, target);
            }
        });
    }
    async function handleQuery(sender, message) {
        const handler = queryHandlers[message.query];
        if (!handler) {
            console.warn("BCX: Query no handler", sender, message);
            return {
                id: message.id,
                ok: false,
            };
        }
        const result = await handler(sender, message.data);
        return {
            id: message.id,
            ok: result !== undefined,
            data: result,
        };
    }
    hiddenMessageHandlers.set("query", (sender, message) => {
        if (!isObject$1(message) ||
            typeof message.id !== "string" ||
            typeof message.query !== "string") {
            console.warn(`BCX: Invalid query`, sender, message);
            return;
        }
        const character = getChatroomCharacter(sender);
        if (!character || !character.hasAccessToPlayer()) {
            return sendHiddenMessage("queryAnswer", {
                id: message.id,
                ok: false,
            }, sender);
        }
        handleQuery(character, message)
            .then((result) => {
            sendHiddenMessage("queryAnswer", result, sender);
        }, error => {
            sendHiddenMessage("queryAnswer", {
                id: message.id,
                ok: false,
                data: String(error),
            }, sender);
        });
    });
    function handleQueryAnswer(sender, message) {
        const info = pendingQueries.get(message.id);
        if (!info) {
            console.warn(`BCX: Response to unknown query`, sender, message);
            return;
        }
        if (info.target !== info.target) {
            console.warn(`BCX: Response to query not from target`, sender, message, info);
            return;
        }
        clearTimeout(info.timeout);
        pendingQueries.delete(message.id);
        if (message.ok) {
            info.resolve(message.data);
        }
        else {
            info.reject(message.data);
        }
    }
    hiddenMessageHandlers.set("queryAnswer", (sender, message) => {
        if (!isObject$1(message) ||
            typeof message.id !== "string" ||
            typeof message.ok !== "boolean") {
            console.warn(`BCX: Invalid queryAnswer`, sender, message);
            return;
        }
        handleQueryAnswer(sender, message);
    });
    hiddenMessageHandlers.set("somethingChanged", (sender) => {
        changeHandlers.forEach(h => h(sender));
    });
    let changeTimer = null;
    function notifyOfChange() {
        if (moduleInitPhase !== ModuleInitPhase.ready)
            return;
        const player = getPlayerCharacter().MemberNumber;
        changeHandlers.forEach(h => h(player));
        if (changeTimer === null) {
            changeTimer = BCX_setTimeout(() => {
                changeTimer = null;
                sendHiddenMessage("somethingChanged", undefined);
            }, 100);
        }
    }
    class ModuleMessaging extends BaseModule {
        load() {
            hookFunction("ChatRoomMessage", 10, (args, next) => {
                const data = args[0];
                if ((data === null || data === void 0 ? void 0 : data.Type) === "Hidden" && data.Content === "BCXMsg" && typeof data.Sender === "number") {
                    if (data.Sender === Player.MemberNumber || firstTimeInit)
                        return;
                    if (!isObject$1(data.Dictionary)) {
                        console.warn("BCX: Hidden message no Dictionary", data);
                        return;
                    }
                    const { type, message } = data.Dictionary;
                    if (typeof type === "string") {
                        const handler = hiddenMessageHandlers.get(type);
                        if (handler === undefined) {
                            console.warn("BCX: Hidden message no handler", data.Sender, type, message);
                        }
                        else {
                            handler(data.Sender, message);
                        }
                    }
                    return;
                }
                return next(args);
            });
            hookFunction("ServerAccountBeep", 10, (args, next) => {
                var _a;
                const data = args[0];
                if (typeof (data === null || data === void 0 ? void 0 : data.BeepType) === "string" && ["Leash", "BCX"].includes(data.BeepType) && isObject$1((_a = data.Message) === null || _a === void 0 ? void 0 : _a.BCX)) {
                    const { type, message } = data.Message.BCX;
                    if (typeof type === "string") {
                        const handler = hiddenBeepHandlers.get(type);
                        if (handler === undefined) {
                            console.warn("BCX: Hidden beep no handler", data.MemberNumber, type, message);
                        }
                        else {
                            handler(data.MemberNumber, message);
                        }
                    }
                    return;
                }
                else {
                    return next(args);
                }
            });
        }
        unload() {
            hiddenBeepHandlers.clear();
            hiddenMessageHandlers.clear();
        }
    }

    const PRESET_DISABLED_MODULES = {
        [Preset.dominant]: [ModuleCategory.Log, ModuleCategory.Curses, ModuleCategory.Rules, ModuleCategory.Commands],
        [Preset.switch]: [],
        [Preset.submissive]: [],
        [Preset.slave]: [],
    };
    function getCurrentPreset() {
        var _a;
        return (_a = modStorage.preset) !== null && _a !== void 0 ? _a : Preset.switch;
    }
    function applyPreset(preset) {
        modStorage.preset = preset;
        modules_applyPreset(preset);
        setDisabledModules(PRESET_DISABLED_MODULES[preset]);
        finalizeFirstTimeInit();
    }
    function setDisabledModules(modules) {
        if (!Array.isArray(modStorage.disabledModules)) {
            console.error("BCX: Attempt to set disabled modules before initializetion");
            return false;
        }
        modules = arrayUnique(modules.filter(i => TOGGLEABLE_MODULES.includes(i)));
        if (CommonArraysEqual(modules, modStorage.disabledModules))
            return true;
        modStorage.disabledModules = modules;
        if (reload_modules()) {
            modStorageSync();
            notifyOfChange();
            return true;
        }
        return false;
    }
    function getDisabledModules() {
        return Array.isArray(modStorage.disabledModules) ? modStorage.disabledModules.slice() : [];
    }
    function moduleIsEnabled(module) {
        if (!TOGGLEABLE_MODULES.includes(module))
            return true;
        return Array.isArray(modStorage.disabledModules) ? !modStorage.disabledModules.includes(module) : true;
    }
    class ModulePresets extends BaseModule {
        init() {
            queryHandlers.disabledModules = () => {
                return getDisabledModules();
            };
        }
        load() {
            if (typeof modStorage.preset !== "number" || Preset[modStorage.preset] === undefined) {
                modStorage.preset = Preset.switch;
            }
            if (!Array.isArray(modStorage.disabledModules)) {
                modStorage.disabledModules = [];
            }
            else {
                modStorage.disabledModules = modStorage.disabledModules.filter(i => TOGGLEABLE_MODULES.includes(i));
            }
        }
        run() {
            if (firstTimeInit) {
                BCX_setTimeout(() => {
                    if (firstTimeInit && getCurrentSubscreen() === null) {
                        InfoBeep(`Please visit your profile to finish BCX setup`, Infinity);
                    }
                }, 2000);
            }
        }
    }

    function runMigration(originalVersion, currentVersion) {
        if (BCXVersionCompare(originalVersion, currentVersion) === 0 || firstTimeInit)
            return true;
        if (BCXVersionCompare(originalVersion, currentVersion) > 0) {
            if (!confirm("You are attempting to load older BCX version than you did previously. " +
                "This might result in loss of some data.\nAre you sure you want to continue?")) {
                return false;
            }
        }
        console.log("BCX: Version migration from", BCXVersionToString(originalVersion), "to", BCXVersionToString(currentVersion));
        if (BCXVersionCompare(originalVersion, { major: 0, minor: 7, patch: 4 }) < 0) {
            modStorage.menuShouldDisplayTutorialHelp = true;
        }
        if (BCXVersionCompare(originalVersion, { major: 0, minor: 8, patch: 0 }) < 0) {
            if (modStorage.preset === Preset.dominant &&
                Array.isArray(modStorage.disabledModules) &&
                !modStorage.disabledModules.includes(ModuleCategory.Commands)) {
                modStorage.disabledModules.push(ModuleCategory.Commands);
            }
        }
        return true;
    }

    let moduleInitPhase = ModuleInitPhase.construct;
    const modules = [];
    function registerModule(module) {
        if (moduleInitPhase !== ModuleInitPhase.construct) {
            throw new Error("Modules can be registered only before initialization");
        }
        modules.push(module);
        return module;
    }
    function init_modules() {
        moduleInitPhase = ModuleInitPhase.init;
        for (const m of modules) {
            if (m.init() === false) {
                return false;
            }
        }
        const oldVersion = typeof modStorage.version === "string" ? parseBCXVersion(modStorage.version) : { major: 0, minor: 0, patch: 0 };
        if (!oldVersion) {
            alert("Failed to parse BCX version in your saved data.\n" +
                "Are you loading older version or is your data corrupted?\n" +
                "Refusing to load.");
            return false;
        }
        if (!runMigration(oldVersion, BCX_VERSION_PARSED))
            return false;
        modStorage.version = BCX_VERSION;
        moduleInitPhase = ModuleInitPhase.load;
        for (const m of modules) {
            m.load(getCurrentPreset());
        }
        moduleInitPhase = ModuleInitPhase.ready;
        for (const m of modules) {
            m.run();
        }
        return true;
    }
    function unload_modules() {
        moduleInitPhase = ModuleInitPhase.destroy;
        for (const m of modules) {
            m.unload();
        }
    }
    function reload_modules() {
        if (moduleInitPhase !== ModuleInitPhase.ready) {
            console.error("BCX: Attempt to reload modules, while not ready");
            return false;
        }
        for (const m of modules) {
            m.reload(getCurrentPreset());
        }
        return true;
    }
    function modules_applyPreset(preset) {
        if (moduleInitPhase !== ModuleInitPhase.ready) {
            console.error("BCX: Attempt to apply preset to modules, while not ready");
            return false;
        }
        for (const m of modules) {
            m.applyPreset(preset);
        }
        return true;
    }

    var AccessLevel;
    (function (AccessLevel) {
        AccessLevel[AccessLevel["self"] = 0] = "self";
        AccessLevel[AccessLevel["clubowner"] = 1] = "clubowner";
        AccessLevel[AccessLevel["owner"] = 2] = "owner";
        AccessLevel[AccessLevel["lover"] = 3] = "lover";
        AccessLevel[AccessLevel["mistress"] = 4] = "mistress";
        AccessLevel[AccessLevel["whitelist"] = 5] = "whitelist";
        AccessLevel[AccessLevel["friend"] = 6] = "friend";
        AccessLevel[AccessLevel["public"] = 7] = "public";
    })(AccessLevel || (AccessLevel = {}));
    const permissions = new Map();
    function registerPermission(name, data) {
        if (moduleInitPhase !== ModuleInitPhase.init) {
            throw new Error("Permissions can be registered only during init");
        }
        if (permissions.has(name)) {
            throw new Error(`Permission "${name}" already defined!`);
        }
        for (const [k, v] of Object.entries(data.defaults)) {
            if (v[1] === AccessLevel.self && !v[0]) {
                console.error(`BCX: register permission "${name}": default for ${k} has invalid self value`);
            }
        }
        permissions.set(name, {
            ...data,
            self: data.defaults[Preset.switch][0],
            min: data.defaults[Preset.switch][1],
        });
    }
    function getCharacterAccessLevel(character) {
        var _a, _b, _c;
        const memberNumber = typeof character === "number" ? character : character.MemberNumber;
        if (Player.MemberNumber === memberNumber)
            return AccessLevel.self;
        if (memberNumber !== null) {
            if (Player.IsOwnedByMemberNumber(memberNumber))
                return AccessLevel.clubowner;
            if ((_a = modStorage.owners) === null || _a === void 0 ? void 0 : _a.includes(memberNumber))
                return AccessLevel.owner;
            if (Player.IsLoverOfMemberNumber(memberNumber))
                return AccessLevel.lover;
            if ((_b = modStorage.mistresses) === null || _b === void 0 ? void 0 : _b.includes(memberNumber))
                return AccessLevel.mistress;
            if (Player.WhiteList.includes(memberNumber))
                return AccessLevel.whitelist;
            if ((_c = Player.FriendList) === null || _c === void 0 ? void 0 : _c.includes(memberNumber))
                return AccessLevel.friend;
        }
        return AccessLevel.public;
    }
    function getHighestRoleInRoom() {
        let res = null;
        for (const char of getAllCharactersInRoom()) {
            const role = getCharacterAccessLevel(char);
            if (role !== AccessLevel.self && (!res || role < res)) {
                res = role;
            }
        }
        return res;
    }
    function checkPermissionAccess(permission, character) {
        const permData = permissions.get(permission);
        if (!permData) {
            console.error(new Error(`Check for unknown permission "${permission}"`));
            return false;
        }
        if (!character.hasAccessToPlayer())
            return false;
        if (!moduleIsEnabled(permData.category))
            return false;
        if (character.isPlayer() && selfAccessBlockedByRule(permData)) {
            return false;
        }
        return checkPermissionAccessData(permData, getCharacterAccessLevel(character));
    }
    function checkPermissionAccessData(permData, accessLevel) {
        if (accessLevel === AccessLevel.self) {
            return permData.self || permData.min === AccessLevel.self;
        }
        return accessLevel <= permData.min;
    }
    function selfAccessBlockedByRule(permData) {
        const blockRule = RulesGetRuleState("block_BCX_permissions");
        if (!blockRule.isEnforced || (permData.self && permData.min === AccessLevel.self)) {
            return false;
        }
        return true;
    }
    function permissionsMakeBundle() {
        const res = {};
        for (const [k, v] of permissions.entries()) {
            if (!moduleIsEnabled(v.category))
                continue;
            res[k] = [v.self, v.min];
        }
        return res;
    }
    function getPermissionDataFromBundle(bundle) {
        const res = {};
        for (const [k, v] of permissions.entries()) {
            if (bundle[k]) {
                res[k] = {
                    ...v,
                    self: bundle[k][0],
                    min: bundle[k][1],
                };
            }
        }
        return res;
    }
    function setPermissionSelfAccess(permission, self, characterToCheck, forceAllow = false) {
        const permData = permissions.get(permission);
        if (!permData) {
            throw new Error(`Attempt to edit unknown permission "${permission}"`);
        }
        if (!moduleIsEnabled(permData.category))
            return false;
        self = self || permData.min === AccessLevel.self;
        if (permData.self === self)
            return true;
        if (characterToCheck && !forceAllow) {
            const allowed = checkPermissionAccess(self ? "authority_grant_self" : "authority_revoke_self", characterToCheck) &&
                (characterToCheck.isPlayer() ||
                    checkPermissionAccess(permission, characterToCheck));
            if (!allowed) {
                console.warn(`BCX: Unauthorized self permission edit attempt for "${permission}" by ${characterToCheck}`);
                return false;
            }
        }
        if (characterToCheck) {
            logMessage("permission_change", LogEntryType.plaintext, `${characterToCheck} ` +
                (self ? `gave ${characterToCheck.isPlayer() ? "herself" : Player.Name}` : `removed ${(characterToCheck === null || characterToCheck === void 0 ? void 0 : characterToCheck.isPlayer()) ? "her" : Player.Name + "'s"}`) +
                ` control over permission "${permData.name}"`);
            if (!characterToCheck.isPlayer()) {
                ChatRoomSendLocal(`${characterToCheck.toNicknamedString()} ` +
                    (self ? `gave ${characterToCheck.isPlayer() ? "herself" : getPlayerCharacter().Nickname}` : `removed ${(characterToCheck === null || characterToCheck === void 0 ? void 0 : characterToCheck.isPlayer()) ? "her" : getPlayerCharacter().Nickname + "'s"}`) +
                    ` control over permission "${permData.name}"`, undefined, characterToCheck.MemberNumber);
            }
        }
        permData.self = self;
        permissionsSync();
        notifyOfChange();
        return true;
    }
    function setPermissionMinAccess(permission, min, characterToCheck, forceAllow = false) {
        const permData = permissions.get(permission);
        if (!permData) {
            throw new Error(`Attempt to edit unknown permission "${permission}"`);
        }
        if (!moduleIsEnabled(permData.category))
            return false;
        if (permData.min === min)
            return true;
        if (characterToCheck && !forceAllow) {
            const allowed = (characterToCheck.isPlayer() && permData.min < min && min <= AccessLevel.owner) ||
                (checkPermissionAccess("authority_edit_min", characterToCheck) &&
                    checkPermissionAccess(permission, characterToCheck) &&
                    (characterToCheck.isPlayer() ||
                        getCharacterAccessLevel(characterToCheck) <= min));
            if (!allowed) {
                console.warn(`BCX: Unauthorized min permission edit attempt for "${permission}" by ${characterToCheck}`);
                return false;
            }
        }
        if (characterToCheck) {
            logMessage("permission_change", LogEntryType.plaintext, `${characterToCheck} changed permission "${permData.name}" from ` +
                `"${getPermissionMinDisplayText(permData.min, characterToCheck)}" to "${getPermissionMinDisplayText(min, characterToCheck)}"`);
            if (!characterToCheck.isPlayer()) {
                ChatRoomSendLocal(`${characterToCheck.toNicknamedString()} changed permission "${permData.name}" from ` +
                    `"${getPermissionMinDisplayText(permData.min, characterToCheck)}" to "${getPermissionMinDisplayText(min, characterToCheck)}"`, undefined, characterToCheck.MemberNumber);
            }
        }
        permData.min = min;
        if (min === AccessLevel.self) {
            permData.self = true;
        }
        permissionsSync();
        notifyOfChange();
        return true;
    }
    function permissionsSync() {
        modStorage.permissions = permissionsMakeBundle();
        modStorageSync();
    }
    function getPlayerPermissionSettings() {
        const res = {};
        for (const [k, v] of permissions.entries()) {
            if (!moduleIsEnabled(v.category))
                continue;
            res[k] = { ...v };
        }
        return res;
    }
    function getPermissionMinDisplayText(minAccess, character) {
        if (minAccess === AccessLevel.self) {
            return character ? character.Name : "Self";
        }
        return capitalizeFirstLetter(AccessLevel[minAccess]);
    }
    function getPlayerRoleData(character) {
        var _a, _b, _c, _d;
        const loadNames = (memberNumber) => [memberNumber, getCharacterName(memberNumber, "")];
        let allowedMistressList = [];
        let allowedOwnerList = [];
        if (checkPermissionAccess("authority_view_roles", character) || checkPermissionAccess("authority_mistress_remove", character)) {
            allowedMistressList = ((_a = modStorage.mistresses) !== null && _a !== void 0 ? _a : []).map(loadNames);
        }
        else if ((_b = modStorage.mistresses) === null || _b === void 0 ? void 0 : _b.includes(character.MemberNumber)) {
            allowedMistressList = [[character.MemberNumber, character.Name]];
        }
        if (checkPermissionAccess("authority_view_roles", character) || checkPermissionAccess("authority_owner_remove", character)) {
            allowedOwnerList = ((_c = modStorage.owners) !== null && _c !== void 0 ? _c : []).map(loadNames);
        }
        else if ((_d = modStorage.owners) === null || _d === void 0 ? void 0 : _d.includes(character.MemberNumber)) {
            allowedOwnerList = [[character.MemberNumber, character.Name]];
        }
        return {
            mistresses: allowedMistressList,
            owners: allowedOwnerList,
            allowAddMistress: checkPermissionAccess("authority_mistress_add", character),
            allowRemoveMistress: checkPermissionAccess("authority_mistress_remove", character),
            allowAddOwner: checkPermissionAccess("authority_owner_add", character),
            allowRemoveOwner: checkPermissionAccess("authority_owner_remove", character),
        };
    }
    function editRole(role, action, target, character) {
        if (target === Player.MemberNumber)
            return false;
        if (!modStorage.owners || !modStorage.mistresses) {
            throw new Error("Not initialized");
        }
        if (character) {
            let permissionToCheck = "authority_mistress_add";
            if (role === "mistress" && action === "remove")
                permissionToCheck = "authority_mistress_remove";
            else if (role === "owner" && action === "add")
                permissionToCheck = "authority_owner_add";
            else if (role === "owner" && action === "remove")
                permissionToCheck = "authority_owner_remove";
            if (!checkPermissionAccess(permissionToCheck, character) && (action !== "remove" || target !== character.MemberNumber))
                return false;
            if (role === "mistress" && action === "add" && modStorage.owners.includes(target) && !checkPermissionAccess("authority_owner_remove", character)) {
                return false;
            }
        }
        if (role === "owner" && action === "remove" && !modStorage.owners.includes(target) ||
            role === "mistress" && action === "remove" && !modStorage.mistresses.includes(target)) {
            return true;
        }
        if (character) {
            let targetDescriptor = character.MemberNumber === target ? "herself" : `${getCharacterName(target, "[unknown name]")} (${target})`;
            logMessage("authority_roles_change", LogEntryType.plaintext, action === "add" ?
                `${character} added ${targetDescriptor} as ${role}.` :
                `${character} removed ${targetDescriptor} from being ${role}.`);
            if (!character.isPlayer()) {
                targetDescriptor = character.MemberNumber === target ? "herself" : `${getCharacterNickname(target, "[unknown name]")} (${target})`;
                ChatRoomSendLocal(action === "add" ?
                    `${character.toNicknamedString()} added ${targetDescriptor} as ${role}.` :
                    `${character.toNicknamedString()} removed ${targetDescriptor} from being ${role}.`, undefined, character.MemberNumber);
            }
            if (action === "add" && character.MemberNumber !== target) {
                const user = character.isPlayer() ? "her" : `TargetCharacterName's (${Player.MemberNumber})`;
                ChatRoomActionMessage(`SourceCharacter (${character.MemberNumber}) added you as ${user} BCX ${role}.`, target, [
                    { Tag: "SourceCharacter", MemberNumber: character.MemberNumber, Text: CharacterNickname(character.Character) },
                    { Tag: "TargetCharacterName", MemberNumber: Player.MemberNumber, Text: CharacterNickname(Player) },
                ]);
            }
        }
        const ownerIndex = modStorage.owners.indexOf(target);
        if (ownerIndex >= 0) {
            modStorage.owners.splice(ownerIndex, 1);
        }
        const mistressIndex = modStorage.mistresses.indexOf(target);
        if (mistressIndex >= 0) {
            modStorage.mistresses.splice(mistressIndex, 1);
        }
        if (action === "add") {
            if (role === "owner") {
                modStorage.owners.push(target);
            }
            else if (role === "mistress") {
                modStorage.mistresses.push(target);
            }
        }
        modStorageSync();
        notifyOfChange();
        return true;
    }
    class ModuleAuthority extends BaseModule {
        init() {
            registerPermission("authority_grant_self", {
                name: "Allow granting self access",
                category: ModuleCategory.Authority,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [false, AccessLevel.owner],
                    [Preset.slave]: [false, AccessLevel.owner],
                },
            });
            registerPermission("authority_revoke_self", {
                name: "Allow forbidding self access",
                category: ModuleCategory.Authority,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.self],
                    [Preset.slave]: [false, AccessLevel.owner],
                },
            });
            registerPermission("authority_edit_min", {
                name: "Allow lowest access modification",
                category: ModuleCategory.Authority,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.self],
                    [Preset.slave]: [false, AccessLevel.owner],
                },
            });
            registerPermission("authority_mistress_add", {
                name: "Allow granting Mistress status",
                category: ModuleCategory.Authority,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.lover],
                    [Preset.slave]: [true, AccessLevel.mistress],
                },
            });
            registerPermission("authority_mistress_remove", {
                name: "Allow revoking Mistress status",
                category: ModuleCategory.Authority,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [false, AccessLevel.lover],
                    [Preset.slave]: [false, AccessLevel.lover],
                },
            });
            registerPermission("authority_owner_add", {
                name: "Allow granting Owner status",
                category: ModuleCategory.Authority,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [true, AccessLevel.clubowner],
                    [Preset.slave]: [true, AccessLevel.owner],
                },
            });
            registerPermission("authority_owner_remove", {
                name: "Allow revoking Owner status",
                category: ModuleCategory.Authority,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.self],
                    [Preset.submissive]: [false, AccessLevel.clubowner],
                    [Preset.slave]: [false, AccessLevel.clubowner],
                },
            });
            registerPermission("authority_view_roles", {
                name: "Allow viewing list of owners/mistresses",
                category: ModuleCategory.Authority,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.self],
                    [Preset.switch]: [true, AccessLevel.mistress],
                    [Preset.submissive]: [true, AccessLevel.whitelist],
                    [Preset.slave]: [true, AccessLevel.public],
                },
            });
            queryHandlers.permissions = () => {
                return permissionsMakeBundle();
            };
            queryHandlers.permissionAccess = (sender, data) => {
                if (typeof data === "string") {
                    return checkPermissionAccess(data, sender);
                }
                else {
                    return undefined;
                }
            };
            queryHandlers.myAccessLevel = (sender) => {
                return getCharacterAccessLevel(sender);
            };
            queryHandlers.editPermission = (sender, data) => {
                if (!isObject$1(data) ||
                    typeof data.permission !== "string" ||
                    (data.edit !== "min" && data.edit !== "self") ||
                    (data.edit === "min" && typeof data.target !== "number") ||
                    (data.edit === "self" && typeof data.target !== "boolean")) {
                    console.warn(`BCX: Bad editPermission query from ${sender}`, data);
                    return undefined;
                }
                if (!permissions.has(data.permission)) {
                    console.warn(`BCX: editPermission query from ${sender}; unknown permission`, data);
                    return undefined;
                }
                if (data.edit === "self") {
                    if (typeof data.target !== "boolean") {
                        throw new Error("Assertion failed");
                    }
                    return setPermissionSelfAccess(data.permission, data.target, sender);
                }
                else {
                    if (typeof data.target !== "number") {
                        throw new Error("Assertion failed");
                    }
                    if (AccessLevel[data.target] === undefined) {
                        console.warn(`BCX: editPermission query from ${sender}; unknown access level`, data);
                        return false;
                    }
                    return setPermissionMinAccess(data.permission, data.target, sender);
                }
            };
            queryHandlers.rolesData = (sender) => {
                var _a, _b;
                if (!sender.isPlayer() &&
                    !checkPermissionAccess("authority_view_roles", sender) &&
                    !checkPermissionAccess("authority_mistress_add", sender) &&
                    !checkPermissionAccess("authority_mistress_remove", sender) &&
                    !checkPermissionAccess("authority_owner_add", sender) &&
                    !checkPermissionAccess("authority_owner_remove", sender) &&
                    !((_a = modStorage.mistresses) === null || _a === void 0 ? void 0 : _a.includes(sender.MemberNumber)) &&
                    !((_b = modStorage.owners) === null || _b === void 0 ? void 0 : _b.includes(sender.MemberNumber))) {
                    return undefined;
                }
                return getPlayerRoleData(sender);
            };
            queryHandlers.editRole = (sender, data) => {
                if (!isObject$1(data) ||
                    data.type !== "owner" && data.type !== "mistress" ||
                    data.action !== "add" && data.action !== "remove" ||
                    typeof data.target !== "number") {
                    console.warn(`BCX: Bad editRole query from ${sender}`, data);
                    return undefined;
                }
                return editRole(data.type, data.action, data.target, sender);
            };
            registerWhisperCommand("modules", "role", "- Manage Owner & Mistress roles", (argv, sender, respond) => {
                var _a, _b;
                const subcommand = (argv[0] || "").toLocaleLowerCase();
                if (subcommand === "list") {
                    if (!checkPermissionAccess("authority_view_roles", sender) &&
                        !checkPermissionAccess("authority_mistress_add", sender) &&
                        !checkPermissionAccess("authority_mistress_remove", sender) &&
                        !checkPermissionAccess("authority_owner_add", sender) &&
                        !checkPermissionAccess("authority_owner_remove", sender) &&
                        !((_a = modStorage.mistresses) === null || _a === void 0 ? void 0 : _a.includes(sender.MemberNumber)) &&
                        !((_b = modStorage.owners) === null || _b === void 0 ? void 0 : _b.includes(sender.MemberNumber))) {
                        return respond(COMMAND_GENERIC_ERROR);
                    }
                    const data = getPlayerRoleData(sender);
                    let res = "Visible list:";
                    for (const owner of data.owners) {
                        res += `\nOwner ${owner[1] || "[unknown name]"} (${owner[0]})`;
                    }
                    for (const mistress of data.mistresses) {
                        res += `\nMistress ${mistress[1] || "[unknown name]"} (${mistress[0]})`;
                    }
                    respond(res);
                }
                else if (subcommand === "owner" || subcommand === "mistress") {
                    const subcommand2 = (argv[1] || "").toLocaleLowerCase();
                    if (subcommand2 !== "add" && subcommand2 !== "remove") {
                        return respond(`Expected either 'add' or 'remove', got '${subcommand2}'`);
                    }
                    if (!argv[2]) {
                        return respond(`Missing required argument: target`);
                    }
                    const target = Command_selectCharacterMemberNumber(argv[2], true);
                    if (typeof target === "string") {
                        return respond(target);
                    }
                    respond(editRole(subcommand, subcommand2, target, sender) ? "Ok!" : COMMAND_GENERIC_ERROR);
                }
                else {
                    respond(Command_fixExclamationMark(sender, `!role usage:\n` +
                        `!role list - List all current owners/mistresses\n` +
                        `!role owner <add/remove> <target> - Add or remove target as owner\n` +
                        `!role mistress <add/remove> <target> - Add or remove target as mistress`));
                }
            }, (argv, sender) => {
                if (argv.length <= 1) {
                    const c = argv[0].toLocaleLowerCase();
                    return ["list", "owner", "mistress"].filter(i => i.startsWith(c));
                }
                const subcommand = argv[0].toLocaleLowerCase();
                if (subcommand === "owner" || subcommand === "mistress") {
                    if (argv.length === 2) {
                        const c = argv[1].toLocaleLowerCase();
                        return ["add", "remove"].filter(i => i.startsWith(c));
                    }
                    const subcommand2 = argv[1].toLocaleLowerCase();
                    if (subcommand2 === "add" || subcommand2 === "remove") {
                        return Command_selectCharacterAutocomplete(argv[2]);
                    }
                }
                return [];
            });
            registerWhisperCommand("modules", "permission", "- Manage permissions", (argv, sender, respond) => {
                const subcommand = (argv[0] || "").toLocaleLowerCase();
                const permissionsList = getPlayerPermissionSettings();
                if (subcommand === "list") {
                    const categories = new Map();
                    let hasAny = false;
                    const filter = argv.slice(1).map(v => v.toLocaleLowerCase());
                    for (const [k, v] of Object.entries(permissionsList)) {
                        if (filter.some(i => !MODULE_NAMES[v.category].toLocaleLowerCase().includes(i) &&
                            !v.name.toLocaleLowerCase().includes(i) &&
                            !k.toLocaleLowerCase().includes(i)))
                            continue;
                        let permdata = categories.get(v.category);
                        if (!permdata) {
                            categories.set(v.category, permdata = {});
                        }
                        hasAny = true;
                        permdata[k] = v;
                    }
                    if (!hasAny) {
                        return respond("No permission matches the filter!");
                    }
                    for (const [category, data] of Array.from(categories.entries()).sort((a, b) => a[0] - b[0])) {
                        let result = `List of ${MODULE_NAMES[category]} module permissions:`;
                        for (const [k, v] of Object.entries(data).sort((a, b) => a[1].name.localeCompare(b[1].name))) {
                            result += `\n${k}:\n  ${v.name} - ${v.self ? "self" : "not self"}, ${getPermissionMinDisplayText(v.min, getPlayerCharacter())}`;
                        }
                        respond(result);
                        result = "";
                    }
                }
                else if (permissionsList[subcommand] !== undefined) {
                    const subcommand2 = (argv[1] || "").toLocaleLowerCase();
                    let subcommand3 = (argv[2] || "").toLocaleLowerCase();
                    if (subcommand2 === "") {
                        const v = permissionsList[subcommand];
                        respond(`${subcommand}:\n  ${v.name} - ${v.self ? "self" : "not self"}, ${getPermissionMinDisplayText(v.min, getPlayerCharacter())}`);
                    }
                    else if (subcommand2 === "selfaccess") {
                        if (subcommand3 === "yes" || subcommand3 === "no") {
                            respond(setPermissionSelfAccess(subcommand, subcommand3 === "yes", sender) ? "Ok!" : COMMAND_GENERIC_ERROR);
                        }
                        else {
                            respond(`Expected 'selfaccess yes' or 'selfaccess no'`);
                        }
                    }
                    else if (subcommand2 === "lowestaccess") {
                        if (subcommand3 === Player.Name.toLocaleLowerCase()) {
                            subcommand3 = "self";
                        }
                        const level = AccessLevel[subcommand3];
                        if (typeof level === "number") {
                            respond(setPermissionMinAccess(subcommand, level, sender) ? "Ok!" : COMMAND_GENERIC_ERROR);
                        }
                        else {
                            respond(`Unknown AccessLevel '${subcommand3}';\n` +
                                `expected one of: ${Player.Name}, clubowner, owner, lover, mistress, whitelist, friend, public`);
                        }
                    }
                    else {
                        respond(`Unknown setting '${subcommand2}'; expected 'selfaccess' or 'lowestaccess'`);
                    }
                }
                else if (subcommand !== "help") {
                    respond(`Unknown permission '${subcommand}'.\n` +
                        `To get list of permissions use '${sender.isPlayer() ? "." : "!"}permission list'`);
                }
                else {
                    respond(Command_fixExclamationMark(sender, `!permission usage:\n` +
                        `!permission list [filter] - List all permissions and their current settings\n` +
                        `!permission <name> selfaccess <yes|no> - Gives or revokes ${Player.Name}'s access to permission <name>\n` +
                        `!permission <name> lowestaccess <${Player.Name}|clubowner|owner|lover|mistress|whitelist|friend|public> - Sets the lowest permitted role for the permission <name>`));
                }
            }, (argv, sender) => {
                const permissionNames = Object.keys(getPlayerPermissionSettings());
                if (argv.length <= 1) {
                    const c = argv[0].toLocaleLowerCase();
                    return ["list", ...permissionNames].filter(i => i.startsWith(c));
                }
                const subcommand = argv[0].toLocaleLowerCase();
                if (permissionNames.includes(subcommand)) {
                    const subcommand2 = argv[1].toLocaleLowerCase();
                    const subcommand3 = (argv[2] || "").toLocaleLowerCase();
                    if (argv.length === 2) {
                        return ["selfaccess", "lowestaccess"].filter(i => i.startsWith(subcommand2));
                    }
                    else if (argv.length === 3) {
                        if (subcommand2 === "selfaccess") {
                            return ["yes", "no"].filter(i => i.startsWith(subcommand3));
                        }
                        else if (subcommand2 === "lowestaccess") {
                            return [Player.Name.toLocaleLowerCase(), "self", "clubowner", "owner", "lover", "mistress", "whitelist", "friend", "public"]
                                .filter(i => i.startsWith(subcommand3));
                        }
                    }
                }
                return [];
            });
            ExportImportRegisterCategory({
                category: `authorityPermissions`,
                name: `Authority - Permissions`,
                module: ModuleCategory.Authority,
                export: () => permissionsMakeBundle(),
                import: (data, character) => {
                    let res = "";
                    for (const [k, v] of Object.entries(data)) {
                        const perm = k;
                        const permData = permissions.get(perm);
                        if (!permData) {
                            res += `Skipped unknown permission '${k}'\n`;
                            continue;
                        }
                        if (!moduleIsEnabled(permData.category))
                            continue;
                        if (!v[0] && v[1] === AccessLevel.self) {
                            res += `Error importing permission '${permData.name}': Inconsistent data\n`;
                            continue;
                        }
                        if (character && !character.isPlayer() && !checkPermissionAccessData(permData, getCharacterAccessLevel(character))) {
                            res += `Skipped importing permission '${permData.name}': No access\n`;
                            continue;
                        }
                        if (character && !character.isPlayer() && getCharacterAccessLevel(character) > v[1]) {
                            res += `Skipped importing permission '${permData.name}' min access: No access to target level\n`;
                        }
                        if (!setPermissionMinAccess(perm, v[1], character, true)) {
                            res += `Error setting minimal access for '${permData.name}'\n`;
                        }
                        if (!setPermissionSelfAccess(perm, v[0], character, true)) {
                            res += `Error setting self access for '${permData.name}'\n`;
                        }
                    }
                    return res + `Done!`;
                },
                importPermissions: ["authority_grant_self", "authority_revoke_self", "authority_edit_min"],
                importValidator: z.record(z.tuple([z.boolean(), z.nativeEnum(AccessLevel)])),
            });
        }
        setDefultPermissionsForPreset(preset) {
            for (const permission of permissions.values()) {
                permission.self = permission.defaults[preset][0];
                permission.min = permission.defaults[preset][1];
            }
        }
        applyPreset(preset) {
            this.setDefultPermissionsForPreset(preset);
            modStorage.permissions = permissionsMakeBundle();
        }
        load(preset) {
            var _a;
            this.setDefultPermissionsForPreset(preset);
            if (isObject$1(modStorage.permissions)) {
                const transitionDictionary = {
                    log_leaveMessage: "log_add_note",
                };
                for (const [k, v] of Object.entries(modStorage.permissions)) {
                    if (transitionDictionary[k] !== undefined) {
                        console.info(`BCX: Updating permission name "${k}"->"${transitionDictionary[k]}"`);
                    }
                    const perm = permissions.get((_a = transitionDictionary[k]) !== null && _a !== void 0 ? _a : k);
                    if (!Array.isArray(v) || typeof v[0] !== "boolean" || typeof v[1] !== "number") {
                        console.warn(`BCX: Storage: bad permission ${k}`);
                    }
                    else if (AccessLevel[v[1]] === undefined) {
                        console.warn(`BCX: Storage: bad permission ${k} level ${v[1]}`);
                    }
                    else if (perm === undefined) {
                        console.warn(`BCX: Storage: unknown permission ${k}`);
                    }
                    else {
                        perm.self = v[0];
                        perm.min = v[1];
                    }
                }
            }
            modStorage.permissions = permissionsMakeBundle();
            const seen = new Set();
            const test = (i) => {
                if (typeof i !== "number" || i === Player.MemberNumber || seen.has(i))
                    return false;
                seen.add(i);
                return true;
            };
            if (!Array.isArray(modStorage.owners)) {
                modStorage.owners = [];
            }
            else {
                modStorage.owners = modStorage.owners.filter(test);
            }
            if (!Array.isArray(modStorage.mistresses)) {
                modStorage.mistresses = [];
            }
            else {
                modStorage.mistresses = modStorage.mistresses.filter(test);
            }
        }
        reload(preset) {
            this.load(preset);
        }
    }

    const PLAYER_EFFECT_REBUILD_INTERVAL = 2000;
    class ChatroomCharacter {
        isPlayer() {
            return false;
        }
        get MemberNumber() {
            if (typeof this.Character.MemberNumber !== "number") {
                throw new Error("Character without MemberNumber");
            }
            return this.Character.MemberNumber;
        }
        get Name() {
            return this.Character.Name;
        }
        get Nickname() {
            var _a;
            return (_a = RelationshipsGetNickname(this)) !== null && _a !== void 0 ? _a : CharacterNickname(this.Character);
        }
        get supporterStatus() {
            const status = otherSupporterStatus.get(this.MemberNumber);
            return (status === null || status === void 0 ? void 0 : status.verified) ? status.status : undefined;
        }
        toString() {
            return `${this.Name} (${this.MemberNumber})`;
        }
        toNicknamedString() {
            return `${this.Nickname} (${this.MemberNumber})`;
        }
        constructor(character) {
            this.BCXVersion = null;
            this.typingIndicatorEnable = true;
            this.screenIndicatorEnable = true;
            this.Character = character;
            if (character.ID === 0) {
                this.BCXVersion = VERSION$1;
            }
            this.Effects = cloneDeep(defaultBCXEffects);
            console.debug(`BCX: Loaded character ${character.Name} (${character.MemberNumber})`);
        }
        getDisabledModules(timeout) {
            return sendQuery("disabledModules", undefined, this.MemberNumber, timeout).then(data => {
                if (!Array.isArray(data)) {
                    console.error("BCX: Bad data during 'disabledModules' query\n", data);
                    throw new Error("Bad data");
                }
                return data.filter(i => TOGGLEABLE_MODULES.includes(i));
            });
        }
        getPermissions() {
            return sendQuery("permissions", undefined, this.MemberNumber).then(data => {
                if (!isObject$1(data) ||
                    Object.values(data).some(v => !Array.isArray(v) ||
                        typeof v[0] !== "boolean" ||
                        typeof v[1] !== "number" ||
                        AccessLevel[v[1]] === undefined)) {
                    console.error("BCX: Bad data during 'permissions' query\n", data);
                    throw new Error("Bad data");
                }
                return getPermissionDataFromBundle(data);
            });
        }
        getPermissionAccess(permission) {
            return sendQuery("permissionAccess", permission, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'permissionAccess' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            }).catch(err => {
                console.error(`BCX: Error while querying permission "${permission}" access for ${this}`, err);
                return false;
            });
        }
        getMyAccessLevel() {
            return sendQuery("myAccessLevel", undefined, this.MemberNumber).then(data => {
                if (typeof data !== "number" || AccessLevel[data] === undefined) {
                    console.error("BCX: Bad data during 'myAccessLevel' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        setPermission(permission, type, target) {
            return sendQuery("editPermission", {
                permission,
                edit: type,
                target,
            }, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'editPermission' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        getRolesData() {
            return sendQuery("rolesData", undefined, this.MemberNumber).then(data => {
                if (!isObject$1(data) ||
                    !Array.isArray(data.mistresses) ||
                    !data.mistresses.every(i => Array.isArray(i) && i.length === 2 && typeof i[0] === "number" && typeof i[1] === "string") ||
                    !Array.isArray(data.owners) ||
                    !data.owners.every(i => Array.isArray(i) && i.length === 2 && typeof i[0] === "number" && typeof i[1] === "string") ||
                    typeof data.allowAddMistress !== "boolean" ||
                    typeof data.allowRemoveMistress !== "boolean" ||
                    typeof data.allowAddOwner !== "boolean" ||
                    typeof data.allowRemoveOwner !== "boolean") {
                    console.error("BCX: Bad data during 'rolesData' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        editRole(role, action, target) {
            return sendQuery("editRole", {
                type: role,
                action,
                target,
            }, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'editRole' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        getLogEntries() {
            return sendQuery("logData", undefined, this.MemberNumber).then(data => {
                if (!Array.isArray(data) ||
                    !data.every(e => Array.isArray(e) &&
                        e.length === 4 &&
                        typeof e[0] === "number" &&
                        typeof e[1] === "number" &&
                        typeof e[2] === "number")) {
                    console.error("BCX: Bad data during 'logData' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        logMessageDelete(time) {
            return sendQuery("logDelete", time, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'logDelete' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        getLogConfig() {
            return sendQuery("logConfigGet", undefined, this.MemberNumber).then(data => {
                if (!isObject$1(data) ||
                    Object.values(data).some(v => typeof v !== "number")) {
                    console.error("BCX: Bad data during 'logConfigGet' query\n", data);
                    throw new Error("Bad data");
                }
                for (const k of Object.keys(data)) {
                    if (data[k] == null || LOG_CONFIG_NAMES[k] === undefined || LogAccessLevel[data[k]] === undefined) {
                        delete data[k];
                    }
                }
                return data;
            });
        }
        setLogConfig(category, target) {
            return sendQuery("logConfigEdit", {
                category,
                target,
            }, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'logConfigEdit' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        logClear() {
            return sendQuery("logClear", undefined, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'logClear' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        logPraise(value, message) {
            return sendQuery("logPraise", {
                message,
                value,
            }, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'logPraise' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        logGetAllowedActions() {
            return sendQuery("logGetAllowedActions", undefined, this.MemberNumber).then(data => {
                if (!isObject$1(data) ||
                    typeof data.delete !== "boolean" ||
                    typeof data.configure !== "boolean" ||
                    typeof data.praise !== "boolean" ||
                    typeof data.leaveMessage !== "boolean") {
                    console.error("BCX: Bad data during 'logGetAllowedActions' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        curseItem(Group, curseProperties) {
            return sendQuery("curseItem", { Group, curseProperties }, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'curseItem' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        curseLift(Group) {
            return sendQuery("curseLift", Group, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'curseLift' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        curseBatch(mode, includingEmpty) {
            return sendQuery("curseBatch", { mode, includingEmpty }, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'curseBatch' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        curseLiftAll() {
            return sendQuery("curseLiftAll", undefined, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'curseLiftAll' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        conditionsGetByCategory(category) {
            return sendQuery("conditionsGet", category, this.MemberNumber).then(data => {
                if (!guard_ConditionsCategoryPublicData(category, data, true)) {
                    console.error("BCX: Bad data during 'conditionsGet' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        conditionSetLimit(category, condition, limit) {
            return sendQuery("conditionSetLimit", { category, condition, limit }, this.MemberNumber).then(data => {
                if (typeof data !== "boolean") {
                    console.error("BCX: Bad data during 'conditionSetLimit' query\n", data);
                    throw new Error("Bad data");
                }
                return data;
            });
        }
        conditionUpdate(category, condition, data) {
            return sendQuery("conditionUpdate", { category, condition, data }, this.MemberNumber).then(res => {
                if (typeof res !== "boolean") {
                    console.error("BCX: Bad data during 'conditionUpdate' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        conditionUpdateMultiple(category, conditions, data) {
            return sendQuery("conditionUpdateMultiple", { category, conditions, data }, this.MemberNumber).then(res => {
                if (typeof res !== "boolean") {
                    console.error("BCX: Bad data during 'conditionUpdateMultiple' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        conditionCategoryUpdate(category, data) {
            return sendQuery("conditionCategoryUpdate", { category, data }, this.MemberNumber).then(res => {
                if (typeof res !== "boolean") {
                    console.error("BCX: Bad data during 'conditionCategoryUpdate' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        ruleCreate(name) {
            return sendQuery("ruleCreate", name, this.MemberNumber).then(res => {
                if (typeof res !== "boolean") {
                    console.error("BCX: Bad data during 'ruleCreate' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        ruleDelete(name) {
            return sendQuery("ruleDelete", name, this.MemberNumber).then(res => {
                if (typeof res !== "boolean") {
                    console.error("BCX: Bad data during 'ruleDelete' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        exportImportDoExport(category, compress = true) {
            return sendQuery("export_import_do_export", {
                category,
                compress,
            }, this.MemberNumber).then(res => {
                if (typeof res !== "string") {
                    console.error("BCX: Bad data during 'export_import_do_export' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        exportImportDoImport(category, data) {
            return sendQuery("export_import_do_import", {
                category,
                data,
            }, this.MemberNumber).then(res => {
                if (typeof res !== "string") {
                    console.error("BCX: Bad data during 'export_import_do_import' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        relatonshipsGet() {
            return sendQuery("relatonshipsGet", undefined, this.MemberNumber).then(res => {
                if (!isObject$1(res) ||
                    !Array.isArray(res.relationships) ||
                    !res.relationships.every(guard_RelationshipData) ||
                    typeof res.access_view_all !== "boolean" ||
                    typeof res.access_modify_self !== "boolean" ||
                    typeof res.access_modify_others !== "boolean") {
                    console.error("BCX: Bad data during 'relatonshipsGet' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        relationshipsRemove(memberNumber) {
            return sendQuery("relationshipsRemove", memberNumber, this.MemberNumber).then(res => {
                if (typeof res !== "boolean") {
                    console.error("BCX: Bad data during 'relationshipsRemove' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        relationshipsSet(data) {
            return sendQuery("relationshipsSet", data, this.MemberNumber).then(res => {
                if (typeof res !== "boolean") {
                    console.error("BCX: Bad data during 'relationshipsSet' query\n", res);
                    throw new Error("Bad data");
                }
                return res;
            });
        }
        hasAccessToPlayer() {
            return ServerChatRoomGetAllowItem(this.Character, Player);
        }
        playerHasAccessToCharacter() {
            return ServerChatRoomGetAllowItem(Player, this.Character);
        }
    }
    class PlayerCharacter extends ChatroomCharacter {
        constructor() {
            super(...arguments);
            this.playerObject = true;
        }
        get supporterStatus() {
            return supporterStatus;
        }
        isPlayer() {
            return true;
        }
        getMyAccessLevel() {
            return Promise.resolve(AccessLevel.self);
        }
    }
    const currentRoomCharacters = [];
    function cleanOldCharacters() {
        for (let i = currentRoomCharacters.length - 1; i >= 0; i--) {
            if (!currentRoomCharacters[i].isPlayer() && !ChatRoomCharacter.includes(currentRoomCharacters[i].Character)) {
                currentRoomCharacters.splice(i, 1);
            }
        }
    }
    function getChatroomCharacter(memberNumber) {
        if (typeof memberNumber !== "number")
            return null;
        cleanOldCharacters();
        let character = currentRoomCharacters.find(c => c.Character.MemberNumber === memberNumber);
        if (!character) {
            if (Player.MemberNumber === memberNumber) {
                character = new PlayerCharacter(Player);
            }
            else {
                const BCCharacter = ChatRoomCharacter.find(c => c.MemberNumber === memberNumber);
                if (!BCCharacter) {
                    return null;
                }
                character = new ChatroomCharacter(BCCharacter);
            }
            currentRoomCharacters.push(character);
        }
        return character;
    }
    function getAllCharactersInRoom() {
        if (!ServerPlayerIsInChatRoom()) {
            return [getPlayerCharacter()];
        }
        return ChatRoomCharacter.map(c => getChatroomCharacter(c.MemberNumber)).filter(Boolean);
    }
    function getPlayerCharacter() {
        let character = currentRoomCharacters.find(c => c.Character === Player);
        if (!character) {
            character = new PlayerCharacter(Player);
            currentRoomCharacters.push(character);
        }
        return character;
    }
    const effectBuilderFunctions = [];
    function registerEffectBuilder(builder) {
        effectBuilderFunctions.push(builder);
    }
    function buildPlayerEffects() {
        const effects = cloneDeep(defaultBCXEffects);
        for (const builder of effectBuilderFunctions) {
            builder(effects);
        }
        const player = getPlayerCharacter();
        if (isEqual(effects, player.Effects))
            return;
        player.Effects = effects;
        CharacterRefresh(Player, false);
        announceSelf(false);
    }
    class ModuleCharacter extends BaseModule {
        constructor() {
            super(...arguments);
            this.timer = null;
        }
        load() {
            hookFunction("CharacterLoadEffect", 0, (args, next) => {
                next(args);
                const C = args[0];
                const character = typeof C.MemberNumber === "number" && getChatroomCharacter(C.MemberNumber);
                if (character) {
                    for (const effect of character.Effects.Effect) {
                        if (!C.Effect.includes(effect)) {
                            C.Effect.push(effect);
                        }
                    }
                }
            });
        }
        run() {
            this.timer = BCX_setInterval(buildPlayerEffects, PLAYER_EFFECT_REBUILD_INTERVAL);
        }
        unload() {
            if (this.timer !== null) {
                clearInterval(this.timer);
                this.timer = null;
            }
        }
    }

    const GROUP_NAME_OVERRIDES = {
        "ItemNeckAccessories": "Collar Addon",
        "ItemNeckRestraints": "Collar Restraint",
        "ItemNipplesPiercings": "Nipple Piercing",
        "ItemHood": "Hood",
        "ItemMisc": "Miscellaneous",
        "ItemDevices": "Devices",
        "ItemHoodAddon": "Hood Addon",
        "ItemAddon": "General Addon",
        "ItemLegs": "Upper Leg",
        "ItemFeet": "Lower Leg",
        "ItemBoots": "Feet",
        "ItemMouth": "Mouth (1)",
        "ItemMouth2": "Mouth (2)",
        "ItemMouth3": "Mouth (3)",
        "HairAccessory2": "Ears Accessory",
        "Height": "Character Height",
        "Mouth": "Mouth Style",
        "Pussy": "Pussy Style",
    };
    let allowMode = false;
    let developmentMode = false;
    function setAllowMode(allow) {
        if (allow) {
            if (!BCX_VERSION_PARSED.dev && supporterStatus !== "developer") {
                console.info("Cheats are only allowed in developer version");
                return false;
            }
            console.warn("Cheats enabled; please be careful not to break things");
        }
        else {
            if (!setDevelopmentMode(false))
                return false;
            console.info("Cheats disabled");
        }
        allowMode = allow;
        return true;
    }
    function setDevelopmentMode(devel) {
        if (devel) {
            if (!setAllowMode(true)) {
                console.info("To use developer mode, cheats must be enabled first!");
                return false;
            }
            window.BCX_Devel = true;
            AssetGroup.forEach(G => G.Description = G.Name);
            Asset.forEach(A => A.Description = A.Group.Name + ":" + A.Name);
            BackgroundSelectionAll.forEach(B => {
                B.Description = B.Name;
                B.Low = B.Description.toLowerCase();
            });
            console.warn("Developer mode enabled");
        }
        else {
            delete window.BCX_Devel;
            AssetLoadDescription("Female3DCG");
            BackgroundSelectionAll.forEach(B => {
                B.Description = DialogFindPlayer(B.Name);
                B.Low = B.Description.toLowerCase();
            });
            console.info("Developer mode disabled");
        }
        developmentMode = devel;
        return true;
    }
    let BCXSource = null;
    let BCXSourceExternal = false;
    function init_findBCXSource() {
        for (const elem of Array.from(document.getElementsByTagName("script"))) {
            const match = /^((https:\/\/[^?/]+|http:\/\/localhost(?::[0-9]+)?)\/([^?]+)?)bcx(\.dev)?\.js($|\?)/i.exec(elem.src);
            if (match) {
                BCXSource = match[1];
                console.debug("BCX: Using detected source:", BCXSource);
                return;
            }
        }
        const externalSrc = window.BCX_SOURCE;
        if (typeof externalSrc === "string") {
            BCXSourceExternal = true;
            const match = /^(https:\/\/[^?/]+\/(?:[^?]+?)?)(?:bcx(\.dev)?\.js)?(?:$|\?)/i.exec(externalSrc);
            if (match) {
                BCXSource = match[1];
                console.log("BCX: External BCX_SOURCE supplied:", BCXSource);
                return;
            }
            console.warn("BCX: External BCX_SOURCE supplied, but malformed, ignoring", externalSrc);
        }
        const msg = "BCX: Failed to find BCX's source! Some functions will not work properly. Are you using the official version?";
        console.error(msg);
        alert(msg);
    }
    function getVisibleGroupName(group) {
        var _a;
        return developmentMode ? group.Name : ((_a = GROUP_NAME_OVERRIDES[group.Name]) !== null && _a !== void 0 ? _a : group.Description);
    }
    function InfoBeep(msg, timer = 3000) {
        ServerBeep = {
            Timer: CommonTime() + timer,
            Message: msg,
        };
    }
    function ChatRoomActionMessage(msg, target = null, dictionary = []) {
        if (!msg)
            return;
        ServerSend("ChatRoomChat", {
            Content: "BCX_PLAYER_CUSTOM_DIALOG",
            Type: "Action",
            Target: target,
            Dictionary: [
                { Tag: "MISSING PLAYER DIALOG: BCX_PLAYER_CUSTOM_DIALOG", Text: msg },
                ...dictionary,
            ],
        });
    }
    function ChatRoomSendLocal(msg, timeout, sender) {
        var _a, _b;
        const div = document.createElement("div");
        div.setAttribute("class", "ChatMessage ChatMessageLocalMessage");
        div.setAttribute("data-time", ChatRoomCurrentTime());
        div.setAttribute("data-sender", `${(_a = sender !== null && sender !== void 0 ? sender : Player.MemberNumber) !== null && _a !== void 0 ? _a : 0}`);
        div.style.background = "#6e6eff54";
        div.style.margin = "0.15em 0";
        if (typeof msg === "string")
            div.innerText = msg;
        else
            div.appendChild(msg);
        if (timeout)
            BCX_setTimeout(() => div.remove(), timeout);
        const Refocus = ((_b = document.activeElement) === null || _b === void 0 ? void 0 : _b.id) === "InputChat";
        const ShouldScrollDown = ElementIsScrolledToEnd("TextAreaChatLog");
        const ChatLog = document.getElementById("TextAreaChatLog");
        if (ChatLog != null) {
            ChatLog.appendChild(div);
            if (ShouldScrollDown)
                ElementScrollToEnd("TextAreaChatLog");
            if (Refocus)
                ElementFocus("InputChat");
            return div;
        }
        return null;
    }
    function isNModClient() {
        return typeof window.ChatRoomDrawFriendList === "function";
    }
    function detectOtherMods() {
        const w = window;
        return {
            NMod: isNModClient(),
            BondageClubTools: window.BCX_BondageClubToolsPatch === true || ServerSocket.listeners("ChatRoomMessage").some(i => i.toString().includes("window.postMessage")),
            BCFriendList: ServerSocket.listeners("AccountQueryResult").some(i => i.toString().includes("f_t_body.innerText")),
            Curse: typeof w.CursedStarter === "function" ? (`${w.currentManifestVersion}` || true) : false,
            RPScript: typeof (Player === null || Player === void 0 ? void 0 : Player.RPSScriptstatus) === "string" ? (`${Player === null || Player === void 0 ? void 0 : Player.RPSScriptstatus}` || true) : false,
            Moaner: w.M_MOANER_scriptOn !== undefined ? (`${w.M_MOANER_scriptOn}` || true) : false,
            BcUtil: typeof w.StartBcUtil === "function",
            QuickAccessMenu: typeof w.OLDmenu === "function" && typeof w.NEWmenu === "function",
            ImprovedStruggle: typeof w.OLDclick === "function" && typeof w.NEWclick === "function",
            BCE: w.BCE_VERSION !== undefined ? (`${w.BCE_VERSION}` || true) : false,
        };
    }
    function DrawImageEx(Source, X, Y, { Canvas = MainCanvas, Alpha = 1, SourcePos, Width, Height, Invert = false, Mirror = false, Zoom = 1, } = {}) {
        if (typeof Source === "string") {
            Source = DrawGetImage(Source);
            if (!Source.complete)
                return false;
            if (!Source.naturalWidth)
                return true;
        }
        const sizeChanged = Width != null || Height != null;
        if (Width == null) {
            Width = SourcePos ? SourcePos[2] : Source.width;
        }
        if (Height == null) {
            Height = SourcePos ? SourcePos[3] : Source.height;
        }
        Canvas.save();
        Canvas.globalCompositeOperation = "source-over";
        Canvas.globalAlpha = Alpha;
        Canvas.translate(X, Y);
        if (Zoom !== 1) {
            Canvas.scale(Zoom, Zoom);
        }
        if (Invert) {
            Canvas.transform(1, 0, 0, -1, 0, Height);
        }
        if (Mirror) {
            Canvas.transform(-1, 0, 0, 1, Width, 0);
        }
        if (SourcePos) {
            Canvas.drawImage(Source, SourcePos[0], SourcePos[1], SourcePos[2], SourcePos[3], 0, 0, Width, Height);
        }
        else if (sizeChanged) {
            Canvas.drawImage(Source, 0, 0, Width, Height);
        }
        else {
            Canvas.drawImage(Source, 0, 0);
        }
        Canvas.restore();
        return true;
    }
    function DrawImageBCX(Name, X, Y, options) {
        if (!BCXSource) {
            return true;
        }
        return DrawImageEx(BCXSource + "resources/" + Name, X, Y, options);
    }
    function smartGetAsset(item) {
        const asset = Asset.includes(item) ? item : item.Asset;
        if (!Asset.includes(asset)) {
            throw new Error("Failed to convert item to asset");
        }
        return asset;
    }
    function smartGetAssetGroup(item) {
        const group = AssetGroup.includes(item) ? item : Asset.includes(item) ? item.Group : item.Asset.Group;
        if (!AssetGroup.includes(group)) {
            throw new Error("Failed to convert item to group");
        }
        return group;
    }
    function isCloth(item, allowCosplay = false) {
        const group = smartGetAssetGroup(item);
        return group.Category === "Appearance" && group.AllowNone && group.Clothing && (allowCosplay || !group.BodyCosplay);
    }
    function isCosplay(item) {
        const group = smartGetAssetGroup(item);
        return group.Category === "Appearance" && group.AllowNone && group.Clothing && group.BodyCosplay;
    }
    function isBody(item) {
        const group = smartGetAssetGroup(item);
        return group.Category === "Appearance" && !group.Clothing;
    }
    function isBind(item, excludeSlots = ["ItemNeck", "ItemNeckAccessories", "ItemNeckRestraints"]) {
        const group = smartGetAssetGroup(item);
        if (group.Category !== "Item" || group.BodyCosplay)
            return false;
        return !excludeSlots.includes(group.Name);
    }
    function getCharacterName(memberNumber, defaultText = null) {
        var _a, _b;
        const c = getChatroomCharacter(memberNumber);
        if (c) {
            return c.Name;
        }
        if (Player.MemberNumber === memberNumber) {
            return Player.Name;
        }
        for (const char of ChatRoomCharacter) {
            if (char.MemberNumber === memberNumber)
                return char.Name;
            if (((_a = char.Ownership) === null || _a === void 0 ? void 0 : _a.MemberNumber) === memberNumber)
                return char.Ownership.Name;
            if (Array.isArray(char.Lovership)) {
                for (const lover of char.Lovership) {
                    if (lover.MemberNumber === memberNumber)
                        return lover.Name;
                }
            }
        }
        const friendName = (_b = Player.FriendNames) === null || _b === void 0 ? void 0 : _b.get(memberNumber);
        if (friendName)
            return friendName;
        return defaultText;
    }
    function getCharacterNickname(memberNumber, defaultText = null) {
        const relNickname = RelationshipsGetNickname(memberNumber);
        if (relNickname != null)
            return relNickname;
        const c = getChatroomCharacter(memberNumber);
        if (c)
            return c.Nickname;
        return getCharacterName(memberNumber, defaultText);
    }
    function itemColorsEquals(color1, color2) {
        if (color1 == null) {
            color1 = "Default";
        }
        else if (Array.isArray(color1) && color1.length === 1) {
            color1 = color1[0];
        }
        if (color2 == null) {
            color2 = "Default";
        }
        else if (Array.isArray(color2) && color2.length === 1) {
            color2 = color2[0];
        }
        return (!Array.isArray(color1) || !Array.isArray(color2)) ? color1 === color2 : CommonArraysEqual(color1, color2);
    }
    function showHelp(helpText) {
        DrawHoverElements.push(() => {
            MainCanvas.save();
            MainCanvas.fillStyle = "#ffff88";
            MainCanvas.fillRect(1000, 190, 800, 600);
            MainCanvas.strokeStyle = "Black";
            MainCanvas.strokeRect(1000, 190, 800, 600);
            MainCanvas.textAlign = "left";
            DrawTextWrap(helpText, 1020 - 760 / 2, 210, 760, 560, "black");
            MainCanvas.restore();
        });
    }
    function getCurrentRoomData() {
        if (!ChatRoomData)
            return null;
        return omit(ChatRoomData, "Character");
    }
    function updateChatroom(newData) {
        const data = getCurrentRoomData();
        if (!ServerPlayerIsInChatRoom() || !ChatRoomPlayerIsAdmin() || !data)
            return false;
        const Room = { ...data, ...newData };
        Room.Limit = String(Room.Limit);
        ServerSend("ChatRoomAdmin", { MemberNumber: Player.ID, Action: "Update", Room });
        return true;
    }
    function drawTypingIndicatorSpeechBubble(ctx, x, y, width, height, alpha, emote = false) {
        ctx.save();
        ctx.globalAlpha = alpha;
        ctx.translate(x, y);
        ctx.scale(width / 50, height / 50);
        ctx.fillStyle = "white";
        ctx.strokeStyle = "black";
        ctx.lineWidth = 3;
        let p = new Path2D(icon_Typing_base);
        ctx.fill(p);
        ctx.stroke(p);
        ctx.fillStyle = "black";
        p = new Path2D(emote ? icon_Typing_star : icon_Typing_dot);
        for (const dx of [0, 12, 12]) {
            ctx.translate(dx, 0);
            ctx.fill(p);
        }
        ctx.restore();
    }
    function drawIcon(ctx, icon, x, y, width, height, baseSize, alpha, lineWidth, fillColor, strokeColor = "black") {
        ctx.save();
        ctx.globalAlpha = alpha;
        ctx.translate(x, y);
        ctx.scale(width / baseSize, height / baseSize);
        ctx.fillStyle = fillColor;
        if (strokeColor) {
            ctx.strokeStyle = strokeColor;
        }
        ctx.lineWidth = lineWidth;
        const p = new Path2D(icon);
        ctx.fill(p);
        if (strokeColor) {
            ctx.stroke(p);
        }
        ctx.restore();
    }
    function BCXDrawTextWrap(Text, X, Y, Width, Height, ForeColor, BackColor, MaxLine) {
        MainCanvas.save();
        if (BackColor != null) {
            MainCanvas.fillStyle = BackColor;
            MainCanvas.fillRect(X, Y, Width, Height);
            MainCanvas.lineWidth = 2;
            MainCanvas.strokeStyle = ForeColor;
            MainCanvas.strokeRect(X, Y, Width, Height);
        }
        if (!Text)
            return;
        if (MainCanvas.textAlign === "center") {
            X += Math.floor(Width / 2);
        }
        const lines = SubdivideTextSize(Text, Width, MaxLine);
        Y = Math.round(Y + (Height / 2) - ((lines.length - 1) * 23));
        for (const line of lines) {
            MainCanvas.fillText(line, X, Y);
            Y += 46;
        }
        MainCanvas.restore();
    }
    function SubdivideLine(Text, Width) {
        if (MainCanvas.measureText(Text).width <= Width)
            return [Text];
        const lines = [];
        let line = "";
        for (const word of Text.split(" ")) {
            const testLine = line + " " + word;
            if (line && MainCanvas.measureText(testLine).width > Width) {
                lines.push(line);
                line = word;
            }
            else
                line = testLine;
        }
        if (line) {
            lines.push(line);
        }
        return lines;
    }
    function SubdivideTextSize(Text, Width, MaxLine) {
        const initialLines = Text.split("\n").map(l => l.trim());
        if (MaxLine && initialLines.length > MaxLine) {
            MaxLine = undefined;
        }
        const finalLines = [];
        for (const line of initialLines) {
            finalLines.push(...SubdivideLine(line, Width));
        }
        if (MaxLine && finalLines.length > MaxLine) {
            MainCanvas.font = (parseInt(MainCanvas.font.substring(0, 2), 10) - 2).toString() + "px arial";
            return SubdivideTextSize(Text, Width, MaxLine);
        }
        return finalLines;
    }

    var ThemeRoomType;
    (function (ThemeRoomType) {
        ThemeRoomType[ThemeRoomType["Afk"] = 0] = "Afk";
        ThemeRoomType[ThemeRoomType["Rp"] = 1] = "Rp";
        ThemeRoomType[ThemeRoomType["Chill"] = 2] = "Chill";
        ThemeRoomType[ThemeRoomType["Kidnap"] = 3] = "Kidnap";
        ThemeRoomType[ThemeRoomType["Tie"] = 4] = "Tie";
        ThemeRoomType[ThemeRoomType["Market"] = 5] = "Market";
        ThemeRoomType[ThemeRoomType["Game"] = 6] = "Game";
        ThemeRoomType[ThemeRoomType["Other"] = 99] = "Other";
    })(ThemeRoomType || (ThemeRoomType = {}));
    var ThemeRoomSetting;
    (function (ThemeRoomSetting) {
        ThemeRoomSetting[ThemeRoomSetting["Adventure"] = 0] = "Adventure";
        ThemeRoomSetting[ThemeRoomSetting["Fantasy"] = 1] = "Fantasy";
        ThemeRoomSetting[ThemeRoomSetting["Historic"] = 2] = "Historic";
        ThemeRoomSetting[ThemeRoomSetting["Modern"] = 3] = "Modern";
        ThemeRoomSetting[ThemeRoomSetting["Romantic"] = 4] = "Romantic";
        ThemeRoomSetting[ThemeRoomSetting["School"] = 5] = "School";
        ThemeRoomSetting[ThemeRoomSetting["SciFi"] = 6] = "SciFi";
    })(ThemeRoomSetting || (ThemeRoomSetting = {}));
    const TR_TYPE_NAMES = {
        [ThemeRoomType.Afk]: "AFK/Storage",
        [ThemeRoomType.Rp]: "Roleplaying",
        [ThemeRoomType.Chill]: "Chill/Chat",
        [ThemeRoomType.Kidnap]: "Kidnap/Danger",
        [ThemeRoomType.Tie]: "Tying all up",
        [ThemeRoomType.Market]: "Market/Auction",
        [ThemeRoomType.Game]: "Game",
        [ThemeRoomType.Other]: "Undefined",
    };
    function stringifyLimits(room) {
        return Array.from(room.Limits.values())
            .sort((a, b) => THEME_ROOM_LIMITS.indexOf(a) - THEME_ROOM_LIMITS.indexOf(b))
            .join(", ");
    }
    const THEME_ROOM_LIMITS = [
        "no-anal",
        "no-animals",
        "no-fantasy",
        "no-limits",
        "no-males",
        "no-sexual",
        "no-tentacles",
    ];
    const ROOM_TEMPLATES_COUNT = 4;
    let overwriteMode;
    let onSecondPage = false;
    let onRoomCreateScreen = false;
    const MAX_DESCRIPTION_CHARS = 80;
    const MAX_SPACES_AND_BRACKETS = 8;
    const MAX_TR_TYPE_LENGTH = Math.max(...(Object.values(TR_TYPE_NAMES).map(el => el.length)));
    const MAX_TR_SETTING_LENGTH = Math.max(...(Object.keys(ThemeRoomSetting).map(el => el.length)));
    const MAX_SPACE_FOR_TR_LIMITS = MAX_DESCRIPTION_CHARS - MAX_SPACES_AND_BRACKETS - MAX_TR_TYPE_LENGTH - MAX_TR_SETTING_LENGTH;
    const GREET_DELAY = 600000;
    const nextGreet = new Map();
    const currentThemeRoom = {
        Type: ThemeRoomType.Other,
        Setting: undefined,
        Limits: new Set(),
        BlockCategories: [],
        Background: "",
        IntroText: "",
    };
    let onThemeRoomSubpage = false;
    let roomGreeting = "";
    let greetingActiveNotificationGiven = false;
    let input = document.getElementById(`INTRO_TEXT`);
    function serializeThemeRoom(value) {
        return JSON.stringify({
            ...value,
            Limits: Array.from(value.Limits),
        });
    }
    function parseThemeRoom(value) {
        let parsed;
        if (value.length < 1) {
            InfoBeep(`BCX: Import error: No data`, 5000);
            return;
        }
        try {
            parsed = JSON.parse(value);
            if (!isObject$1(parsed)) {
                InfoBeep(`BCX: Import error: Bad data`, 5000);
                return;
            }
        }
        catch (error) {
            console.warn(error);
            InfoBeep(`BCX: Import error: Bad data`, 5000);
            return;
        }
        currentThemeRoom.Type = typeof parsed.Type === "number" && ThemeRoomType[parsed.Type] !== undefined ? parsed.Type : ThemeRoomType.Other;
        currentThemeRoom.Setting = typeof parsed.Setting === "number" && ThemeRoomSetting[parsed.Setting] !== undefined ? parsed.Setting : undefined;
        currentThemeRoom.Limits = new Set(Array.isArray(parsed.Limits) ? parsed.Limits.filter(i => THEME_ROOM_LIMITS.includes(i)) : []);
        currentThemeRoom.BlockCategories = Array.isArray(parsed.BlockCategories) ? parsed.BlockCategories.filter(i => typeof i === "string") : [];
        currentThemeRoom.Background = typeof parsed.Background === "string" ? parsed.Background : "";
        currentThemeRoom.IntroText = typeof parsed.IntroText === "string" ? parsed.IntroText : "";
    }
    function ThemeRoomLoad() {
        document.addEventListener("paste", PasteListener);
        hookFunction("ChatRoomSyncMemberLeave", 5, (args, next) => {
            next(args);
            const R = args[0];
            if (nextGreet.has(R.SourceMemberNumber)) {
                nextGreet.set(R.SourceMemberNumber, Date.now() + GREET_DELAY);
            }
        });
        hookFunction("ChatRoomAddCharacterToChatRoom", 6, (args, next) => {
            const size = ChatRoomCharacter.length;
            next(args);
            if (roomGreeting === "" || !ChatRoomPlayerIsAdmin()) {
                return;
            }
            if (size < ChatRoomCharacter.length) {
                const C = args[0];
                if (C.MemberNumber !== undefined &&
                    nextGreet.has(C.MemberNumber) &&
                    nextGreet.get(C.MemberNumber) < Date.now()) {
                    nextGreet.delete(C.MemberNumber);
                }
                BCX_setTimeout(() => {
                    if (!ChatRoomCharacter.includes(C) ||
                        C.MemberNumber === undefined ||
                        (nextGreet.has(C.MemberNumber) &&
                            nextGreet.get(C.MemberNumber) >= Date.now()))
                        return;
                    nextGreet.set(C.MemberNumber, 0);
                    ServerSend("ChatRoomChat", { Content: `*${roomGreeting}`, Type: "Emote", Target: C.MemberNumber });
                }, 5000);
            }
        });
        hookFunction("ChatRoomSync", 4, (args, next) => {
            next(args);
            if (!greetingActiveNotificationGiven && roomGreeting !== "" && ChatRoomPlayerIsAdmin()) {
                greetingActiveNotificationGiven = true;
                ChatRoomSendLocal("Every person newly joining this room will be greeted with the introduction message you set during theme room creation. " +
                    "You and everyone else in the room will not see the greeting. It will also only be sent while you are room admin. " +
                    "Leaving this room will cancel sending it.");
            }
        });
        hookFunction("ChatRoomClearAllElements", 3, (args, next) => {
            greetingActiveNotificationGiven = false;
            roomGreeting = "";
            return next(args);
        });
    }
    function ChatSettingsExtraExit() {
        if (onThemeRoomSubpage) {
            ChatSettingsThemeRoomExit();
        }
    }
    function ChatSettingsThemeRoomRun() {
        MainCanvas.textAlign = "left";
        DrawText(`1. Select the room type:`, 120, 100, "Black", "Gray");
        DrawText(`2. Optionally, select one room setting:`, 745, 100, "Black", "Gray");
        DrawText(`3. Optionally, select limits for the room:`, 120, 480, "Black", "Gray");
        DrawText(`4. Optionally, write a room introduction message/greeting that everyone joining will see as emote:`, 120, 700, "Black", "Gray");
        MainCanvas.textAlign = "center";
        DrawImageEx("Backgrounds/" + currentThemeRoom.Background + ".jpg", 1480, 75, { Width: 420, Height: 245 });
        if (clipboardAvailable) {
            DrawButton(1480, 340, 193, 50, "Export", "White", "", "Export everything onscreen");
            DrawButton(1705, 340, 193, 50, "Import", "White", "", "Import everything onscreen");
        }
        DrawButton(120, 130, 260, 60, TR_TYPE_NAMES[ThemeRoomType.Afk], currentThemeRoom.Type === ThemeRoomType.Afk ? "#FEC5C5" : "White");
        DrawButton(120, 205, 260, 60, TR_TYPE_NAMES[ThemeRoomType.Chill], currentThemeRoom.Type === ThemeRoomType.Chill ? "#FEC5C5" : "white");
        DrawButton(120, 280, 260, 60, TR_TYPE_NAMES[ThemeRoomType.Tie], currentThemeRoom.Type === ThemeRoomType.Tie ? "#FEC5C5" : "white");
        DrawButton(120, 355, 260, 60, TR_TYPE_NAMES[ThemeRoomType.Game], currentThemeRoom.Type === ThemeRoomType.Game ? "#FEC5C5" : "white");
        DrawButton(395, 130, 260, 60, TR_TYPE_NAMES[ThemeRoomType.Rp], currentThemeRoom.Type === ThemeRoomType.Rp ? "#FEC5C5" : "white");
        DrawButton(395, 205, 260, 60, TR_TYPE_NAMES[ThemeRoomType.Kidnap], currentThemeRoom.Type === ThemeRoomType.Kidnap ? "#FEC5C5" : "white");
        DrawButton(395, 280, 260, 60, TR_TYPE_NAMES[ThemeRoomType.Market], currentThemeRoom.Type === ThemeRoomType.Market ? "#FEC5C5" : "white");
        DrawButton(395, 355, 260, 60, TR_TYPE_NAMES[ThemeRoomType.Other], currentThemeRoom.Type === ThemeRoomType.Other ? "#FEC5C5" : "white");
        DrawButton(735, 130, 200, 60, ThemeRoomSetting[0], currentThemeRoom.Setting === ThemeRoomSetting.Adventure ? "#FEC5C5" : "White");
        DrawButton(735, 205, 200, 60, ThemeRoomSetting[2], currentThemeRoom.Setting === ThemeRoomSetting.Historic ? "#FEC5C5" : "white");
        DrawButton(735, 280, 200, 60, ThemeRoomSetting[4], currentThemeRoom.Setting === ThemeRoomSetting.Romantic ? "#FEC5C5" : "white");
        DrawButton(735, 355, 200, 60, ThemeRoomSetting[6], currentThemeRoom.Setting === ThemeRoomSetting.SciFi ? "#FEC5C5" : "white");
        DrawButton(950, 130, 200, 60, ThemeRoomSetting[1], currentThemeRoom.Setting === ThemeRoomSetting.Fantasy ? "#FEC5C5" : "white");
        DrawButton(950, 205, 200, 60, ThemeRoomSetting[3], currentThemeRoom.Setting === ThemeRoomSetting.Modern ? "#FEC5C5" : "white");
        DrawButton(950, 280, 200, 60, ThemeRoomSetting[5], currentThemeRoom.Setting === ThemeRoomSetting.School ? "#FEC5C5" : "white");
        for (const a of THEME_ROOM_LIMITS) {
            DrawButton(120 + THEME_ROOM_LIMITS.indexOf(a) * 245, 510, 230, 54, a, currentThemeRoom.Limits.has(a) ? "#FEC5C5" : "white");
        }
        MainCanvas.textAlign = "left";
        DrawText(`Blocked items:`, 910, 465, "Black", "Gray");
        DrawCheckbox(1170, 465 - 32, 60, 60, "ABDL", currentThemeRoom.BlockCategories.includes("ABDL"));
        DrawCheckbox(1400, 465 - 32, 60, 60, "Fantasy", currentThemeRoom.BlockCategories.includes("Fantasy"));
        DrawCheckbox(1660, 465 - 32, 60, 60, "SciFi", currentThemeRoom.BlockCategories.includes("SciFi"));
        MainCanvas.textAlign = "center";
        if (!input) {
            input = document.createElement("textarea");
            input.id = `INTRO_TEXT`;
            input.name = `INTRO_TEXT`;
            input.value = currentThemeRoom.IntroText;
            input.maxLength = 990;
            input.setAttribute("screen-generated", CurrentScreen);
            input.className = "HideOnPopup";
            input.oninput = () => {
                if (!input)
                    return;
                currentThemeRoom.IntroText = input.value;
            };
            document.body.appendChild(input);
        }
        else {
            input.value = currentThemeRoom.IntroText;
        }
        if (input && document.activeElement === input) {
            ElementPositionFix(`INTRO_TEXT`, 36, 120, 85, 1150, 795);
        }
        else {
            ElementPositionFix(`INTRO_TEXT`, 28, 120, 732, 1150, 150);
        }
        DrawButton(1450, 830, 180, 64, "OK", "white");
        DrawButton(1670, 830, 200, 64, "Cancel", "white");
    }
    function PasteListener(ev) {
        if (onThemeRoomSubpage && document.activeElement !== input) {
            ev.preventDefault();
            ev.stopImmediatePropagation();
            const data = (ev.clipboardData || window.clipboardData).getData("text");
            parseThemeRoom(data);
        }
    }
    function ChatSettingsThemeRoomClick() {
        if (MouseIn(1480, 75, 420, 245)) {
            ElementToggleGeneratedElements("ChatCreate", false);
            BackgroundSelectionMake(ChatCreateBackgroundList, ChatCreateBackgroundList.indexOf(onRoomCreateScreen ? ChatCreateBackgroundSelect : ChatAdminBackgroundSelect), Name => {
                currentThemeRoom.Background = Name;
            });
        }
        if (clipboardAvailable) {
            if (MouseIn(1480, 340, 193, 50)) {
                BCX_setTimeout(async () => {
                    await navigator.clipboard.writeText(serializeThemeRoom(currentThemeRoom));
                    InfoBeep(`BCX: Copied to clipboard!`, 5000);
                }, 0);
            }
            if (MouseIn(1705, 340, 193, 50)) {
                BCX_setTimeout(async () => {
                    if (typeof navigator.clipboard.readText !== "function") {
                        InfoBeep(`BCX: Please press Ctrl+V`, 5000);
                        return;
                    }
                    const data = await navigator.clipboard.readText();
                    console.info(data);
                    parseThemeRoom(data);
                }, 0);
            }
        }
        if (MouseIn(120, 130, 260, 60)) {
            currentThemeRoom.Type = ThemeRoomType.Afk;
        }
        if (MouseIn(120, 205, 260, 60)) {
            currentThemeRoom.Type = ThemeRoomType.Chill;
        }
        if (MouseIn(120, 280, 260, 60)) {
            currentThemeRoom.Type = ThemeRoomType.Tie;
        }
        if (MouseIn(120, 355, 260, 60)) {
            currentThemeRoom.Type = ThemeRoomType.Game;
        }
        if (MouseIn(395, 130, 260, 60)) {
            currentThemeRoom.Type = ThemeRoomType.Rp;
        }
        if (MouseIn(395, 205, 260, 60)) {
            currentThemeRoom.Type = ThemeRoomType.Kidnap;
        }
        if (MouseIn(395, 280, 260, 60)) {
            currentThemeRoom.Type = ThemeRoomType.Market;
        }
        if (MouseIn(395, 355, 260, 60)) {
            currentThemeRoom.Type = ThemeRoomType.Other;
        }
        if (MouseIn(735, 130, 200, 60)) {
            ToggleThemeRoomSetting(ThemeRoomSetting.Adventure);
        }
        if (MouseIn(735, 205, 200, 60)) {
            ToggleThemeRoomSetting(ThemeRoomSetting.Historic);
        }
        if (MouseIn(735, 280, 200, 60)) {
            ToggleThemeRoomSetting(ThemeRoomSetting.Romantic);
        }
        if (MouseIn(735, 355, 200, 60)) {
            ToggleThemeRoomSetting(ThemeRoomSetting.SciFi);
        }
        if (MouseIn(950, 130, 200, 60)) {
            ToggleThemeRoomSetting(ThemeRoomSetting.Fantasy);
        }
        if (MouseIn(950, 205, 200, 60)) {
            ToggleThemeRoomSetting(ThemeRoomSetting.Modern);
        }
        if (MouseIn(950, 280, 200, 60)) {
            ToggleThemeRoomSetting(ThemeRoomSetting.School);
        }
        for (const a of THEME_ROOM_LIMITS) {
            if (MouseIn(120 + THEME_ROOM_LIMITS.indexOf(a) * 245, 510, 230, 54)) {
                if (currentThemeRoom.Limits.has(a)) {
                    currentThemeRoom.Limits.delete(a);
                }
                else {
                    currentThemeRoom.Limits.add(a);
                    if (stringifyLimits(currentThemeRoom).length + 2 > MAX_SPACE_FOR_TR_LIMITS) {
                        currentThemeRoom.Limits.delete(a);
                        InfoBeep(`BCX: No more space to add this limit.`, 5000);
                    }
                }
            }
        }
        if (MouseIn(1170, 465 - 32, 60, 60)) {
            if (currentThemeRoom.BlockCategories.includes("ABDL")) {
                currentThemeRoom.BlockCategories.splice(currentThemeRoom.BlockCategories.indexOf("ABDL"), 1);
            }
            else {
                currentThemeRoom.BlockCategories.push("ABDL");
            }
        }
        if (MouseIn(1400, 465 - 32, 60, 60)) {
            if (currentThemeRoom.BlockCategories.includes("Fantasy")) {
                currentThemeRoom.BlockCategories.splice(currentThemeRoom.BlockCategories.indexOf("Fantasy"), 1);
            }
            else {
                currentThemeRoom.BlockCategories.push("Fantasy");
            }
        }
        if (MouseIn(1660, 465 - 32, 60, 60)) {
            if (currentThemeRoom.BlockCategories.includes("SciFi")) {
                currentThemeRoom.BlockCategories.splice(currentThemeRoom.BlockCategories.indexOf("SciFi"), 1);
            }
            else {
                currentThemeRoom.BlockCategories.push("SciFi");
            }
        }
        if (MouseIn(1450, 830, 180, 64)) {
            const inputDescription = document.getElementById("InputDescription");
            if (onRoomCreateScreen) {
                ChatBlockItemCategory = currentThemeRoom.BlockCategories;
                ChatCreateBackgroundSelect = currentThemeRoom.Background;
            }
            else {
                ChatAdminBlockCategory = currentThemeRoom.BlockCategories;
                ChatAdminBackgroundSelect = currentThemeRoom.Background;
            }
            if (inputDescription)
                inputDescription.value = `[${TR_TYPE_NAMES[currentThemeRoom.Type]}]` +
                    `${currentThemeRoom.Setting ? " [" + ThemeRoomSetting[currentThemeRoom.Setting] + "]" : ""}` +
                    `${currentThemeRoom.Limits.size === 0 ? "" : " [" + stringifyLimits(currentThemeRoom) + "]"}`;
            roomGreeting = currentThemeRoom.IntroText;
            onSecondPage = !onSecondPage;
            ChatSettingsThemeRoomExit();
            return;
        }
        if (MouseIn(1670, 830, 200, 64)) {
            ChatSettingsThemeRoomExit();
            return;
        }
    }
    function ToggleThemeRoomSetting(newSetting) {
        if (currentThemeRoom.Setting !== newSetting) {
            currentThemeRoom.Setting = newSetting;
        }
        else {
            currentThemeRoom.Setting = undefined;
        }
    }
    function ChatSettingsThemeRoomLoad() {
        if (onRoomCreateScreen) {
            currentThemeRoom.Background = ChatCreateBackgroundSelect;
            currentThemeRoom.BlockCategories = ChatBlockItemCategory.slice();
        }
        else {
            currentThemeRoom.Background = ChatAdminBackgroundSelect;
            currentThemeRoom.BlockCategories = ChatAdminBlockCategory.slice();
        }
    }
    function ChatSettingsThemeRoomExit() {
        onThemeRoomSubpage = false;
        if (input) {
            input.remove();
            input = undefined;
        }
    }
    function ChatSettingsExtraRun() {
        var _a;
        if (onThemeRoomSubpage) {
            return ChatSettingsThemeRoomRun();
        }
        DrawText("Back", 169, 110, "Black", "Gray");
        DrawButton(124, 147, 90, 90, "", "White", "Icons/West.png");
        DrawText("Standardize your room description so the room's purpose is clear and it can easily be filtered:", 1000, 300, "Black", "Gray");
        DrawButton(800, 360, 380, 80, "Create a theme room", "white");
        DrawText("Templates for storing / overwriting current room information & settings (press a name to toggle auto-apply)", 1000, 650, "Black", "Gray");
        for (let i = 0; i < ROOM_TEMPLATES_COUNT; i++) {
            const X = 124 + i * 455;
            const template = (_a = modStorage.roomTemplates) === null || _a === void 0 ? void 0 : _a[i];
            let templateName = template ? (template.Name === "" ? "- template without room name -" : template.Name) : "- empty template slot -";
            const tick = Date.now() % 6000;
            if ((template === null || template === void 0 ? void 0 : template.AutoApply) && tick < 3000) {
                templateName = "- auto-applied default -";
            }
            if (template)
                DrawImageEx("Backgrounds/" + template.Background + ".jpg", X, 700, { Alpha: MouseIn(X, 700, 400, 200) ? 0.3 : 1, Width: 400, Height: 200 });
            DrawButton(X, 700, 340, 64, "", template ? template.AutoApply ? "rgba(136 , 136 , 204, 0.5)" : "rgba(255, 255, 255, 0.5)" : "#ddd", "", !template ? undefined : "Use as room creation dialog default", !template);
            DrawTextFit(templateName, X + 170, 700 + 34, 325, "Black", "Gray");
            DrawButton(X + 340, 700, 60, 64, "X", template ? "rgba(255, 255, 255, 0.3)" : "#ddd", "", !template ? undefined : "Delete template", !template);
            if (overwriteMode === i) {
                DrawButton(X, 835, 150, 64, "", template ? "rgba(255, 255, 255, 0.2)" : "#ddd", "", undefined, !template);
                DrawText("Load", X + 51, 835 + 32, "Black");
                DrawButton(X + 170, 835, 230, 64, "Overwrite ?", "rgba(255, 242, 0, 0.2)", "");
            }
            else {
                DrawButton(X, 835, 230, 64, "", template ? "rgba(255, 255, 255, 0.2)" : "#ddd", "", undefined, !template);
                DrawText("Load", X + 51, 835 + 32, "Black");
                DrawButton(X + 250, 835, 150, 64, "    Save", "rgba(255, 255, 255, 0.2)", "");
            }
        }
    }
    function ChatSettingsExtraClick(create, apply) {
        var _a;
        if (onThemeRoomSubpage) {
            return ChatSettingsThemeRoomClick();
        }
        if (MouseIn(124, 147, 90, 90)) {
            overwriteMode = undefined;
            onSecondPage = !onSecondPage;
            return;
        }
        if (MouseIn(800, 360, 380, 80)) {
            overwriteMode = undefined;
            onThemeRoomSubpage = !onThemeRoomSubpage;
            ChatSettingsThemeRoomLoad();
            return;
        }
        if (!modStorage.roomTemplates) {
            return;
        }
        for (let i = 0; i < ROOM_TEMPLATES_COUNT; i++) {
            const X = 124 + i * 455;
            const template = modStorage.roomTemplates[i];
            if (MouseIn(X, 700, 340, 64) && template) {
                if (template.AutoApply) {
                    delete template.AutoApply;
                }
                else {
                    for (const t of modStorage.roomTemplates) {
                        if (t) {
                            delete t.AutoApply;
                        }
                    }
                    template.AutoApply = true;
                }
                modStorageSync();
                overwriteMode = undefined;
                return;
            }
            if (MouseIn(X + 340, 700, 60, 64)) {
                modStorage.roomTemplates[i] = null;
                modStorageSync();
                overwriteMode = undefined;
                return;
            }
            if ((overwriteMode === i && MouseIn(X, 835, 150, 64)) || MouseIn(X, 835, 230, 64)) {
                if (template) {
                    const rule = RulesGetRuleState("alt_room_admin_limit");
                    if (rule.isEnforced && ServerPlayerIsInChatRoom() && ChatRoomPlayerIsAdmin() && Player.IsRestrained()) {
                        rule.triggerAttempt();
                        return;
                    }
                    apply(template);
                    overwriteMode = undefined;
                    onSecondPage = !onSecondPage;
                }
                return;
            }
            if (((MouseIn(X + 250, 835, 150, 64) && !modStorage.roomTemplates[i]) || (overwriteMode === i && MouseIn(X + 170, 835, 230, 64)))) {
                modStorage.roomTemplates[i] = {
                    Name: ElementValue("InputName") ? ElementValue("InputName").trim() : "",
                    Description: ElementValue("InputDescription") ? ElementValue("InputDescription").trim() : "",
                    Background: create ? ChatCreateBackgroundSelect : ChatAdminBackgroundSelect,
                    Private: create ? (ChatCreatePrivate ? ChatCreatePrivate : false) : ChatAdminPrivate,
                    Locked: create ? (ChatCreateLocked ? ChatCreateLocked : false) : ChatAdminLocked,
                    Game: create ? ChatCreateGame : ChatAdminGame,
                    Admin: ElementValue("InputAdminList") ? CommonConvertStringToArray(ElementValue("InputAdminList").trim()) : [],
                    Limit: ElementValue("InputSize") ? ElementValue("InputSize").trim() : "",
                    Language: create ? ChatCreateLanguage : ChatAdminLanguage,
                    BlockCategory: cloneDeep(create ? ChatBlockItemCategory : ChatAdminBlockCategory),
                    AutoApply: (_a = modStorage.roomTemplates[i]) === null || _a === void 0 ? void 0 : _a.AutoApply,
                };
                modStorageSync();
                overwriteMode = undefined;
                return;
            }
            else if (MouseIn(X + 250, 835, 150, 64)) {
                overwriteMode = i;
                return;
            }
        }
    }
    class ModuleChatroomAdmin extends BaseModule {
        load() {
            ThemeRoomLoad();
            if (!Array.isArray(modStorage.roomTemplates)) {
                modStorage.roomTemplates = [];
            }
            if (modStorage.roomTemplates.length > ROOM_TEMPLATES_COUNT) {
                modStorage.roomTemplates = modStorage.roomTemplates.filter(Boolean).slice(0, ROOM_TEMPLATES_COUNT - 1);
            }
            while (modStorage.roomTemplates.length < ROOM_TEMPLATES_COUNT) {
                modStorage.roomTemplates.push(null);
            }
            for (let i = 0; i < modStorage.roomTemplates.length; i++) {
                if (modStorage.roomTemplates[i] !== null && !isObject$1(modStorage.roomTemplates[i])) {
                    console.warn(`BCX: Resetting invalid room template slot ${i}`, modStorage.roomTemplates[i]);
                    modStorage.roomTemplates[i] = null;
                }
            }
            hookFunction("ChatCreateExit", 0, (args, next) => {
                next(args);
                ChatSettingsExtraExit();
            });
            if (GameVersion === "R79") {
                patchFunction("ChatCreateRun", {
                    'DrawText(TextGet("RoomName"), 535, 110,': 'DrawText(TextGet("RoomName"), 675, 110,',
                });
                patchFunction("ChatCreateRun", {
                    'ElementPosition("InputName", 535, 170, 820);': 'ElementPosition("InputName", 610, 170, 680);',
                });
            }
            else {
                patchFunction("ChatCreateRun", {
                    'DrawText(TextGet("RoomName"), 250, 120,': 'DrawText(TextGet("RoomName"), 370, 120,',
                });
                patchFunction("ChatCreateRun", {
                    'ElementPosition("InputName", 815, 115, 820);': 'ElementPosition("InputName", 865, 115, 720);',
                });
                patchFunction("ChatCreateRun", {
                    'DrawText(TextGet("RoomLanguage"), 250, 205,': 'DrawText(TextGet("RoomLanguage"), 390, 205,',
                });
                patchFunction("ChatCreateRun", {
                    "DrawButton(405, 172,": "DrawButton(505, 172,",
                });
                patchFunction("ChatCreateRun", {
                    'DrawText(TextGet("RoomSize"), 850, 205,': 'DrawText(TextGet("RoomSize"), 950, 205,',
                });
                patchFunction("ChatCreateRun", {
                    'ElementPosition("InputSize", 1099, 200, 250);': 'ElementPosition("InputSize", 1149, 200, 150);',
                });
                patchFunction("ChatCreateClick", {
                    "if (MouseIn(405, 172,": "if (MouseIn(505, 172,",
                });
            }
            hookFunction("ChatCreateRun", 0, (args, next) => {
                onRoomCreateScreen = true;
                if (onSecondPage) {
                    return ChatSettingsExtraRun();
                }
                next(args);
                if (!ChatCreateShowBackgroundMode) {
                    DrawText("More", 169, 110, "Black", "Gray");
                    DrawButton(124, 147, 90, 90, "", "White", icon_BCX);
                    if (MouseIn(124, 147, 90, 90))
                        DrawButtonHover(-36, 70, 64, 64, `More options [BCX]`);
                }
            });
            hookFunction("ChatAdminExit", 0, (args, next) => {
                next(args);
                ChatSettingsExtraExit();
                ChatBlockItemReturnData = {};
            });
            hookFunction("ChatCreateLoad", 0, (args, next) => {
                var _a;
                next(args);
                const template = (_a = modStorage.roomTemplates) === null || _a === void 0 ? void 0 : _a.find(t => t === null || t === void 0 ? void 0 : t.AutoApply);
                if (template &&
                    BackgroundSelectionPreviousScreen !== CurrentScreen &&
                    Object.keys(ChatBlockItemReturnData).length === 0) {
                    const inputName = document.getElementById("InputName");
                    const inputDescription = document.getElementById("InputDescription");
                    const inputAdminList = document.getElementById("InputAdminList");
                    const inputSize = document.getElementById("InputSize");
                    if (inputName)
                        inputName.value = template.Name;
                    if (inputDescription)
                        inputDescription.value = template.Description;
                    ChatCreateBackgroundSelect = template.Background;
                    ChatCreatePrivate = template.Private;
                    ChatCreateLocked = template.Locked;
                    ChatCreateGame = template.Game;
                    if (inputAdminList)
                        inputAdminList.value = template.Admin.toString();
                    if (inputSize)
                        inputSize.value = template.Limit;
                    if (template.Language)
                        ChatCreateLanguage = template.Language;
                    ChatBlockItemCategory = template.BlockCategory;
                }
                BackgroundSelectionPreviousScreen = "";
                ChatBlockItemReturnData = {};
            });
            hookFunction("ChatCreateClick", 0, (args, next) => {
                if (onSecondPage) {
                    return ChatSettingsExtraClick(onRoomCreateScreen, (data) => {
                        const inputName = document.getElementById("InputName");
                        const inputDescription = document.getElementById("InputDescription");
                        const inputAdminList = document.getElementById("InputAdminList");
                        const inputSize = document.getElementById("InputSize");
                        if (inputName)
                            inputName.value = data.Name;
                        if (inputDescription)
                            inputDescription.value = data.Description;
                        ChatCreateBackgroundSelect = data.Background;
                        ChatCreatePrivate = data.Private;
                        ChatCreateLocked = data.Locked;
                        ChatCreateGame = data.Game;
                        if (inputAdminList)
                            inputAdminList.value = data.Admin.toString();
                        if (inputSize)
                            inputSize.value = data.Limit;
                        if (data.Language)
                            ChatCreateLanguage = data.Language;
                        ChatBlockItemCategory = data.BlockCategory;
                    });
                }
                if (MouseIn(124, 147, 90, 90)) {
                    onSecondPage = !onSecondPage;
                    ElementToggleGeneratedElements("ChatCreate", false);
                    return;
                }
                next(args);
            });
            if (GameVersion === "R79") {
                patchFunction("ChatAdminRun", {
                    'DrawText(TextGet("RoomName"), 535, 110,': 'DrawText(TextGet("RoomName"), 675, 110,',
                });
                patchFunction("ChatAdminRun", {
                    'ElementPosition("InputName", 535, 170, 820);': 'ElementPosition("InputName", 610, 170, 680);',
                });
            }
            else {
                patchFunction("ChatAdminRun", {
                    'DrawText(TextGet("RoomName"), 250, 120,': 'DrawText(TextGet("RoomName"), 370, 120,',
                });
                patchFunction("ChatAdminRun", {
                    'ElementPosition("InputName", 815, 115, 820);': 'ElementPosition("InputName", 865, 115, 720);',
                });
                patchFunction("ChatAdminRun", {
                    'DrawText(TextGet("RoomLanguage"), 250, 205,': 'DrawText(TextGet("RoomLanguage"), 390, 205,',
                });
                patchFunction("ChatAdminRun", {
                    "DrawButton(405, 172,": "DrawButton(505, 172,",
                });
                patchFunction("ChatAdminRun", {
                    'DrawText(TextGet("RoomSize"), 850, 205,': 'DrawText(TextGet("RoomSize"), 950, 205,',
                });
                patchFunction("ChatAdminRun", {
                    'ElementPosition("InputSize", 1099, 200, 250);': 'ElementPosition("InputSize", 1149, 200, 150);',
                });
                patchFunction("ChatAdminClick", {
                    "if (MouseIn(405, 172,": "if (MouseIn(505, 172,",
                });
            }
            hookFunction("ChatAdminRun", 0, (args, next) => {
                onRoomCreateScreen = false;
                if (onSecondPage) {
                    return ChatSettingsExtraRun();
                }
                next(args);
                DrawText("More", 169, 110, "Black", "Gray");
                DrawButton(124, 147, 90, 90, "", "White", icon_BCX);
                if (MouseIn(124, 147, 90, 90))
                    DrawButtonHover(-36, 70, 64, 64, `More options [BCX]`);
            });
            hookFunction("ChatAdminClick", 0, (args, next) => {
                if (onSecondPage) {
                    return ChatSettingsExtraClick(onRoomCreateScreen, (data) => {
                        const inputName = document.getElementById("InputName");
                        const inputDescription = document.getElementById("InputDescription");
                        const inputAdminList = document.getElementById("InputAdminList");
                        const inputSize = document.getElementById("InputSize");
                        if (inputName)
                            inputName.value = data.Name;
                        if (inputDescription)
                            inputDescription.value = data.Description;
                        ChatAdminBackgroundSelect = data.Background;
                        ChatAdminPrivate = data.Private;
                        ChatAdminLocked = data.Locked;
                        ChatAdminGame = data.Game;
                        if (inputAdminList)
                            inputAdminList.value = data.Admin.toString();
                        if (inputSize)
                            inputSize.value = data.Limit;
                        if (data.Language)
                            ChatAdminLanguage = data.Language;
                        ChatAdminBlockCategory = data.BlockCategory;
                    });
                }
                if (MouseIn(124, 147, 90, 90)) {
                    onSecondPage = !onSecondPage;
                    ElementToggleGeneratedElements("ChatAdmin", false);
                    return;
                }
                next(args);
            });
        }
        unload() {
            document.removeEventListener("paste", PasteListener);
            if (input) {
                input.remove();
                input = undefined;
            }
        }
    }

    const BACKGROUNDS_BCX_NAME = "[BCX] Hidden";
    function InvisibilityEarbuds() {
        var _a;
        if (((_a = InventoryGet(Player, "ItemEars")) === null || _a === void 0 ? void 0 : _a.Asset.Name) === "BluetoothEarbuds") {
            InventoryRemove(Player, "ItemEars");
        }
        else {
            const asset = Asset.find(A => A.Name === "BluetoothEarbuds");
            if (!asset)
                return;
            Player.Appearance = Player.Appearance.filter(A => A.Asset.Group.Name !== "ItemEars");
            Player.Appearance.push({
                Asset: asset,
                Color: "Default",
                Difficulty: -100,
                Property: {
                    Type: "Light",
                    Effect: [],
                    Hide: AssetGroup.map(A => A.Name).filter(A => A !== "ItemEars"),
                },
            });
            CharacterRefresh(Player);
        }
        ChatRoomCharacterUpdate(Player);
    }
    function processBackgroundCommand(input) {
        if (input.trim() === "") {
            ChatRoomSendLocal(`Try pressing the "tab"-key to show autocomplete options`);
            return false;
        }
        const Background = backgroundList.find(i => i.toLocaleLowerCase() === input.toLocaleLowerCase());
        if (!Background) {
            ChatRoomSendLocal(`Invalid/unknown background`);
            return false;
        }
        if (!updateChatroom({ Background })) {
            ChatRoomSendLocal(`Failed to update room. Are you admin?`);
        }
        return true;
    }
    function processBackgroundCommand_autocomplete(input) {
        return Command_pickAutocomplete(input, backgroundList);
    }
    let antiblind = false;
    function toggleAntiblind() {
        if (!antiblind) {
            const blockRule = RulesGetRuleState("block_antiblind");
            if (blockRule.isEnforced) {
                blockRule.triggerAttempt();
                return false;
            }
            else if (blockRule.inEffect) {
                blockRule.trigger();
            }
        }
        antiblind = !antiblind;
        return true;
    }
    let cardDeck = [];
    let dealersLog = [];
    function shuffleDeck() {
        cardDeck = [];
        dealersLog = [];
        const cardSuits = ["♥", "♦", "♠", "♣"];
        const cardRanks = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"];
        cardSuits.forEach(suit => {
            cardRanks.forEach(rank => {
                cardDeck.push(rank + suit);
            });
        });
        shuffleArray(cardDeck);
        ChatRoomActionMessage(`The dealer took the remaining ${cardDeck.length} cards from the deck and shuffled all cards for a new deck.`);
    }
    function drawCard(target) {
        if (cardDeck.length === 0)
            shuffleDeck();
        const card = cardDeck.pop();
        if (target) {
            ChatRoomActionMessage(`The dealer dealt you this card face down: ${card}`, target);
        }
        else {
            ChatRoomActionMessage(`The dealer openly drew this card face up: ${card}`, target);
        }
        dealersLog.push(`${card} ${target === null ? "was drawn face up" : `was dealt to ${getCharacterName(target, "[unknown name]")} (${target})`}`);
    }
    function drawCards(numberOfCards, membernumbers) {
        for (const target of membernumbers !== null && membernumbers !== void 0 ? membernumbers : [null]) {
            for (let i = 0; i < numberOfCards; i++) {
                drawCard(target);
            }
        }
    }
    function showDealersLog() {
        const middleIndex = Math.ceil(dealersLog.length / 2);
        const firstHalf = dealersLog.slice().splice(0, middleIndex);
        const secondHalf = dealersLog.slice().splice(-middleIndex);
        firstHalf.forEach(entry => ChatRoomActionMessage(entry));
        secondHalf.forEach(entry => {
            BCX_setTimeout(() => {
                ChatRoomActionMessage(entry);
            }, 1100);
        });
    }
    function rollDice(sides, rolls) {
        const result = [];
        for (let i = 0; i < rolls; i++) {
            result.push(Math.floor(Math.random() * sides) + 1);
        }
        ChatRoomSendLocal(`You secretly roll a ${rolls}D${sides}. The result is: ${result.length === 1 ? result : result.join(",") + " = " + result.reduce((a, b) => a + b, 0).toString()}.`);
    }
    const activitiesAllowed = new Set();
    class ModuleClubUtils extends BaseModule {
        init() {
            registerPermission("misc_cheat_allowactivities", {
                name: "Allow using the allowactivities command on this player",
                category: ModuleCategory.Misc,
                defaults: {
                    [Preset.dominant]: [true, AccessLevel.whitelist],
                    [Preset.switch]: [true, AccessLevel.friend],
                    [Preset.submissive]: [true, AccessLevel.friend],
                    [Preset.slave]: [true, AccessLevel.friend],
                },
            });
        }
        load() {
            registerCommandParsed("utility", "dice", "[dice sides | <rolls>d<dice sides>] - Shows only you the result of rolling a dice the given number of times", (args) => {
                let sides = 6;
                let rolls = 1;
                if (args.length < 1) {
                    rollDice(6, 1);
                }
                else {
                    if (/^[0-9]+$/.test(args[0])) {
                        sides = Number.parseInt(args[0], 10);
                        if ((sides < 2) || (sides > 100)) {
                            ChatRoomSendLocal(`The <dice sides> need to be between 2 and 100`);
                            return false;
                        }
                        rollDice(sides, 1);
                    }
                    else if (/^[0-9]+d[0-9]+$/i.test(args[0])) {
                        const split = args[0].split("d");
                        sides = Number.parseInt(split[1], 10);
                        rolls = Number.parseInt(split[0], 10);
                        if ((sides < 2) || (sides > 100)) {
                            ChatRoomSendLocal(`The <dice sides> in <rolls>d<dice sides> need to be between 2 and 100`);
                            return false;
                        }
                        if ((rolls < 1) || (rolls > 100)) {
                            ChatRoomSendLocal(`The <rolls> in <rolls>d<dice sides> need to be between 1 and 100`);
                            return false;
                        }
                        rollDice(sides, rolls);
                    }
                    else {
                        ChatRoomSendLocal(`Usage: .dice [dice sides | <rolls>d<dice sides>] - for instance '.dice 4d6' - all parameters are optional`);
                        return false;
                    }
                }
                return true;
            });
            registerCommandParsed("utility", "deck", "- Draw, deal or shuffle with a 52-card deck. Use '.deck' for more help", (args) => {
                const subcommand = (args[0] || "").toLowerCase();
                if (subcommand === "shuffle") {
                    shuffleDeck();
                }
                else if (subcommand === "showlog") {
                    showDealersLog();
                }
                else if (subcommand === "draw" || subcommand === "deal") {
                    let count = 1;
                    if (args.length >= 2) {
                        if (/^[0-9]+$/.test(args[1])) {
                            count = Number.parseInt(args[1], 10);
                        }
                        else {
                            if (subcommand === "draw") {
                                ChatRoomSendLocal(`Usage: .deck draw <number of cards>`);
                            }
                            else {
                                ChatRoomSendLocal(`Usage: .deck deal <number of cards> <...targets>`);
                            }
                            return false;
                        }
                        if (count > 26 || count < 1) {
                            ChatRoomSendLocal(`You can ${subcommand} at most 26 cards (half the deck) in one go`);
                            return false;
                        }
                    }
                    if (args.length > 2 && subcommand === "draw") {
                        ChatRoomSendLocal(`Cards are "drawn" openly. Did you mean to deal instead?`);
                        return false;
                    }
                    if (args.length <= 2 && subcommand === "deal") {
                        ChatRoomSendLocal(`Cards are "dealt" to someone. Did you mean to draw instead?`);
                        return false;
                    }
                    let targets;
                    if (args.length > 2) {
                        targets = [];
                        for (const target of args.slice(2)) {
                            const character = Command_selectCharacter(target);
                            if (typeof character === "string") {
                                ChatRoomSendLocal(character);
                                return false;
                            }
                            targets.push(character.MemberNumber);
                        }
                    }
                    drawCards(count, targets);
                }
                else {
                    ChatRoomSendLocal(`Usage:\n` +
                        `.deck shuffle - Shuffles all remaining and drawn cards into a new deck\n` +
                        `.deck draw <number of cards> - Draws the < number of cards > from the card deck and reveals them to all players\n` +
                        `.deck deal <number of cards> <...targets> - Deals the < number of cards > to each of the specified player names or member numbers in a hidden way\n` +
                        `.deck showlog - Lists who got each card drawn from the current deck openly in the chat (if proof is needed)\n` +
                        `The deck is a standard 52-card deck. If the deck is empty, it shuffles automatically.`);
                }
                return true;
            }, (argv) => {
                const subcommand = argv[0].toLowerCase();
                if (argv.length <= 1) {
                    return Command_pickAutocomplete(subcommand, ["shuffle", "draw", "deal", "showlog"]);
                }
                if (subcommand === "deal" && argv.length >= 3) {
                    return Command_selectCharacterAutocomplete(argv[argv.length - 1]);
                }
                return [];
            });
            registerCommandParsed("utility", "room", "- Change or administrate the current chat room. Use '.room' for more help", (args) => {
                var _a;
                const subcommand = (args[0] || "").toLowerCase();
                if (!ChatRoomData)
                    return false;
                if (!ChatRoomPlayerIsAdmin()) {
                    ChatRoomSendLocal("You need to be admin in this room to use a .room command");
                    return false;
                }
                else if (subcommand === "locked" || subcommand === "private") {
                    if (args.length === 1 || (args[1] !== "yes" && args[1] !== "no")) {
                        ChatRoomSendLocal(`Add 'yes' or 'no' behind '.room locked' or '.room private'`);
                        return false;
                    }
                    if (subcommand === "locked") {
                        const Locked = args[1] === "yes" ? true : false;
                        updateChatroom({ Locked });
                    }
                    else {
                        const Private = args[1] === "yes" ? true : false;
                        updateChatroom({ Private });
                    }
                }
                else if (subcommand === "size" || subcommand === "limit" || subcommand === "slots") {
                    const size = args.length === 2 && /^[0-9]+$/.test(args[1]) && Number.parseInt(args[1], 10);
                    if (!size || size < 2 || size > 10) {
                        ChatRoomSendLocal(`Needs a number between 2 and 10 as <number> in '.room size <number>'`);
                        return false;
                    }
                    const Limit = size;
                    updateChatroom({ Limit });
                }
                else if (subcommand === "background") {
                    if (args.length !== 2) {
                        ChatRoomSendLocal(`Needs the name of a background (for example: 'MainHall') behind '.room ${subcommand}'`);
                        return false;
                    }
                    return processBackgroundCommand(args[1]);
                }
                else if (subcommand === "promoteall") {
                    for (const character of getAllCharactersInRoom()) {
                        if (!character.isPlayer() && !((_a = ChatRoomData === null || ChatRoomData === void 0 ? void 0 : ChatRoomData.Admin) === null || _a === void 0 ? void 0 : _a.includes(character.MemberNumber))) {
                            ServerSend("ChatRoomAdmin", { MemberNumber: character.MemberNumber, Action: "Promote" });
                        }
                    }
                }
                else if (subcommand === "promote" || subcommand === "demote" || subcommand === "kick" || subcommand === "ban" || subcommand === "permaban") {
                    if (args.length === 1) {
                        ChatRoomSendLocal(`Needs at least one character name oder member number as <target> in '.room ${subcommand} <target1> <target2> <targetN>'`);
                        return false;
                    }
                    const targets = [];
                    for (const target of args.slice(1)) {
                        const character = Command_selectCharacter(target);
                        if (typeof character === "string") {
                            ChatRoomSendLocal(character);
                            return false;
                        }
                        targets.push(character.MemberNumber);
                    }
                    if (subcommand === "promote") {
                        const Admin = arrayUnique(ChatRoomData.Admin.concat(targets));
                        updateChatroom({ Admin });
                    }
                    else if (subcommand === "demote") {
                        const targetsToDemote = new Set(targets);
                        const Admin = ChatRoomData.Admin.filter((target) => {
                            return !targetsToDemote.has(target);
                        });
                        updateChatroom({ Admin });
                    }
                    else if (subcommand === "kick") {
                        for (const target of targets) {
                            ServerSend("ChatRoomAdmin", { MemberNumber: target, Action: "Kick", Publish: false });
                        }
                    }
                    else if (subcommand === "ban") {
                        for (const target of targets) {
                            ServerSend("ChatRoomAdmin", { MemberNumber: target, Action: "Ban", Publish: false });
                        }
                    }
                    else if (subcommand === "permaban") {
                        for (const target of targets) {
                            ServerSend("ChatRoomAdmin", { MemberNumber: target, Action: "Ban", Publish: false });
                            ChatRoomListUpdate(Player.BlackList, true, target);
                        }
                    }
                }
                else if (subcommand === "template") {
                    const slot = args.length === 2 && /^[0-9]+$/.test(args[1]) && Number.parseInt(args[1], 10);
                    if (!slot || slot < 1 || slot > 4) {
                        ChatRoomSendLocal(`Needs a template slot number between 1 and 4 behind '.room template'`);
                        return false;
                    }
                    const template = modStorage && modStorage.roomTemplates && modStorage.roomTemplates[slot - 1];
                    if (!template) {
                        ChatRoomSendLocal(`Unable to find a valid room template in slot ${slot}. You likely need to set one in the chat room creation screen.`);
                        return false;
                    }
                    const size = Number.parseInt(template.Limit, 10);
                    updateChatroom({
                        Name: template.Name,
                        Description: template.Description,
                        Background: template.Background,
                        Private: template.Private,
                        Locked: template.Locked,
                        Game: template.Game,
                        Admin: template.Admin,
                        Limit: size,
                        BlockCategory: template.BlockCategory,
                    });
                }
                else {
                    ChatRoomSendLocal(`Usage:\n` +
                        `.room locked <yes/no> - Locks or unlocks the room\n` +
                        `.room private <yes/no> - Sets the room to be private or public\n` +
                        `.room size <number> - Sets the number of open character slots in the room\n` +
                        `.room background <name> - Changes room background (same as .background)\n` +
                        `.room kick <...targets> - Kicks all space-seperated player names or member numbers\n` +
                        `.room ban <...targets> - Bans all space-seperated player names or member numbers\n` +
                        `.room permaban <...targets> - Bans and blacklists all specified player names or numbers\n` +
                        `.room <promote/demote> <...targets> - Adds or removes admin on all specified player names or numbers\n` +
                        `.room promoteall - Gives admin to all non-admin players in the room\n` +
                        `.room template <1/2/3/4> - Changes the room according to the given BCX room template slot`);
                }
                return true;
            }, (argv) => {
                const subcommand = argv[0].toLowerCase();
                if (argv.length <= 1) {
                    return Command_pickAutocomplete(subcommand, ["locked", "private", "size", "background", "promoteall", "promote", "demote", "kick", "ban", "permaban", "template"]);
                }
                if ((subcommand === "locked" || subcommand === "private") && argv.length >= 2) {
                    return Command_pickAutocomplete(argv[1], ["yes", "no"]);
                }
                if ((subcommand === "promote" || subcommand === "demote" || subcommand === "kick" || subcommand === "ban" || subcommand === "permaban") &&
                    argv.length >= 2) {
                    return Command_selectCharacterAutocomplete(argv[argv.length - 1]);
                }
                if (subcommand === "background" && argv.length === 2) {
                    return processBackgroundCommand_autocomplete(argv[1]);
                }
                return [];
            });
            registerCommand$1("cheats", "antiblind", "- Toggles ability to always see despite items", () => {
                if (toggleAntiblind()) {
                    ChatRoomSendLocal(`Antiblind switched ${antiblind ? "on" : "off"}`);
                    return true;
                }
                return false;
            });
            hookFunction("Player.GetBlindLevel", 9, (args, next) => {
                if (antiblind)
                    return 0;
                return next(args);
            });
            hookFunction("Player.GetBlurLevel", 9, (args, next) => {
                if (antiblind)
                    return 0;
                return next(args);
            });
            hookFunction("Player.HasTints", 9, (args, next) => {
                if (antiblind)
                    return false;
                return next(args);
            });
            registerCommand$1("utility", "background", "<name> - Changes chat room background", processBackgroundCommand, processBackgroundCommand_autocomplete);
            const availableTags = new Set();
            for (const background of BackgroundsList) {
                background.Tag.forEach(t => availableTags.add(t));
            }
            for (const tag of availableTags) {
                if (!BackgroundsTagList.includes(tag)) {
                    BackgroundsTagList.push(tag);
                }
            }
            if (!BackgroundsTagList.includes(BACKGROUNDS_BCX_NAME)) {
                BackgroundsTagList.push(BACKGROUNDS_BCX_NAME);
            }
            for (const background of backgroundList) {
                if (BackgroundsList.some(i => i.Name === background))
                    continue;
                BackgroundsList.push({ Name: background, Tag: [BACKGROUNDS_BCX_NAME] });
                OverridePlayerDialog(background, `[Hidden] ${background}`);
            }
            hookFunction("BackgroundSelectionRun", 0, (args, next) => {
                if (BackgroundSelectionOffset >= BackgroundSelectionView.length)
                    BackgroundSelectionOffset = 0;
                next(args);
            });
            registerCommandParsed("utility", "colour", "<source> <item> <target> - Copies color of certain item from source character to target character", (argv) => {
                if (argv.length !== 3) {
                    ChatRoomSendLocal(`Expected three arguments: <source> <item> <target>`);
                    return false;
                }
                const source = Command_selectCharacter(argv[0]);
                if (typeof source === "string") {
                    ChatRoomSendLocal(source);
                    return false;
                }
                const target = Command_selectCharacter(argv[2]);
                if (typeof target === "string") {
                    ChatRoomSendLocal(target);
                    return false;
                }
                const item = Command_selectWornItem(source, argv[1]);
                if (typeof item === "string") {
                    ChatRoomSendLocal(item);
                    return false;
                }
                const targetItem = target.Character.Appearance.find(A => A.Asset === item.Asset);
                if (!targetItem) {
                    ChatRoomSendLocal(`Target must be wearing the same item`);
                    return false;
                }
                targetItem.Color = Array.isArray(item.Color) ? item.Color.slice() : item.Color;
                CharacterRefresh(target.Character);
                ChatRoomCharacterUpdate(target.Character);
                return true;
            }, (argv) => {
                if (argv.length === 1) {
                    return Command_selectCharacterAutocomplete(argv[0]);
                }
                else if (argv.length === 2) {
                    const source = Command_selectCharacter(argv[0]);
                    if (typeof source !== "string") {
                        return Command_selectWornItemAutocomplete(source, argv[1]);
                    }
                }
                else if (argv.length === 3) {
                    return Command_selectCharacterAutocomplete(argv[2]);
                }
                return [];
            });
            registerCommandParsed("cheats", "allowactivities", "<character> - Allows you to use all activities on target", (argv) => {
                if (argv.length !== 1) {
                    ChatRoomSendLocal(`Expected one argument: <character>`);
                    return false;
                }
                const char = Command_selectCharacter(argv[0]);
                if (typeof char === "string") {
                    ChatRoomSendLocal(char);
                    return false;
                }
                if (activitiesAllowed.has(char.MemberNumber)) {
                    activitiesAllowed.delete(char.MemberNumber);
                    ChatRoomSendLocal(`You can no longer use all activities on ${char.toNicknamedString()}`);
                }
                else if (!char.BCXVersion) {
                    ChatRoomSendLocal(`This cheat can only be used on characters that are using BCX too.`);
                }
                else {
                    char.getPermissionAccess("misc_cheat_allowactivities")
                        .then((res) => {
                        if (res) {
                            activitiesAllowed.add(char.MemberNumber);
                            ChatRoomSendLocal(`You can now use any activities on ${char.toNicknamedString()}, independent of items or clothes she is wearing`);
                        }
                        else {
                            ChatRoomSendLocal(`You are missing the permission 'Allow using the allowactivities command on this player' for ${char.toNicknamedString()}.`);
                        }
                    }, (error) => {
                        console.warn("Error getting permission for allowactivities", error);
                        ChatRoomSendLocal(`Error getting permission to use all activities on ${char.toNicknamedString()}:\n${error}`);
                    });
                }
                return true;
            }, (argv) => {
                if (argv.length === 1) {
                    return Command_selectCharacterAutocomplete(argv[0]);
                }
                return [];
            });
            hookFunction("ActivityCheckPrerequisite", 6, (args, next) => {
                const prereq = args[0];
                const acted = args[2];
                if (!prereq.startsWith("Has") && !prereq.startsWith("TargetHas") && acted.MemberNumber != null && activitiesAllowed.has(acted.MemberNumber))
                    return true;
                return next(args);
            }, null);
            registerCommand$1("utility", "garble", "<level> <message> - Converts the given message to gag talk", (arg) => {
                const chat = document.getElementById("InputChat");
                if (!chat)
                    return false;
                const parsed = /^\s*([0-9]+) (.+)$/.exec(arg);
                if (!parsed) {
                    ChatRoomSendLocal(`Expected two arguments: <level> <message>`);
                    return false;
                }
                const level = Number.parseInt(parsed[1], 10);
                const message = parsed[2].trim();
                const garbled = callOriginal("SpeechGarbleByGagLevel", [level, message]);
                chat.value = garbled;
                return false;
            });
        }
        run() {
            if (ChatCreateBackgroundList != null) {
                ChatCreateBackgroundList = BackgroundsGenerateList(BackgroundSelectionTagList);
            }
        }
        unload() {
            remove(BackgroundsTagList, i => i === BACKGROUNDS_BCX_NAME);
            remove(BackgroundsList, i => i.Tag.includes(BACKGROUNDS_BCX_NAME));
            if (ChatCreateBackgroundList != null) {
                ChatCreateBackgroundList = BackgroundsGenerateList(BackgroundSelectionTagList);
            }
        }
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access) context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0) continue;
                if (result === null || typeof result !== "object") throw new TypeError("Object expected");
                if (_ = accept(result.get)) descriptor.get = _;
                if (_ = accept(result.set)) descriptor.set = _;
                if (_ = accept(result.init)) initializers.unshift(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field") initializers.unshift(_);
                else descriptor[key] = _;
            }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    };

    function __runInitializers(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    };

    function __propKey(x) {
        return typeof x === "symbol" ? x : "".concat(x);
    };

    function __setFunctionName(f, name, prefix) {
        if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    };

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    function __exportStar(m, o) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    var __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }

    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    function __classPrivateFieldIn(state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    }

    var tslib_es6 = {
        __extends,
        __assign,
        __rest,
        __decorate,
        __param,
        __metadata,
        __awaiter,
        __generator,
        __createBinding,
        __exportStar,
        __values,
        __read,
        __spread,
        __spreadArrays,
        __spreadArray,
        __await,
        __asyncGenerator,
        __asyncDelegator,
        __asyncValues,
        __makeTemplateObject,
        __importStar,
        __importDefault,
        __classPrivateFieldGet,
        __classPrivateFieldSet,
        __classPrivateFieldIn,
    };

    var _ModRuleState_ruleState;
    class ModRuleState {
        constructor(modName, state) {
            _ModRuleState_ruleState.set(this, void 0);
            this.modName = modName;
            this.rule = state.rule;
            __classPrivateFieldSet(this, _ModRuleState_ruleState, state, "f");
        }
        get ruleDefinition() {
            return cloneDeep(__classPrivateFieldGet(this, _ModRuleState_ruleState, "f").ruleDefinition);
        }
        get condition() {
            return cloneDeep(__classPrivateFieldGet(this, _ModRuleState_ruleState, "f").condition);
        }
        get inEffect() {
            return __classPrivateFieldGet(this, _ModRuleState_ruleState, "f").inEffect;
        }
        get isEnforced() {
            return __classPrivateFieldGet(this, _ModRuleState_ruleState, "f").isEnforced;
        }
        get isLogged() {
            return __classPrivateFieldGet(this, _ModRuleState_ruleState, "f").isLogged;
        }
        get customData() {
            return cloneDeep(__classPrivateFieldGet(this, _ModRuleState_ruleState, "f").customData);
        }
        get internalData() {
            return cloneDeep(__classPrivateFieldGet(this, _ModRuleState_ruleState, "f").internalData);
        }
        trigger(targetCharacter = null, dictionary = {}) {
            if ((targetCharacter === null || typeof targetCharacter === "number") &&
                isObject$1(dictionary) &&
                Object.values(dictionary).every(v => typeof v === "string")) {
                const context = debugContextStart("ModApiRuleTrigger", {
                    modArea: this.modName,
                    extraInfo: () => `mod: ${this.modName}; rule: ${this.rule}`,
                });
                __classPrivateFieldGet(this, _ModRuleState_ruleState, "f").trigger(targetCharacter, dictionary);
                context.end();
            }
            else {
                throw Error("Invalid data");
            }
        }
        triggerAttempt(targetCharacter = null, dictionary = {}) {
            if ((targetCharacter === null || typeof targetCharacter === "number") &&
                isObject$1(dictionary) &&
                Object.values(dictionary).every(v => typeof v === "string")) {
                const context = debugContextStart("ModApiRuleTriggerAttempt", {
                    modArea: this.modName,
                    extraInfo: () => `mod: ${this.modName}; rule: ${this.rule}`,
                });
                __classPrivateFieldGet(this, _ModRuleState_ruleState, "f").triggerAttempt(targetCharacter, dictionary);
                context.end();
            }
            else {
                throw Error("Invalid data");
            }
        }
    }
    _ModRuleState_ruleState = new WeakMap();
    class ModAPI extends TypedEventEmitter {
        constructor(modName) {
            super();
            this.modName = modName;
            BCXGlobalEventSystem.onAny((event) => {
                const context = debugContextStart("ModApiEvent", {
                    modArea: this.modName,
                    extraInfo: () => `mod: ${this.modName}; event: ${event.event}`,
                });
                try {
                    this.emit(event.event, event.data);
                }
                catch (error) {
                    reportManualError("While emitting BCX event", error);
                }
                context.end();
            });
        }
        getRuleState(rule) {
            try {
                const state = RulesGetRuleState(rule);
                return Object.freeze(new ModRuleState(this.modName, state));
            }
            catch (_) {
                return null;
            }
        }
    }

    class ConsoleInterface {
        get version() {
            return VERSION$1;
        }
        get versionParsed() {
            return cloneDeep(BCX_VERSION_PARSED);
        }
        getCharacterVersion(target) {
            if (target !== undefined && typeof target !== "number")
                return null;
            const char = target === undefined ? getPlayerCharacter() : getChatroomCharacter(target);
            return char ? char.BCXVersion : null;
        }
        get isAllow() {
            return allowMode;
        }
        AllowCheats(allow) {
            if (typeof allow !== "boolean" && allow !== undefined) {
                return false;
            }
            if (allowMode === allow)
                return true;
            if (allow === undefined) {
                allow = !allowMode;
            }
            return setAllowMode(allow);
        }
        get isDevel() {
            return developmentMode;
        }
        Devel(devel) {
            if (typeof devel !== "boolean" && devel !== undefined) {
                return false;
            }
            if (developmentMode === devel)
                return true;
            if (devel === undefined) {
                devel = !developmentMode;
            }
            return setDevelopmentMode(devel);
        }
        j_WardrobeExportSelectionClothes(includeBinds = false) {
            return j_WardrobeExportSelectionClothes(includeBinds);
        }
        j_WardrobeImportSelectionClothes(data, includeBinds, force = false) {
            return j_WardrobeImportSelectionClothes(data, includeBinds, force);
        }
        ToggleInvisibilityEarbuds() {
            return InvisibilityEarbuds();
        }
        Unload() {
            return unload();
        }
        get storage() {
            if (!developmentMode) {
                return "Development mode required";
            }
            return modStorage;
        }
        devGetCharacter(target) {
            if (!developmentMode || (target !== undefined && typeof target !== "number"))
                return false;
            if (target === undefined) {
                return getPlayerCharacter();
            }
            return getChatroomCharacter(target);
        }
        devSendQuery(target, query, data) {
            if (!developmentMode || typeof target !== "number" || typeof query !== "string")
                return false;
            sendQuery(query, data, target).then(result => {
                console.info(`Query ${query} to ${target} resolved:`, result);
            }, error => {
                console.warn(`Query ${query} to ${target} failed:`, error);
            });
            return true;
        }
        switchStorageLocation(location) {
            if (typeof location !== "number")
                return false;
            switchStorageLocation(location);
            return true;
        }
        showDebugReport() {
            showErrorOverlay("BCX Debug Report", "This is manually created debug report.\n" +
                "You can use the 'Close' button at the bottom to close this overlay.", debugGenerateReport());
        }
        debugSetLogServerMessages(value) {
            if (typeof value !== "boolean")
                return false;
            debugSetLogServerMessages(value);
            return true;
        }
        getModApi(modName) {
            if (!bcModSDK.getModsInfo().some(mod => mod.name === modName) || modName.trim().toLowerCase() === "bcx") {
                throw new Error("Only mods registered to ModSDK can request BCX API");
            }
            return Object.freeze(new ModAPI(modName));
        }
    }
    const consoleInterface = Object.freeze(new ConsoleInterface());
    class ModuleConsole extends BaseModule {
        load() {
            var _a;
            window.bcx = consoleInterface;
            patchFunction("ChatRoomMessageDefaultMetadataExtractor", {
                "asset.DynamicDescription(character).toLowerCase()": `( bcx.isDevel ? asset.Description : asset.DynamicDescription(character).toLowerCase() )`,
            });
            patchFunction("ChatRoomGetFocusGroupSubstitutions", {
                "DialogActualNameForGroup(targetCharacter, focusGroup).toLowerCase()": `( bcx.isDevel ? focusGroup.Description : DialogActualNameForGroup(targetCharacter, focusGroup).toLowerCase() )`,
            });
            for (let i = 0; i < ChatRoomMessageExtractors.length; i++) {
                if (ChatRoomMessageExtractors[i] === ((_a = bcModSDK.getPatchingInfo().get("ChatRoomMessageDefaultMetadataExtractor")) === null || _a === void 0 ? void 0 : _a.original)) {
                    ChatRoomMessageExtractors[i] = ChatRoomMessageDefaultMetadataExtractor;
                }
            }
            patchFunction("ExtendedItemDrawButton", {
                "DialogFindPlayer(DialogPrefix + Option.Name)": `( bcx.isDevel ? JSON.stringify(Option.Property.Type) : DialogFindPlayer(DialogPrefix + Option.Name) )`,
            });
            hookFunction("DialogDrawItemMenu", 0, (args, next) => {
                var _a;
                if (developmentMode) {
                    DialogTextDefault = ((_a = args[0].FocusGroup) === null || _a === void 0 ? void 0 : _a.Description) || "";
                }
                return next(args);
            });
            patchFunction("DialogDrawPoseMenu", {
                '"Icons/Poses/" + PoseGroup[P].Name + ".png"': `"Icons/Poses/" + PoseGroup[P].Name + ".png", ( bcx.isDevel ? PoseGroup[P].Name : undefined )`,
            });
            hookFunction("DialogDrawExpressionMenu", 0, (args, next) => {
                next(args);
                if (developmentMode) {
                    for (let I = 0; I < DialogFacialExpressions.length; I++) {
                        const FE = DialogFacialExpressions[I];
                        const OffsetY = 185 + 100 * I;
                        if (MouseIn(20, OffsetY, 90, 90)) {
                            DrawText(JSON.stringify(FE.Group), 300, 950, "White");
                        }
                        if (I === DialogFacialExpressionsSelected) {
                            for (let j = 0; j < FE.ExpressionList.length; j++) {
                                const EOffsetX = 155 + 100 * (j % 3);
                                const EOffsetY = 185 + 100 * Math.floor(j / 3);
                                if (MouseIn(EOffsetX, EOffsetY, 90, 90)) {
                                    DrawText(JSON.stringify(FE.ExpressionList[j]), 300, 950, "White");
                                }
                            }
                        }
                    }
                }
            });
            DialogSelfMenuOptions.forEach(opt => {
                if (opt.Name === "Pose") {
                    opt.IsAvailable = () => true;
                    opt.Draw = function () {
                        return DialogDrawPoseMenu();
                    };
                }
                else if (opt.Name === "Expression") {
                    opt.Draw = function () {
                        return DialogDrawExpressionMenu();
                    };
                }
            });
        }
        run() {
            if (window.BCX_Devel) {
                setDevelopmentMode(true);
            }
        }
        unload() {
            delete window.bcx;
        }
    }

    function customIsEnabled(feature) {
        var _a, _b;
        return !!((_b = (_a = Player.OnlineSettings) === null || _a === void 0 ? void 0 : _a.BCX_Custom) === null || _b === void 0 ? void 0 : _b.includes(feature));
    }
    class ModuleCustom extends BaseModule {
        load() {
            const customSubcommands = {};
            if (customIsEnabled("c")) {
                customSubcommands.ctoggle = [() => {
                        const c = InventoryGet(Player, "ItemVulva");
                        const a = AssetGet(Player.AssetFamily, "ItemVulva", "DoubleEndDildo");
                        if (!c && a) {
                            CharacterAppearanceSetItem(Player, "ItemVulva", a, "#A7806F");
                            ChatRoomCharacterUpdate(Player);
                        }
                        else if (c && c.Asset === a) {
                            InventoryRemove(Player, "ItemVulva");
                            ChatRoomCharacterUpdate(Player);
                        }
                    }, null];
                customSubcommands.ccage = [(argv) => {
                        var _a;
                        const C = Command_selectCharacter((_a = argv[1]) !== null && _a !== void 0 ? _a : "");
                        if (typeof C === "string") {
                            ChatRoomSendLocal(C, 10000);
                            return;
                        }
                        const c = InventoryGet(C.Character, "ItemVulva");
                        const a = AssetGet(C.Character.AssetFamily, "ItemVulva", "DoubleEndDildo");
                        const f = AssetGet(C.Character.AssetFamily, "ItemVulva", "FuturisticVibrator");
                        if (c && c.Asset === a && c.Color === "#A7806F" && f) {
                            InventoryRemove(C.Character, "ItemVulva");
                            C.Character.Appearance.push({
                                Asset: f,
                                Difficulty: 20,
                                Color: ["#A7806F", "Default", "Default"],
                                Property: { Mode: "Off", Intensity: -1, Effect: ["Egged"], TriggerValues: "ø,".repeat(7) + "ø", AccessMode: "LockMember" },
                            });
                            CharacterRefresh(C.Character, false);
                            ChatRoomCharacterUpdate(C.Character);
                        }
                        else if (c && c.Asset === f && isEqual(c.Color, ["#A7806F", "Default", "Default"]) && a) {
                            CharacterAppearanceSetItem(C.Character, "ItemVulva", a, "#A7806F");
                            ChatRoomCharacterUpdate(C.Character);
                        }
                    }, (argv) => (argv.length === 2 ? Command_selectCharacterAutocomplete(argv[1]) : [])];
            }
            if (Object.keys(customSubcommands).length > 0) {
                registerCommandParsed("hidden", "custom", "", (argv) => {
                    var _a;
                    const cmd = customSubcommands[(_a = argv[0]) !== null && _a !== void 0 ? _a : ""];
                    if (cmd) {
                        cmd[0](argv);
                        return true;
                    }
                    return false;
                }, (argv) => {
                    var _a, _b, _c, _d;
                    if (argv.length === 1) {
                        return Command_pickAutocomplete(argv[0], Object.keys(customSubcommands));
                    }
                    return (_d = (_c = (_b = customSubcommands[(_a = argv[0]) !== null && _a !== void 0 ? _a : ""]) === null || _b === void 0 ? void 0 : _b[1]) === null || _c === void 0 ? void 0 : _c.call(_b, argv)) !== null && _d !== void 0 ? _d : [];
                });
            }
        }
    }

    let searchBar = null;
    let searchBarAutoClose = false;
    let struggleCooldown = 0;
    const STRUGGLE_COOLDOWN_TIME = 2000;
    function allowSearchMode() {
        return CurrentCharacter != null &&
            (Player.FocusGroup != null ||
                (CurrentCharacter != null &&
                    CurrentCharacter.FocusGroup != null &&
                    CurrentCharacter.AllowItem)) &&
            DialogIntro() !== "" &&
            DialogFocusItem == null &&
            !DialogActivityMode &&
            !DialogCraftingMenu &&
            DialogColor == null &&
            StruggleProgress < 0 &&
            !StruggleLockPickOrder &&
            DialogItemToLock == null;
    }
    function enterSearchMode(C) {
        if (!searchBar) {
            searchBar = ElementCreateInput("BCXSearch", "text", "", "40");
            searchBar.oninput = () => {
                if (searchBar) {
                    if (searchBarAutoClose && !searchBar.value) {
                        exitSearchMode(C);
                        MainCanvas.canvas.focus();
                    }
                    else {
                        DialogInventoryBuild(C);
                    }
                }
            };
            searchBar.focus();
            DialogInventoryBuild(C);
        }
    }
    function exitSearchMode(C) {
        if (searchBar) {
            searchBar.remove();
            searchBar = null;
            searchBarAutoClose = false;
            DialogInventoryBuild(C);
        }
    }
    class ModuleDialog extends BaseModule {
        load() {
            OverridePlayerDialog("BCX_Search", "Filter items");
            OverridePlayerDialog("BCX_SearchExit", "");
            RedirectGetImage("Icons/BCX_Search.png", "Icons/Search.png");
            RedirectGetImage("Icons/BCX_SearchExit.png", "Icons/Remove.png");
            hookFunction("DialogMenuButtonBuild", 5, (args, next) => {
                next(args);
                if (!allowSearchMode()) {
                    exitSearchMode(args[0]);
                }
                else if (searchBar) {
                    DialogMenuButton = ["Exit", "BCX_SearchExit"];
                    if (DialogInventory.length > 12) {
                        DialogMenuButton.push("Next");
                    }
                }
                else {
                    DialogMenuButton.splice(1, 0, "BCX_Search");
                }
            });
            HookDialogMenuButtonClick("BCX_Search", (C) => {
                enterSearchMode(C);
                return true;
            });
            HookDialogMenuButtonClick("BCX_SearchExit", (C) => {
                exitSearchMode(C);
                return true;
            });
            hookFunction("CommonKeyDown", 5, (args, next) => {
                const ev = args[0];
                const sb = searchBar;
                if (!sb &&
                    CurrentCharacter &&
                    allowSearchMode() &&
                    ev.key.length === 1 &&
                    document.activeElement === MainCanvas.canvas &&
                    !ev.altKey && !ev.ctrlKey && !ev.metaKey &&
                    (struggleCooldown <= Date.now() || !["a", "s"].includes(ev.key.toLowerCase()))) {
                    enterSearchMode(CurrentCharacter);
                    searchBarAutoClose = true;
                    return;
                }
                next(args);
            });
            if (GameVersion === "R88") {
                hookFunction("StruggleDrawStrengthProgress", 0, (args, next) => {
                    next(args);
                    struggleCooldown = Date.now() + STRUGGLE_COOLDOWN_TIME;
                });
            }
            else {
                hookFunction("StruggleStrengthDraw", 0, (args, next) => {
                    next(args);
                    struggleCooldown = Date.now() + STRUGGLE_COOLDOWN_TIME;
                });
            }
            hookFunction("DialogInventoryAdd", 5, (args, next) => {
                if (searchBar) {
                    const item = args[1];
                    if (!searchBar.value
                        .trim()
                        .toLocaleLowerCase()
                        .split(" ")
                        .every(i => item.Asset.Description.toLocaleLowerCase().includes(i) ||
                        item.Asset.Name.toLocaleLowerCase().includes(i))) {
                        return;
                    }
                }
                next(args);
            });
            hookFunction("DialogDrawItemMenu", 0, (args, next) => {
                if (searchBar) {
                    ElementPositionFix("BCXSearch", 40, 1005, 25, 625, 60);
                }
                next(args);
            });
            hookFunction("DialogLeaveItemMenu", 0, (args, next) => {
                var _a;
                exitSearchMode((_a = CharacterGetCurrent()) !== null && _a !== void 0 ? _a : Player);
                next(args);
            });
            hookFunction("DialogItemClick", 0, (args, next) => {
                var _a;
                next(args);
                if (!DialogItemPermissionMode) {
                    exitSearchMode((_a = CharacterGetCurrent()) !== null && _a !== void 0 ? _a : Player);
                }
            });
            hookFunction("DialogMenuButtonBuild", 10, (args, next) => {
                next(args);
                for (const toRemove of ["ChangeLayersMouth", "Prev", "BCX_Search"]) {
                    if (DialogMenuButton.length <= 9)
                        break;
                    const index = DialogMenuButton.indexOf(toRemove);
                    if (index >= 0) {
                        DialogMenuButton.splice(index, 1);
                    }
                }
            });
        }
        run() {
            const C = CharacterGetCurrent();
            if (C) {
                DialogInventoryBuild(C);
            }
        }
        unload() {
            var _a, _b;
            exitSearchMode((_a = CharacterGetCurrent()) !== null && _a !== void 0 ? _a : Player);
            DialogInventoryBuild((_b = CharacterGetCurrent()) !== null && _b !== void 0 ? _b : Player);
        }
    }

    const AUTOREFRESH_INTERVAL = 10000;
    class ModuleFriends extends BaseModule {
        load() {
            if (!isNModClient()) {
                let friendListNextRefresh = 0;
                let pendingRefresh = false;
                hookFunction("FriendListRun", 0, (args, next) => {
                    next(args);
                    DrawButton(1755, 25, 40, 40, "", pendingRefresh ? "#88c" : "White", "", "Toggle 10 sec auto-refresh");
                    DrawImageEx("Icons/Wait.png", 1755 + 3, 25 + 3, { Alpha: modStorage.FLAutorefresh ? 1 : 0.2, Width: 34, Height: 34 });
                    if (modStorage.FLAutorefresh && Date.now() >= friendListNextRefresh && ServerIsConnected) {
                        friendListNextRefresh = Date.now() + AUTOREFRESH_INTERVAL;
                        pendingRefresh = true;
                        ServerSend("AccountQuery", { Query: "OnlineFriends" });
                    }
                });
                hookFunction("FriendListLoadFriendList", 0, (args, next) => {
                    pendingRefresh = false;
                    next(args);
                });
                hookFunction("FriendListClick", 4, (args, next) => {
                    if (MouseIn(1755, 25, 40, 40)) {
                        if (modStorage.FLAutorefresh) {
                            delete modStorage.FLAutorefresh;
                        }
                        else {
                            modStorage.FLAutorefresh = true;
                            friendListNextRefresh = Date.now() + AUTOREFRESH_INTERVAL;
                            pendingRefresh = true;
                            ElementContent("FriendList", "");
                            ServerSend("AccountQuery", { Query: "OnlineFriends" });
                        }
                        modStorageSync();
                        return;
                    }
                    next(args);
                });
            }
        }
    }

    registerModule(new ModuleAuthority());
    registerModule(new ModuleCharacter());
    registerModule(new ModuleChatroom());
    registerModule(new ModuleChatroomAdmin());
    registerModule(new ModuleClubUtils());
    registerModule(new ModuleCommands());
    registerModule(new ModuleCommandsModule());
    registerModule(new ModuleConditions());
    registerModule(new ModuleConsole());
    registerModule(new ModuleCurses());
    registerModule(new ModuleCustom());
    registerModule(new ModuleDialog());
    registerModule(new ModuleExportImport());
    registerModule(new ModuleFriends());
    registerModule(new ModuleGUI());
    registerModule(new ModuleLog());
    registerModule(new ModuleMessaging());
    registerModule(new ModuleMiscPatches());
    registerModule(new ModulePresets());
    registerModule(new ModuleRelationhips());
    registerModule(new ModuleRules());
    registerModule(new ModuleSpeech());
    registerModule(new ModuleStorage());
    registerModule(new ModuleVersionCheck());
    registerModule(new ModuleWardrobe());

    function initWait() {
        console.debug("BCX: Init wait");
        if (CurrentScreen == null || CurrentScreen === "Login") {
            hookFunction("LoginResponse", 0, (args, next) => {
                console.debug("BCX: Init LoginResponse caught", args);
                next(args);
                const response = args[0];
                if (isObject$1(response) && typeof response.Name === "string" && typeof response.AccountName === "string") {
                    loginInit(args[0]);
                }
            });
            InfoBeep(`BCX Ready!`);
            console.log(`BCX Ready!`);
        }
        else {
            console.debug("BCX: Already logged in, init");
            init();
        }
    }
    init_findBCXSource();
    initWait();

})();
//# sourceMappingURL=bcx.dev.js.map
